
Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006384  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08006448  08006448  00016448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080066d0  080066d0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066d0  080066d0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000014  080066ec  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080066ec  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e2e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001838  00000000  00000000  00027e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  000296a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f0aa  00000000  00000000  0002a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b92  00000000  00000000  0003948a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000597a8  00000000  00000000  0004301c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009c7c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bac  00000000  00000000  0009c818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800642c 	.word	0x0800642c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	0800642c 	.word	0x0800642c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 ff51 	bl	80012ac <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe9b 	bl	8001150 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 ff43 	bl	80012ac <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff39 	bl	80012ac <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 febd 	bl	80011c8 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 feb3 	bl	80011c8 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fd7f 	bl	8001f88 <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f001 f9e6 	bl	8001864 <__aeabi_dsub>
 8000498:	f001 fd76 	bl	8001f88 <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_dadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	46d6      	mov	lr, sl
 80004b2:	4646      	mov	r6, r8
 80004b4:	000d      	movs	r5, r1
 80004b6:	0001      	movs	r1, r0
 80004b8:	0018      	movs	r0, r3
 80004ba:	b5c0      	push	{r6, r7, lr}
 80004bc:	0017      	movs	r7, r2
 80004be:	032b      	lsls	r3, r5, #12
 80004c0:	0a5a      	lsrs	r2, r3, #9
 80004c2:	0f4b      	lsrs	r3, r1, #29
 80004c4:	4313      	orrs	r3, r2
 80004c6:	00ca      	lsls	r2, r1, #3
 80004c8:	4691      	mov	r9, r2
 80004ca:	0302      	lsls	r2, r0, #12
 80004cc:	006e      	lsls	r6, r5, #1
 80004ce:	0041      	lsls	r1, r0, #1
 80004d0:	0a52      	lsrs	r2, r2, #9
 80004d2:	0fec      	lsrs	r4, r5, #31
 80004d4:	0f7d      	lsrs	r5, r7, #29
 80004d6:	4315      	orrs	r5, r2
 80004d8:	0d76      	lsrs	r6, r6, #21
 80004da:	0d49      	lsrs	r1, r1, #21
 80004dc:	0fc0      	lsrs	r0, r0, #31
 80004de:	4682      	mov	sl, r0
 80004e0:	46ac      	mov	ip, r5
 80004e2:	00ff      	lsls	r7, r7, #3
 80004e4:	1a72      	subs	r2, r6, r1
 80004e6:	4284      	cmp	r4, r0
 80004e8:	d100      	bne.n	80004ec <__aeabi_dadd+0x40>
 80004ea:	e098      	b.n	800061e <__aeabi_dadd+0x172>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x46>
 80004f0:	e081      	b.n	80005f6 <__aeabi_dadd+0x14a>
 80004f2:	2900      	cmp	r1, #0
 80004f4:	d100      	bne.n	80004f8 <__aeabi_dadd+0x4c>
 80004f6:	e0b6      	b.n	8000666 <__aeabi_dadd+0x1ba>
 80004f8:	49c9      	ldr	r1, [pc, #804]	; (8000820 <__aeabi_dadd+0x374>)
 80004fa:	428e      	cmp	r6, r1
 80004fc:	d100      	bne.n	8000500 <__aeabi_dadd+0x54>
 80004fe:	e172      	b.n	80007e6 <__aeabi_dadd+0x33a>
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0028      	movs	r0, r5
 8000504:	0409      	lsls	r1, r1, #16
 8000506:	4308      	orrs	r0, r1
 8000508:	4684      	mov	ip, r0
 800050a:	2a38      	cmp	r2, #56	; 0x38
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x64>
 800050e:	e15e      	b.n	80007ce <__aeabi_dadd+0x322>
 8000510:	2a1f      	cmp	r2, #31
 8000512:	dd00      	ble.n	8000516 <__aeabi_dadd+0x6a>
 8000514:	e1ee      	b.n	80008f4 <__aeabi_dadd+0x448>
 8000516:	2020      	movs	r0, #32
 8000518:	0039      	movs	r1, r7
 800051a:	4665      	mov	r5, ip
 800051c:	1a80      	subs	r0, r0, r2
 800051e:	4087      	lsls	r7, r0
 8000520:	40d1      	lsrs	r1, r2
 8000522:	4085      	lsls	r5, r0
 8000524:	430d      	orrs	r5, r1
 8000526:	0039      	movs	r1, r7
 8000528:	1e4f      	subs	r7, r1, #1
 800052a:	41b9      	sbcs	r1, r7
 800052c:	4667      	mov	r7, ip
 800052e:	40d7      	lsrs	r7, r2
 8000530:	4329      	orrs	r1, r5
 8000532:	1bdb      	subs	r3, r3, r7
 8000534:	464a      	mov	r2, r9
 8000536:	1a55      	subs	r5, r2, r1
 8000538:	45a9      	cmp	r9, r5
 800053a:	4189      	sbcs	r1, r1
 800053c:	4249      	negs	r1, r1
 800053e:	1a5b      	subs	r3, r3, r1
 8000540:	4698      	mov	r8, r3
 8000542:	4643      	mov	r3, r8
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	d400      	bmi.n	800054a <__aeabi_dadd+0x9e>
 8000548:	e0cc      	b.n	80006e4 <__aeabi_dadd+0x238>
 800054a:	4643      	mov	r3, r8
 800054c:	025b      	lsls	r3, r3, #9
 800054e:	0a5b      	lsrs	r3, r3, #9
 8000550:	4698      	mov	r8, r3
 8000552:	4643      	mov	r3, r8
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xae>
 8000558:	e12c      	b.n	80007b4 <__aeabi_dadd+0x308>
 800055a:	4640      	mov	r0, r8
 800055c:	f001 fe4a 	bl	80021f4 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2220      	movs	r2, #32
 8000566:	0028      	movs	r0, r5
 8000568:	4643      	mov	r3, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	408b      	lsls	r3, r1
 800056e:	40d0      	lsrs	r0, r2
 8000570:	408d      	lsls	r5, r1
 8000572:	4303      	orrs	r3, r0
 8000574:	428e      	cmp	r6, r1
 8000576:	dd00      	ble.n	800057a <__aeabi_dadd+0xce>
 8000578:	e117      	b.n	80007aa <__aeabi_dadd+0x2fe>
 800057a:	1b8e      	subs	r6, r1, r6
 800057c:	1c72      	adds	r2, r6, #1
 800057e:	2a1f      	cmp	r2, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0xd8>
 8000582:	e1a7      	b.n	80008d4 <__aeabi_dadd+0x428>
 8000584:	2120      	movs	r1, #32
 8000586:	0018      	movs	r0, r3
 8000588:	002e      	movs	r6, r5
 800058a:	1a89      	subs	r1, r1, r2
 800058c:	408d      	lsls	r5, r1
 800058e:	4088      	lsls	r0, r1
 8000590:	40d6      	lsrs	r6, r2
 8000592:	40d3      	lsrs	r3, r2
 8000594:	1e69      	subs	r1, r5, #1
 8000596:	418d      	sbcs	r5, r1
 8000598:	4330      	orrs	r0, r6
 800059a:	4698      	mov	r8, r3
 800059c:	2600      	movs	r6, #0
 800059e:	4305      	orrs	r5, r0
 80005a0:	076b      	lsls	r3, r5, #29
 80005a2:	d009      	beq.n	80005b8 <__aeabi_dadd+0x10c>
 80005a4:	230f      	movs	r3, #15
 80005a6:	402b      	ands	r3, r5
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <__aeabi_dadd+0x10c>
 80005ac:	1d2b      	adds	r3, r5, #4
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	41ad      	sbcs	r5, r5
 80005b2:	426d      	negs	r5, r5
 80005b4:	44a8      	add	r8, r5
 80005b6:	001d      	movs	r5, r3
 80005b8:	4643      	mov	r3, r8
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	d400      	bmi.n	80005c0 <__aeabi_dadd+0x114>
 80005be:	e094      	b.n	80006ea <__aeabi_dadd+0x23e>
 80005c0:	4b97      	ldr	r3, [pc, #604]	; (8000820 <__aeabi_dadd+0x374>)
 80005c2:	1c72      	adds	r2, r6, #1
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x11e>
 80005c8:	e09d      	b.n	8000706 <__aeabi_dadd+0x25a>
 80005ca:	4641      	mov	r1, r8
 80005cc:	4b95      	ldr	r3, [pc, #596]	; (8000824 <__aeabi_dadd+0x378>)
 80005ce:	08ed      	lsrs	r5, r5, #3
 80005d0:	4019      	ands	r1, r3
 80005d2:	000b      	movs	r3, r1
 80005d4:	0552      	lsls	r2, r2, #21
 80005d6:	0749      	lsls	r1, r1, #29
 80005d8:	025b      	lsls	r3, r3, #9
 80005da:	4329      	orrs	r1, r5
 80005dc:	0b1b      	lsrs	r3, r3, #12
 80005de:	0d52      	lsrs	r2, r2, #21
 80005e0:	0512      	lsls	r2, r2, #20
 80005e2:	4313      	orrs	r3, r2
 80005e4:	07e4      	lsls	r4, r4, #31
 80005e6:	4323      	orrs	r3, r4
 80005e8:	0008      	movs	r0, r1
 80005ea:	0019      	movs	r1, r3
 80005ec:	bce0      	pop	{r5, r6, r7}
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46b1      	mov	r9, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	2a00      	cmp	r2, #0
 80005f8:	d043      	beq.n	8000682 <__aeabi_dadd+0x1d6>
 80005fa:	1b8a      	subs	r2, r1, r6
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x156>
 8000600:	e12a      	b.n	8000858 <__aeabi_dadd+0x3ac>
 8000602:	464c      	mov	r4, r9
 8000604:	431c      	orrs	r4, r3
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x15e>
 8000608:	e1d1      	b.n	80009ae <__aeabi_dadd+0x502>
 800060a:	1e54      	subs	r4, r2, #1
 800060c:	2a01      	cmp	r2, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x166>
 8000610:	e21f      	b.n	8000a52 <__aeabi_dadd+0x5a6>
 8000612:	4d83      	ldr	r5, [pc, #524]	; (8000820 <__aeabi_dadd+0x374>)
 8000614:	42aa      	cmp	r2, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x16e>
 8000618:	e272      	b.n	8000b00 <__aeabi_dadd+0x654>
 800061a:	0022      	movs	r2, r4
 800061c:	e123      	b.n	8000866 <__aeabi_dadd+0x3ba>
 800061e:	2a00      	cmp	r2, #0
 8000620:	dc00      	bgt.n	8000624 <__aeabi_dadd+0x178>
 8000622:	e098      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000624:	2900      	cmp	r1, #0
 8000626:	d042      	beq.n	80006ae <__aeabi_dadd+0x202>
 8000628:	497d      	ldr	r1, [pc, #500]	; (8000820 <__aeabi_dadd+0x374>)
 800062a:	428e      	cmp	r6, r1
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x184>
 800062e:	e0da      	b.n	80007e6 <__aeabi_dadd+0x33a>
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0028      	movs	r0, r5
 8000634:	0409      	lsls	r1, r1, #16
 8000636:	4308      	orrs	r0, r1
 8000638:	4684      	mov	ip, r0
 800063a:	2a38      	cmp	r2, #56	; 0x38
 800063c:	dd00      	ble.n	8000640 <__aeabi_dadd+0x194>
 800063e:	e129      	b.n	8000894 <__aeabi_dadd+0x3e8>
 8000640:	2a1f      	cmp	r2, #31
 8000642:	dc00      	bgt.n	8000646 <__aeabi_dadd+0x19a>
 8000644:	e187      	b.n	8000956 <__aeabi_dadd+0x4aa>
 8000646:	0011      	movs	r1, r2
 8000648:	4665      	mov	r5, ip
 800064a:	3920      	subs	r1, #32
 800064c:	40cd      	lsrs	r5, r1
 800064e:	2a20      	cmp	r2, #32
 8000650:	d004      	beq.n	800065c <__aeabi_dadd+0x1b0>
 8000652:	2040      	movs	r0, #64	; 0x40
 8000654:	4661      	mov	r1, ip
 8000656:	1a82      	subs	r2, r0, r2
 8000658:	4091      	lsls	r1, r2
 800065a:	430f      	orrs	r7, r1
 800065c:	0039      	movs	r1, r7
 800065e:	1e4f      	subs	r7, r1, #1
 8000660:	41b9      	sbcs	r1, r7
 8000662:	430d      	orrs	r5, r1
 8000664:	e11b      	b.n	800089e <__aeabi_dadd+0x3f2>
 8000666:	0029      	movs	r1, r5
 8000668:	4339      	orrs	r1, r7
 800066a:	d100      	bne.n	800066e <__aeabi_dadd+0x1c2>
 800066c:	e0b5      	b.n	80007da <__aeabi_dadd+0x32e>
 800066e:	1e51      	subs	r1, r2, #1
 8000670:	2a01      	cmp	r2, #1
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x1ca>
 8000674:	e1ab      	b.n	80009ce <__aeabi_dadd+0x522>
 8000676:	486a      	ldr	r0, [pc, #424]	; (8000820 <__aeabi_dadd+0x374>)
 8000678:	4282      	cmp	r2, r0
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d2>
 800067c:	e1b2      	b.n	80009e4 <__aeabi_dadd+0x538>
 800067e:	000a      	movs	r2, r1
 8000680:	e743      	b.n	800050a <__aeabi_dadd+0x5e>
 8000682:	4969      	ldr	r1, [pc, #420]	; (8000828 <__aeabi_dadd+0x37c>)
 8000684:	1c75      	adds	r5, r6, #1
 8000686:	420d      	tst	r5, r1
 8000688:	d000      	beq.n	800068c <__aeabi_dadd+0x1e0>
 800068a:	e0cf      	b.n	800082c <__aeabi_dadd+0x380>
 800068c:	2e00      	cmp	r6, #0
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1e6>
 8000690:	e193      	b.n	80009ba <__aeabi_dadd+0x50e>
 8000692:	4649      	mov	r1, r9
 8000694:	4319      	orrs	r1, r3
 8000696:	d100      	bne.n	800069a <__aeabi_dadd+0x1ee>
 8000698:	e1d1      	b.n	8000a3e <__aeabi_dadd+0x592>
 800069a:	4661      	mov	r1, ip
 800069c:	4339      	orrs	r1, r7
 800069e:	d000      	beq.n	80006a2 <__aeabi_dadd+0x1f6>
 80006a0:	e1e3      	b.n	8000a6a <__aeabi_dadd+0x5be>
 80006a2:	4649      	mov	r1, r9
 80006a4:	0758      	lsls	r0, r3, #29
 80006a6:	08c9      	lsrs	r1, r1, #3
 80006a8:	4301      	orrs	r1, r0
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	e026      	b.n	80006fc <__aeabi_dadd+0x250>
 80006ae:	0029      	movs	r1, r5
 80006b0:	4339      	orrs	r1, r7
 80006b2:	d100      	bne.n	80006b6 <__aeabi_dadd+0x20a>
 80006b4:	e091      	b.n	80007da <__aeabi_dadd+0x32e>
 80006b6:	1e51      	subs	r1, r2, #1
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d005      	beq.n	80006c8 <__aeabi_dadd+0x21c>
 80006bc:	4858      	ldr	r0, [pc, #352]	; (8000820 <__aeabi_dadd+0x374>)
 80006be:	4282      	cmp	r2, r0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x218>
 80006c2:	e18f      	b.n	80009e4 <__aeabi_dadd+0x538>
 80006c4:	000a      	movs	r2, r1
 80006c6:	e7b8      	b.n	800063a <__aeabi_dadd+0x18e>
 80006c8:	003d      	movs	r5, r7
 80006ca:	444d      	add	r5, r9
 80006cc:	454d      	cmp	r5, r9
 80006ce:	4189      	sbcs	r1, r1
 80006d0:	4463      	add	r3, ip
 80006d2:	4698      	mov	r8, r3
 80006d4:	4249      	negs	r1, r1
 80006d6:	4488      	add	r8, r1
 80006d8:	4643      	mov	r3, r8
 80006da:	2602      	movs	r6, #2
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	d500      	bpl.n	80006e2 <__aeabi_dadd+0x236>
 80006e0:	e0eb      	b.n	80008ba <__aeabi_dadd+0x40e>
 80006e2:	3e01      	subs	r6, #1
 80006e4:	076b      	lsls	r3, r5, #29
 80006e6:	d000      	beq.n	80006ea <__aeabi_dadd+0x23e>
 80006e8:	e75c      	b.n	80005a4 <__aeabi_dadd+0xf8>
 80006ea:	4643      	mov	r3, r8
 80006ec:	08e9      	lsrs	r1, r5, #3
 80006ee:	075a      	lsls	r2, r3, #29
 80006f0:	4311      	orrs	r1, r2
 80006f2:	0032      	movs	r2, r6
 80006f4:	08db      	lsrs	r3, r3, #3
 80006f6:	484a      	ldr	r0, [pc, #296]	; (8000820 <__aeabi_dadd+0x374>)
 80006f8:	4282      	cmp	r2, r0
 80006fa:	d021      	beq.n	8000740 <__aeabi_dadd+0x294>
 80006fc:	031b      	lsls	r3, r3, #12
 80006fe:	0552      	lsls	r2, r2, #21
 8000700:	0b1b      	lsrs	r3, r3, #12
 8000702:	0d52      	lsrs	r2, r2, #21
 8000704:	e76c      	b.n	80005e0 <__aeabi_dadd+0x134>
 8000706:	2300      	movs	r3, #0
 8000708:	2100      	movs	r1, #0
 800070a:	e769      	b.n	80005e0 <__aeabi_dadd+0x134>
 800070c:	002a      	movs	r2, r5
 800070e:	433a      	orrs	r2, r7
 8000710:	d069      	beq.n	80007e6 <__aeabi_dadd+0x33a>
 8000712:	464a      	mov	r2, r9
 8000714:	0758      	lsls	r0, r3, #29
 8000716:	08d1      	lsrs	r1, r2, #3
 8000718:	08da      	lsrs	r2, r3, #3
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	031b      	lsls	r3, r3, #12
 800071e:	4308      	orrs	r0, r1
 8000720:	421a      	tst	r2, r3
 8000722:	d007      	beq.n	8000734 <__aeabi_dadd+0x288>
 8000724:	0029      	movs	r1, r5
 8000726:	08ed      	lsrs	r5, r5, #3
 8000728:	421d      	tst	r5, r3
 800072a:	d103      	bne.n	8000734 <__aeabi_dadd+0x288>
 800072c:	002a      	movs	r2, r5
 800072e:	08ff      	lsrs	r7, r7, #3
 8000730:	0748      	lsls	r0, r1, #29
 8000732:	4338      	orrs	r0, r7
 8000734:	0f43      	lsrs	r3, r0, #29
 8000736:	00c1      	lsls	r1, r0, #3
 8000738:	075b      	lsls	r3, r3, #29
 800073a:	08c9      	lsrs	r1, r1, #3
 800073c:	4319      	orrs	r1, r3
 800073e:	0013      	movs	r3, r2
 8000740:	000a      	movs	r2, r1
 8000742:	431a      	orrs	r2, r3
 8000744:	d100      	bne.n	8000748 <__aeabi_dadd+0x29c>
 8000746:	e213      	b.n	8000b70 <__aeabi_dadd+0x6c4>
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0312      	lsls	r2, r2, #12
 800074c:	4313      	orrs	r3, r2
 800074e:	031b      	lsls	r3, r3, #12
 8000750:	4a33      	ldr	r2, [pc, #204]	; (8000820 <__aeabi_dadd+0x374>)
 8000752:	0b1b      	lsrs	r3, r3, #12
 8000754:	e744      	b.n	80005e0 <__aeabi_dadd+0x134>
 8000756:	2a00      	cmp	r2, #0
 8000758:	d04b      	beq.n	80007f2 <__aeabi_dadd+0x346>
 800075a:	1b8a      	subs	r2, r1, r6
 800075c:	2e00      	cmp	r6, #0
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x2b6>
 8000760:	e0e7      	b.n	8000932 <__aeabi_dadd+0x486>
 8000762:	482f      	ldr	r0, [pc, #188]	; (8000820 <__aeabi_dadd+0x374>)
 8000764:	4281      	cmp	r1, r0
 8000766:	d100      	bne.n	800076a <__aeabi_dadd+0x2be>
 8000768:	e195      	b.n	8000a96 <__aeabi_dadd+0x5ea>
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	0400      	lsls	r0, r0, #16
 800076e:	4303      	orrs	r3, r0
 8000770:	2a38      	cmp	r2, #56	; 0x38
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x2ca>
 8000774:	e143      	b.n	80009fe <__aeabi_dadd+0x552>
 8000776:	2a1f      	cmp	r2, #31
 8000778:	dd00      	ble.n	800077c <__aeabi_dadd+0x2d0>
 800077a:	e1db      	b.n	8000b34 <__aeabi_dadd+0x688>
 800077c:	2020      	movs	r0, #32
 800077e:	001d      	movs	r5, r3
 8000780:	464e      	mov	r6, r9
 8000782:	1a80      	subs	r0, r0, r2
 8000784:	4085      	lsls	r5, r0
 8000786:	40d6      	lsrs	r6, r2
 8000788:	4335      	orrs	r5, r6
 800078a:	464e      	mov	r6, r9
 800078c:	4086      	lsls	r6, r0
 800078e:	0030      	movs	r0, r6
 8000790:	40d3      	lsrs	r3, r2
 8000792:	1e46      	subs	r6, r0, #1
 8000794:	41b0      	sbcs	r0, r6
 8000796:	449c      	add	ip, r3
 8000798:	4305      	orrs	r5, r0
 800079a:	19ed      	adds	r5, r5, r7
 800079c:	42bd      	cmp	r5, r7
 800079e:	419b      	sbcs	r3, r3
 80007a0:	425b      	negs	r3, r3
 80007a2:	4463      	add	r3, ip
 80007a4:	4698      	mov	r8, r3
 80007a6:	000e      	movs	r6, r1
 80007a8:	e07f      	b.n	80008aa <__aeabi_dadd+0x3fe>
 80007aa:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <__aeabi_dadd+0x378>)
 80007ac:	1a76      	subs	r6, r6, r1
 80007ae:	4013      	ands	r3, r2
 80007b0:	4698      	mov	r8, r3
 80007b2:	e6f5      	b.n	80005a0 <__aeabi_dadd+0xf4>
 80007b4:	0028      	movs	r0, r5
 80007b6:	f001 fd1d 	bl	80021f4 <__clzsi2>
 80007ba:	0001      	movs	r1, r0
 80007bc:	3118      	adds	r1, #24
 80007be:	291f      	cmp	r1, #31
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_dadd+0x318>
 80007c2:	e6cf      	b.n	8000564 <__aeabi_dadd+0xb8>
 80007c4:	002b      	movs	r3, r5
 80007c6:	3808      	subs	r0, #8
 80007c8:	4083      	lsls	r3, r0
 80007ca:	2500      	movs	r5, #0
 80007cc:	e6d2      	b.n	8000574 <__aeabi_dadd+0xc8>
 80007ce:	4662      	mov	r2, ip
 80007d0:	433a      	orrs	r2, r7
 80007d2:	0011      	movs	r1, r2
 80007d4:	1e4f      	subs	r7, r1, #1
 80007d6:	41b9      	sbcs	r1, r7
 80007d8:	e6ac      	b.n	8000534 <__aeabi_dadd+0x88>
 80007da:	4649      	mov	r1, r9
 80007dc:	0758      	lsls	r0, r3, #29
 80007de:	08c9      	lsrs	r1, r1, #3
 80007e0:	4301      	orrs	r1, r0
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	e787      	b.n	80006f6 <__aeabi_dadd+0x24a>
 80007e6:	4649      	mov	r1, r9
 80007e8:	075a      	lsls	r2, r3, #29
 80007ea:	08c9      	lsrs	r1, r1, #3
 80007ec:	4311      	orrs	r1, r2
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	e7a6      	b.n	8000740 <__aeabi_dadd+0x294>
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <__aeabi_dadd+0x37c>)
 80007f4:	1c70      	adds	r0, r6, #1
 80007f6:	4208      	tst	r0, r1
 80007f8:	d000      	beq.n	80007fc <__aeabi_dadd+0x350>
 80007fa:	e0bb      	b.n	8000974 <__aeabi_dadd+0x4c8>
 80007fc:	2e00      	cmp	r6, #0
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x356>
 8000800:	e114      	b.n	8000a2c <__aeabi_dadd+0x580>
 8000802:	4649      	mov	r1, r9
 8000804:	4319      	orrs	r1, r3
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x35e>
 8000808:	e175      	b.n	8000af6 <__aeabi_dadd+0x64a>
 800080a:	0029      	movs	r1, r5
 800080c:	4339      	orrs	r1, r7
 800080e:	d000      	beq.n	8000812 <__aeabi_dadd+0x366>
 8000810:	e17e      	b.n	8000b10 <__aeabi_dadd+0x664>
 8000812:	4649      	mov	r1, r9
 8000814:	0758      	lsls	r0, r3, #29
 8000816:	08c9      	lsrs	r1, r1, #3
 8000818:	4301      	orrs	r1, r0
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	e76e      	b.n	80006fc <__aeabi_dadd+0x250>
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	000007ff 	.word	0x000007ff
 8000824:	ff7fffff 	.word	0xff7fffff
 8000828:	000007fe 	.word	0x000007fe
 800082c:	4649      	mov	r1, r9
 800082e:	1bcd      	subs	r5, r1, r7
 8000830:	4661      	mov	r1, ip
 8000832:	1a58      	subs	r0, r3, r1
 8000834:	45a9      	cmp	r9, r5
 8000836:	4189      	sbcs	r1, r1
 8000838:	4249      	negs	r1, r1
 800083a:	4688      	mov	r8, r1
 800083c:	0001      	movs	r1, r0
 800083e:	4640      	mov	r0, r8
 8000840:	1a09      	subs	r1, r1, r0
 8000842:	4688      	mov	r8, r1
 8000844:	0209      	lsls	r1, r1, #8
 8000846:	d500      	bpl.n	800084a <__aeabi_dadd+0x39e>
 8000848:	e0a6      	b.n	8000998 <__aeabi_dadd+0x4ec>
 800084a:	4641      	mov	r1, r8
 800084c:	4329      	orrs	r1, r5
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x3a6>
 8000850:	e67f      	b.n	8000552 <__aeabi_dadd+0xa6>
 8000852:	2300      	movs	r3, #0
 8000854:	2400      	movs	r4, #0
 8000856:	e751      	b.n	80006fc <__aeabi_dadd+0x250>
 8000858:	4cc7      	ldr	r4, [pc, #796]	; (8000b78 <__aeabi_dadd+0x6cc>)
 800085a:	42a1      	cmp	r1, r4
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x3b4>
 800085e:	e0c7      	b.n	80009f0 <__aeabi_dadd+0x544>
 8000860:	2480      	movs	r4, #128	; 0x80
 8000862:	0424      	lsls	r4, r4, #16
 8000864:	4323      	orrs	r3, r4
 8000866:	2a38      	cmp	r2, #56	; 0x38
 8000868:	dc54      	bgt.n	8000914 <__aeabi_dadd+0x468>
 800086a:	2a1f      	cmp	r2, #31
 800086c:	dd00      	ble.n	8000870 <__aeabi_dadd+0x3c4>
 800086e:	e0cc      	b.n	8000a0a <__aeabi_dadd+0x55e>
 8000870:	2420      	movs	r4, #32
 8000872:	4648      	mov	r0, r9
 8000874:	1aa4      	subs	r4, r4, r2
 8000876:	001d      	movs	r5, r3
 8000878:	464e      	mov	r6, r9
 800087a:	40a0      	lsls	r0, r4
 800087c:	40d6      	lsrs	r6, r2
 800087e:	40a5      	lsls	r5, r4
 8000880:	0004      	movs	r4, r0
 8000882:	40d3      	lsrs	r3, r2
 8000884:	4662      	mov	r2, ip
 8000886:	4335      	orrs	r5, r6
 8000888:	1e66      	subs	r6, r4, #1
 800088a:	41b4      	sbcs	r4, r6
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	469c      	mov	ip, r3
 8000890:	4325      	orrs	r5, r4
 8000892:	e044      	b.n	800091e <__aeabi_dadd+0x472>
 8000894:	4662      	mov	r2, ip
 8000896:	433a      	orrs	r2, r7
 8000898:	0015      	movs	r5, r2
 800089a:	1e6f      	subs	r7, r5, #1
 800089c:	41bd      	sbcs	r5, r7
 800089e:	444d      	add	r5, r9
 80008a0:	454d      	cmp	r5, r9
 80008a2:	4189      	sbcs	r1, r1
 80008a4:	4249      	negs	r1, r1
 80008a6:	4688      	mov	r8, r1
 80008a8:	4498      	add	r8, r3
 80008aa:	4643      	mov	r3, r8
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	d400      	bmi.n	80008b2 <__aeabi_dadd+0x406>
 80008b0:	e718      	b.n	80006e4 <__aeabi_dadd+0x238>
 80008b2:	4bb1      	ldr	r3, [pc, #708]	; (8000b78 <__aeabi_dadd+0x6cc>)
 80008b4:	3601      	adds	r6, #1
 80008b6:	429e      	cmp	r6, r3
 80008b8:	d049      	beq.n	800094e <__aeabi_dadd+0x4a2>
 80008ba:	4642      	mov	r2, r8
 80008bc:	4baf      	ldr	r3, [pc, #700]	; (8000b7c <__aeabi_dadd+0x6d0>)
 80008be:	2101      	movs	r1, #1
 80008c0:	401a      	ands	r2, r3
 80008c2:	0013      	movs	r3, r2
 80008c4:	086a      	lsrs	r2, r5, #1
 80008c6:	400d      	ands	r5, r1
 80008c8:	4315      	orrs	r5, r2
 80008ca:	07d9      	lsls	r1, r3, #31
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	4698      	mov	r8, r3
 80008d0:	430d      	orrs	r5, r1
 80008d2:	e665      	b.n	80005a0 <__aeabi_dadd+0xf4>
 80008d4:	0018      	movs	r0, r3
 80008d6:	3e1f      	subs	r6, #31
 80008d8:	40f0      	lsrs	r0, r6
 80008da:	2a20      	cmp	r2, #32
 80008dc:	d003      	beq.n	80008e6 <__aeabi_dadd+0x43a>
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	1a8a      	subs	r2, r1, r2
 80008e2:	4093      	lsls	r3, r2
 80008e4:	431d      	orrs	r5, r3
 80008e6:	1e69      	subs	r1, r5, #1
 80008e8:	418d      	sbcs	r5, r1
 80008ea:	2300      	movs	r3, #0
 80008ec:	2600      	movs	r6, #0
 80008ee:	4698      	mov	r8, r3
 80008f0:	4305      	orrs	r5, r0
 80008f2:	e6f7      	b.n	80006e4 <__aeabi_dadd+0x238>
 80008f4:	0011      	movs	r1, r2
 80008f6:	4665      	mov	r5, ip
 80008f8:	3920      	subs	r1, #32
 80008fa:	40cd      	lsrs	r5, r1
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d004      	beq.n	800090a <__aeabi_dadd+0x45e>
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	4661      	mov	r1, ip
 8000904:	1a82      	subs	r2, r0, r2
 8000906:	4091      	lsls	r1, r2
 8000908:	430f      	orrs	r7, r1
 800090a:	0039      	movs	r1, r7
 800090c:	1e4f      	subs	r7, r1, #1
 800090e:	41b9      	sbcs	r1, r7
 8000910:	4329      	orrs	r1, r5
 8000912:	e60f      	b.n	8000534 <__aeabi_dadd+0x88>
 8000914:	464a      	mov	r2, r9
 8000916:	4313      	orrs	r3, r2
 8000918:	001d      	movs	r5, r3
 800091a:	1e6b      	subs	r3, r5, #1
 800091c:	419d      	sbcs	r5, r3
 800091e:	1b7d      	subs	r5, r7, r5
 8000920:	42af      	cmp	r7, r5
 8000922:	419b      	sbcs	r3, r3
 8000924:	4662      	mov	r2, ip
 8000926:	425b      	negs	r3, r3
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	4698      	mov	r8, r3
 800092c:	4654      	mov	r4, sl
 800092e:	000e      	movs	r6, r1
 8000930:	e607      	b.n	8000542 <__aeabi_dadd+0x96>
 8000932:	4648      	mov	r0, r9
 8000934:	4318      	orrs	r0, r3
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x48e>
 8000938:	e0b3      	b.n	8000aa2 <__aeabi_dadd+0x5f6>
 800093a:	1e50      	subs	r0, r2, #1
 800093c:	2a01      	cmp	r2, #1
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x496>
 8000940:	e10d      	b.n	8000b5e <__aeabi_dadd+0x6b2>
 8000942:	4d8d      	ldr	r5, [pc, #564]	; (8000b78 <__aeabi_dadd+0x6cc>)
 8000944:	42aa      	cmp	r2, r5
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x49e>
 8000948:	e0a5      	b.n	8000a96 <__aeabi_dadd+0x5ea>
 800094a:	0002      	movs	r2, r0
 800094c:	e710      	b.n	8000770 <__aeabi_dadd+0x2c4>
 800094e:	0032      	movs	r2, r6
 8000950:	2300      	movs	r3, #0
 8000952:	2100      	movs	r1, #0
 8000954:	e644      	b.n	80005e0 <__aeabi_dadd+0x134>
 8000956:	2120      	movs	r1, #32
 8000958:	0038      	movs	r0, r7
 800095a:	1a89      	subs	r1, r1, r2
 800095c:	4665      	mov	r5, ip
 800095e:	408f      	lsls	r7, r1
 8000960:	408d      	lsls	r5, r1
 8000962:	40d0      	lsrs	r0, r2
 8000964:	1e79      	subs	r1, r7, #1
 8000966:	418f      	sbcs	r7, r1
 8000968:	4305      	orrs	r5, r0
 800096a:	433d      	orrs	r5, r7
 800096c:	4667      	mov	r7, ip
 800096e:	40d7      	lsrs	r7, r2
 8000970:	19db      	adds	r3, r3, r7
 8000972:	e794      	b.n	800089e <__aeabi_dadd+0x3f2>
 8000974:	4a80      	ldr	r2, [pc, #512]	; (8000b78 <__aeabi_dadd+0x6cc>)
 8000976:	4290      	cmp	r0, r2
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x4d0>
 800097a:	e0ec      	b.n	8000b56 <__aeabi_dadd+0x6aa>
 800097c:	0039      	movs	r1, r7
 800097e:	4449      	add	r1, r9
 8000980:	4549      	cmp	r1, r9
 8000982:	4192      	sbcs	r2, r2
 8000984:	4463      	add	r3, ip
 8000986:	4252      	negs	r2, r2
 8000988:	189b      	adds	r3, r3, r2
 800098a:	07dd      	lsls	r5, r3, #31
 800098c:	0849      	lsrs	r1, r1, #1
 800098e:	085b      	lsrs	r3, r3, #1
 8000990:	4698      	mov	r8, r3
 8000992:	0006      	movs	r6, r0
 8000994:	430d      	orrs	r5, r1
 8000996:	e6a5      	b.n	80006e4 <__aeabi_dadd+0x238>
 8000998:	464a      	mov	r2, r9
 800099a:	1abd      	subs	r5, r7, r2
 800099c:	42af      	cmp	r7, r5
 800099e:	4189      	sbcs	r1, r1
 80009a0:	4662      	mov	r2, ip
 80009a2:	4249      	negs	r1, r1
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	1a5b      	subs	r3, r3, r1
 80009a8:	4698      	mov	r8, r3
 80009aa:	4654      	mov	r4, sl
 80009ac:	e5d1      	b.n	8000552 <__aeabi_dadd+0xa6>
 80009ae:	076c      	lsls	r4, r5, #29
 80009b0:	08f9      	lsrs	r1, r7, #3
 80009b2:	4321      	orrs	r1, r4
 80009b4:	08eb      	lsrs	r3, r5, #3
 80009b6:	0004      	movs	r4, r0
 80009b8:	e69d      	b.n	80006f6 <__aeabi_dadd+0x24a>
 80009ba:	464a      	mov	r2, r9
 80009bc:	431a      	orrs	r2, r3
 80009be:	d175      	bne.n	8000aac <__aeabi_dadd+0x600>
 80009c0:	4661      	mov	r1, ip
 80009c2:	4339      	orrs	r1, r7
 80009c4:	d114      	bne.n	80009f0 <__aeabi_dadd+0x544>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	2400      	movs	r4, #0
 80009ca:	031b      	lsls	r3, r3, #12
 80009cc:	e6bc      	b.n	8000748 <__aeabi_dadd+0x29c>
 80009ce:	464a      	mov	r2, r9
 80009d0:	1bd5      	subs	r5, r2, r7
 80009d2:	45a9      	cmp	r9, r5
 80009d4:	4189      	sbcs	r1, r1
 80009d6:	4662      	mov	r2, ip
 80009d8:	4249      	negs	r1, r1
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	1a5b      	subs	r3, r3, r1
 80009de:	4698      	mov	r8, r3
 80009e0:	2601      	movs	r6, #1
 80009e2:	e5ae      	b.n	8000542 <__aeabi_dadd+0x96>
 80009e4:	464a      	mov	r2, r9
 80009e6:	08d1      	lsrs	r1, r2, #3
 80009e8:	075a      	lsls	r2, r3, #29
 80009ea:	4311      	orrs	r1, r2
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	e6a7      	b.n	8000740 <__aeabi_dadd+0x294>
 80009f0:	4663      	mov	r3, ip
 80009f2:	08f9      	lsrs	r1, r7, #3
 80009f4:	075a      	lsls	r2, r3, #29
 80009f6:	4654      	mov	r4, sl
 80009f8:	4311      	orrs	r1, r2
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	e6a0      	b.n	8000740 <__aeabi_dadd+0x294>
 80009fe:	464a      	mov	r2, r9
 8000a00:	4313      	orrs	r3, r2
 8000a02:	001d      	movs	r5, r3
 8000a04:	1e6b      	subs	r3, r5, #1
 8000a06:	419d      	sbcs	r5, r3
 8000a08:	e6c7      	b.n	800079a <__aeabi_dadd+0x2ee>
 8000a0a:	0014      	movs	r4, r2
 8000a0c:	001e      	movs	r6, r3
 8000a0e:	3c20      	subs	r4, #32
 8000a10:	40e6      	lsrs	r6, r4
 8000a12:	2a20      	cmp	r2, #32
 8000a14:	d005      	beq.n	8000a22 <__aeabi_dadd+0x576>
 8000a16:	2440      	movs	r4, #64	; 0x40
 8000a18:	1aa2      	subs	r2, r4, r2
 8000a1a:	4093      	lsls	r3, r2
 8000a1c:	464a      	mov	r2, r9
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	4691      	mov	r9, r2
 8000a22:	464d      	mov	r5, r9
 8000a24:	1e6b      	subs	r3, r5, #1
 8000a26:	419d      	sbcs	r5, r3
 8000a28:	4335      	orrs	r5, r6
 8000a2a:	e778      	b.n	800091e <__aeabi_dadd+0x472>
 8000a2c:	464a      	mov	r2, r9
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x588>
 8000a32:	e66b      	b.n	800070c <__aeabi_dadd+0x260>
 8000a34:	076b      	lsls	r3, r5, #29
 8000a36:	08f9      	lsrs	r1, r7, #3
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	08eb      	lsrs	r3, r5, #3
 8000a3c:	e680      	b.n	8000740 <__aeabi_dadd+0x294>
 8000a3e:	4661      	mov	r1, ip
 8000a40:	4339      	orrs	r1, r7
 8000a42:	d054      	beq.n	8000aee <__aeabi_dadd+0x642>
 8000a44:	4663      	mov	r3, ip
 8000a46:	08f9      	lsrs	r1, r7, #3
 8000a48:	075c      	lsls	r4, r3, #29
 8000a4a:	4321      	orrs	r1, r4
 8000a4c:	08db      	lsrs	r3, r3, #3
 8000a4e:	0004      	movs	r4, r0
 8000a50:	e654      	b.n	80006fc <__aeabi_dadd+0x250>
 8000a52:	464a      	mov	r2, r9
 8000a54:	1abd      	subs	r5, r7, r2
 8000a56:	42af      	cmp	r7, r5
 8000a58:	4189      	sbcs	r1, r1
 8000a5a:	4662      	mov	r2, ip
 8000a5c:	4249      	negs	r1, r1
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	4698      	mov	r8, r3
 8000a64:	0004      	movs	r4, r0
 8000a66:	2601      	movs	r6, #1
 8000a68:	e56b      	b.n	8000542 <__aeabi_dadd+0x96>
 8000a6a:	464a      	mov	r2, r9
 8000a6c:	1bd5      	subs	r5, r2, r7
 8000a6e:	45a9      	cmp	r9, r5
 8000a70:	4189      	sbcs	r1, r1
 8000a72:	4662      	mov	r2, ip
 8000a74:	4249      	negs	r1, r1
 8000a76:	1a9a      	subs	r2, r3, r2
 8000a78:	1a52      	subs	r2, r2, r1
 8000a7a:	4690      	mov	r8, r2
 8000a7c:	0212      	lsls	r2, r2, #8
 8000a7e:	d532      	bpl.n	8000ae6 <__aeabi_dadd+0x63a>
 8000a80:	464a      	mov	r2, r9
 8000a82:	1abd      	subs	r5, r7, r2
 8000a84:	42af      	cmp	r7, r5
 8000a86:	4189      	sbcs	r1, r1
 8000a88:	4662      	mov	r2, ip
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	1a5b      	subs	r3, r3, r1
 8000a90:	4698      	mov	r8, r3
 8000a92:	0004      	movs	r4, r0
 8000a94:	e584      	b.n	80005a0 <__aeabi_dadd+0xf4>
 8000a96:	4663      	mov	r3, ip
 8000a98:	08f9      	lsrs	r1, r7, #3
 8000a9a:	075a      	lsls	r2, r3, #29
 8000a9c:	4311      	orrs	r1, r2
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	e64e      	b.n	8000740 <__aeabi_dadd+0x294>
 8000aa2:	08f9      	lsrs	r1, r7, #3
 8000aa4:	0768      	lsls	r0, r5, #29
 8000aa6:	4301      	orrs	r1, r0
 8000aa8:	08eb      	lsrs	r3, r5, #3
 8000aaa:	e624      	b.n	80006f6 <__aeabi_dadd+0x24a>
 8000aac:	4662      	mov	r2, ip
 8000aae:	433a      	orrs	r2, r7
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x608>
 8000ab2:	e698      	b.n	80007e6 <__aeabi_dadd+0x33a>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	08d1      	lsrs	r1, r2, #3
 8000ab8:	075a      	lsls	r2, r3, #29
 8000aba:	4311      	orrs	r1, r2
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	2380      	movs	r3, #128	; 0x80
 8000ac0:	031b      	lsls	r3, r3, #12
 8000ac2:	421a      	tst	r2, r3
 8000ac4:	d008      	beq.n	8000ad8 <__aeabi_dadd+0x62c>
 8000ac6:	4660      	mov	r0, ip
 8000ac8:	08c5      	lsrs	r5, r0, #3
 8000aca:	421d      	tst	r5, r3
 8000acc:	d104      	bne.n	8000ad8 <__aeabi_dadd+0x62c>
 8000ace:	4654      	mov	r4, sl
 8000ad0:	002a      	movs	r2, r5
 8000ad2:	08f9      	lsrs	r1, r7, #3
 8000ad4:	0743      	lsls	r3, r0, #29
 8000ad6:	4319      	orrs	r1, r3
 8000ad8:	0f4b      	lsrs	r3, r1, #29
 8000ada:	00c9      	lsls	r1, r1, #3
 8000adc:	075b      	lsls	r3, r3, #29
 8000ade:	08c9      	lsrs	r1, r1, #3
 8000ae0:	4319      	orrs	r1, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	e62c      	b.n	8000740 <__aeabi_dadd+0x294>
 8000ae6:	4641      	mov	r1, r8
 8000ae8:	4329      	orrs	r1, r5
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x642>
 8000aec:	e5fa      	b.n	80006e4 <__aeabi_dadd+0x238>
 8000aee:	2300      	movs	r3, #0
 8000af0:	000a      	movs	r2, r1
 8000af2:	2400      	movs	r4, #0
 8000af4:	e602      	b.n	80006fc <__aeabi_dadd+0x250>
 8000af6:	076b      	lsls	r3, r5, #29
 8000af8:	08f9      	lsrs	r1, r7, #3
 8000afa:	4319      	orrs	r1, r3
 8000afc:	08eb      	lsrs	r3, r5, #3
 8000afe:	e5fd      	b.n	80006fc <__aeabi_dadd+0x250>
 8000b00:	4663      	mov	r3, ip
 8000b02:	08f9      	lsrs	r1, r7, #3
 8000b04:	075b      	lsls	r3, r3, #29
 8000b06:	4319      	orrs	r1, r3
 8000b08:	4663      	mov	r3, ip
 8000b0a:	0004      	movs	r4, r0
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	e617      	b.n	8000740 <__aeabi_dadd+0x294>
 8000b10:	003d      	movs	r5, r7
 8000b12:	444d      	add	r5, r9
 8000b14:	4463      	add	r3, ip
 8000b16:	454d      	cmp	r5, r9
 8000b18:	4189      	sbcs	r1, r1
 8000b1a:	4698      	mov	r8, r3
 8000b1c:	4249      	negs	r1, r1
 8000b1e:	4488      	add	r8, r1
 8000b20:	4643      	mov	r3, r8
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_dadd+0x67c>
 8000b26:	e5dd      	b.n	80006e4 <__aeabi_dadd+0x238>
 8000b28:	4642      	mov	r2, r8
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <__aeabi_dadd+0x6d0>)
 8000b2c:	2601      	movs	r6, #1
 8000b2e:	401a      	ands	r2, r3
 8000b30:	4690      	mov	r8, r2
 8000b32:	e5d7      	b.n	80006e4 <__aeabi_dadd+0x238>
 8000b34:	0010      	movs	r0, r2
 8000b36:	001e      	movs	r6, r3
 8000b38:	3820      	subs	r0, #32
 8000b3a:	40c6      	lsrs	r6, r0
 8000b3c:	2a20      	cmp	r2, #32
 8000b3e:	d005      	beq.n	8000b4c <__aeabi_dadd+0x6a0>
 8000b40:	2040      	movs	r0, #64	; 0x40
 8000b42:	1a82      	subs	r2, r0, r2
 8000b44:	4093      	lsls	r3, r2
 8000b46:	464a      	mov	r2, r9
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	4691      	mov	r9, r2
 8000b4c:	464d      	mov	r5, r9
 8000b4e:	1e6b      	subs	r3, r5, #1
 8000b50:	419d      	sbcs	r5, r3
 8000b52:	4335      	orrs	r5, r6
 8000b54:	e621      	b.n	800079a <__aeabi_dadd+0x2ee>
 8000b56:	0002      	movs	r2, r0
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	e540      	b.n	80005e0 <__aeabi_dadd+0x134>
 8000b5e:	464a      	mov	r2, r9
 8000b60:	19d5      	adds	r5, r2, r7
 8000b62:	42bd      	cmp	r5, r7
 8000b64:	4189      	sbcs	r1, r1
 8000b66:	4463      	add	r3, ip
 8000b68:	4698      	mov	r8, r3
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	4488      	add	r8, r1
 8000b6e:	e5b3      	b.n	80006d8 <__aeabi_dadd+0x22c>
 8000b70:	2100      	movs	r1, #0
 8000b72:	4a01      	ldr	r2, [pc, #4]	; (8000b78 <__aeabi_dadd+0x6cc>)
 8000b74:	000b      	movs	r3, r1
 8000b76:	e533      	b.n	80005e0 <__aeabi_dadd+0x134>
 8000b78:	000007ff 	.word	0x000007ff
 8000b7c:	ff7fffff 	.word	0xff7fffff

08000b80 <__aeabi_ddiv>:
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	4657      	mov	r7, sl
 8000b84:	464e      	mov	r6, r9
 8000b86:	4645      	mov	r5, r8
 8000b88:	46de      	mov	lr, fp
 8000b8a:	b5e0      	push	{r5, r6, r7, lr}
 8000b8c:	4681      	mov	r9, r0
 8000b8e:	0005      	movs	r5, r0
 8000b90:	030c      	lsls	r4, r1, #12
 8000b92:	0048      	lsls	r0, r1, #1
 8000b94:	4692      	mov	sl, r2
 8000b96:	001f      	movs	r7, r3
 8000b98:	b085      	sub	sp, #20
 8000b9a:	0b24      	lsrs	r4, r4, #12
 8000b9c:	0d40      	lsrs	r0, r0, #21
 8000b9e:	0fce      	lsrs	r6, r1, #31
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d059      	beq.n	8000c58 <__aeabi_ddiv+0xd8>
 8000ba4:	4b87      	ldr	r3, [pc, #540]	; (8000dc4 <__aeabi_ddiv+0x244>)
 8000ba6:	4298      	cmp	r0, r3
 8000ba8:	d100      	bne.n	8000bac <__aeabi_ddiv+0x2c>
 8000baa:	e098      	b.n	8000cde <__aeabi_ddiv+0x15e>
 8000bac:	0f6b      	lsrs	r3, r5, #29
 8000bae:	00e4      	lsls	r4, r4, #3
 8000bb0:	431c      	orrs	r4, r3
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	4323      	orrs	r3, r4
 8000bb8:	4698      	mov	r8, r3
 8000bba:	4b83      	ldr	r3, [pc, #524]	; (8000dc8 <__aeabi_ddiv+0x248>)
 8000bbc:	00ed      	lsls	r5, r5, #3
 8000bbe:	469b      	mov	fp, r3
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4483      	add	fp, r0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	033c      	lsls	r4, r7, #12
 8000bca:	007b      	lsls	r3, r7, #1
 8000bcc:	4650      	mov	r0, sl
 8000bce:	0b24      	lsrs	r4, r4, #12
 8000bd0:	0d5b      	lsrs	r3, r3, #21
 8000bd2:	0fff      	lsrs	r7, r7, #31
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d067      	beq.n	8000ca8 <__aeabi_ddiv+0x128>
 8000bd8:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x244>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d018      	beq.n	8000c10 <__aeabi_ddiv+0x90>
 8000bde:	497a      	ldr	r1, [pc, #488]	; (8000dc8 <__aeabi_ddiv+0x248>)
 8000be0:	0f42      	lsrs	r2, r0, #29
 8000be2:	468c      	mov	ip, r1
 8000be4:	00e4      	lsls	r4, r4, #3
 8000be6:	4659      	mov	r1, fp
 8000be8:	4314      	orrs	r4, r2
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	4463      	add	r3, ip
 8000bee:	0412      	lsls	r2, r2, #16
 8000bf0:	1acb      	subs	r3, r1, r3
 8000bf2:	4314      	orrs	r4, r2
 8000bf4:	469b      	mov	fp, r3
 8000bf6:	00c2      	lsls	r2, r0, #3
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	0033      	movs	r3, r6
 8000bfc:	407b      	eors	r3, r7
 8000bfe:	469a      	mov	sl, r3
 8000c00:	464b      	mov	r3, r9
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d900      	bls.n	8000c08 <__aeabi_ddiv+0x88>
 8000c06:	e0ef      	b.n	8000de8 <__aeabi_ddiv+0x268>
 8000c08:	4970      	ldr	r1, [pc, #448]	; (8000dcc <__aeabi_ddiv+0x24c>)
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	58cb      	ldr	r3, [r1, r3]
 8000c0e:	469f      	mov	pc, r3
 8000c10:	4b6f      	ldr	r3, [pc, #444]	; (8000dd0 <__aeabi_ddiv+0x250>)
 8000c12:	4652      	mov	r2, sl
 8000c14:	469c      	mov	ip, r3
 8000c16:	4322      	orrs	r2, r4
 8000c18:	44e3      	add	fp, ip
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d000      	beq.n	8000c20 <__aeabi_ddiv+0xa0>
 8000c1e:	e095      	b.n	8000d4c <__aeabi_ddiv+0x1cc>
 8000c20:	4649      	mov	r1, r9
 8000c22:	2302      	movs	r3, #2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	4689      	mov	r9, r1
 8000c28:	2400      	movs	r4, #0
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	e7e5      	b.n	8000bfa <__aeabi_ddiv+0x7a>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	2400      	movs	r4, #0
 8000c32:	2500      	movs	r5, #0
 8000c34:	4652      	mov	r2, sl
 8000c36:	051b      	lsls	r3, r3, #20
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	07d2      	lsls	r2, r2, #31
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	0028      	movs	r0, r5
 8000c40:	0019      	movs	r1, r3
 8000c42:	b005      	add	sp, #20
 8000c44:	bcf0      	pop	{r4, r5, r6, r7}
 8000c46:	46bb      	mov	fp, r7
 8000c48:	46b2      	mov	sl, r6
 8000c4a:	46a9      	mov	r9, r5
 8000c4c:	46a0      	mov	r8, r4
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	2400      	movs	r4, #0
 8000c52:	2500      	movs	r5, #0
 8000c54:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <__aeabi_ddiv+0x244>)
 8000c56:	e7ed      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8000c58:	464b      	mov	r3, r9
 8000c5a:	4323      	orrs	r3, r4
 8000c5c:	4698      	mov	r8, r3
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_ddiv+0xe2>
 8000c60:	e089      	b.n	8000d76 <__aeabi_ddiv+0x1f6>
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_ddiv+0xe8>
 8000c66:	e1e0      	b.n	800102a <__aeabi_ddiv+0x4aa>
 8000c68:	0020      	movs	r0, r4
 8000c6a:	f001 fac3 	bl	80021f4 <__clzsi2>
 8000c6e:	0001      	movs	r1, r0
 8000c70:	0002      	movs	r2, r0
 8000c72:	390b      	subs	r1, #11
 8000c74:	231d      	movs	r3, #29
 8000c76:	1a5b      	subs	r3, r3, r1
 8000c78:	4649      	mov	r1, r9
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	40d9      	lsrs	r1, r3
 8000c7e:	3808      	subs	r0, #8
 8000c80:	4084      	lsls	r4, r0
 8000c82:	000b      	movs	r3, r1
 8000c84:	464d      	mov	r5, r9
 8000c86:	4323      	orrs	r3, r4
 8000c88:	4698      	mov	r8, r3
 8000c8a:	4085      	lsls	r5, r0
 8000c8c:	4851      	ldr	r0, [pc, #324]	; (8000dd4 <__aeabi_ddiv+0x254>)
 8000c8e:	033c      	lsls	r4, r7, #12
 8000c90:	1a83      	subs	r3, r0, r2
 8000c92:	469b      	mov	fp, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	4699      	mov	r9, r3
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	007b      	lsls	r3, r7, #1
 8000c9c:	4650      	mov	r0, sl
 8000c9e:	0b24      	lsrs	r4, r4, #12
 8000ca0:	0d5b      	lsrs	r3, r3, #21
 8000ca2:	0fff      	lsrs	r7, r7, #31
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d197      	bne.n	8000bd8 <__aeabi_ddiv+0x58>
 8000ca8:	4652      	mov	r2, sl
 8000caa:	4322      	orrs	r2, r4
 8000cac:	d055      	beq.n	8000d5a <__aeabi_ddiv+0x1da>
 8000cae:	2c00      	cmp	r4, #0
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x134>
 8000cb2:	e1ca      	b.n	800104a <__aeabi_ddiv+0x4ca>
 8000cb4:	0020      	movs	r0, r4
 8000cb6:	f001 fa9d 	bl	80021f4 <__clzsi2>
 8000cba:	0002      	movs	r2, r0
 8000cbc:	3a0b      	subs	r2, #11
 8000cbe:	231d      	movs	r3, #29
 8000cc0:	0001      	movs	r1, r0
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	4652      	mov	r2, sl
 8000cc6:	3908      	subs	r1, #8
 8000cc8:	40da      	lsrs	r2, r3
 8000cca:	408c      	lsls	r4, r1
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	4652      	mov	r2, sl
 8000cd0:	408a      	lsls	r2, r1
 8000cd2:	4b41      	ldr	r3, [pc, #260]	; (8000dd8 <__aeabi_ddiv+0x258>)
 8000cd4:	4458      	add	r0, fp
 8000cd6:	469b      	mov	fp, r3
 8000cd8:	4483      	add	fp, r0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e78d      	b.n	8000bfa <__aeabi_ddiv+0x7a>
 8000cde:	464b      	mov	r3, r9
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	d140      	bne.n	8000d68 <__aeabi_ddiv+0x1e8>
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	4699      	mov	r9, r3
 8000cea:	3b06      	subs	r3, #6
 8000cec:	2500      	movs	r5, #0
 8000cee:	4683      	mov	fp, r0
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	e769      	b.n	8000bc8 <__aeabi_ddiv+0x48>
 8000cf4:	46b2      	mov	sl, r6
 8000cf6:	9b00      	ldr	r3, [sp, #0]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d0a9      	beq.n	8000c50 <__aeabi_ddiv+0xd0>
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_ddiv+0x182>
 8000d00:	e211      	b.n	8001126 <__aeabi_ddiv+0x5a6>
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d093      	beq.n	8000c2e <__aeabi_ddiv+0xae>
 8000d06:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <__aeabi_ddiv+0x25c>)
 8000d08:	445a      	add	r2, fp
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	dc00      	bgt.n	8000d10 <__aeabi_ddiv+0x190>
 8000d0e:	e13c      	b.n	8000f8a <__aeabi_ddiv+0x40a>
 8000d10:	076b      	lsls	r3, r5, #29
 8000d12:	d000      	beq.n	8000d16 <__aeabi_ddiv+0x196>
 8000d14:	e1a7      	b.n	8001066 <__aeabi_ddiv+0x4e6>
 8000d16:	08ed      	lsrs	r5, r5, #3
 8000d18:	4643      	mov	r3, r8
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	d506      	bpl.n	8000d2c <__aeabi_ddiv+0x1ac>
 8000d1e:	4642      	mov	r2, r8
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <__aeabi_ddiv+0x260>)
 8000d22:	401a      	ands	r2, r3
 8000d24:	4690      	mov	r8, r2
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	00d2      	lsls	r2, r2, #3
 8000d2a:	445a      	add	r2, fp
 8000d2c:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <__aeabi_ddiv+0x264>)
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dc8e      	bgt.n	8000c50 <__aeabi_ddiv+0xd0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	0552      	lsls	r2, r2, #21
 8000d36:	0758      	lsls	r0, r3, #29
 8000d38:	025c      	lsls	r4, r3, #9
 8000d3a:	4305      	orrs	r5, r0
 8000d3c:	0b24      	lsrs	r4, r4, #12
 8000d3e:	0d53      	lsrs	r3, r2, #21
 8000d40:	e778      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8000d42:	46ba      	mov	sl, r7
 8000d44:	46a0      	mov	r8, r4
 8000d46:	0015      	movs	r5, r2
 8000d48:	9000      	str	r0, [sp, #0]
 8000d4a:	e7d4      	b.n	8000cf6 <__aeabi_ddiv+0x176>
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	2303      	movs	r3, #3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	4691      	mov	r9, r2
 8000d54:	2003      	movs	r0, #3
 8000d56:	4652      	mov	r2, sl
 8000d58:	e74f      	b.n	8000bfa <__aeabi_ddiv+0x7a>
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	4319      	orrs	r1, r3
 8000d60:	4689      	mov	r9, r1
 8000d62:	2400      	movs	r4, #0
 8000d64:	2001      	movs	r0, #1
 8000d66:	e748      	b.n	8000bfa <__aeabi_ddiv+0x7a>
 8000d68:	230c      	movs	r3, #12
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	3b09      	subs	r3, #9
 8000d6e:	46a0      	mov	r8, r4
 8000d70:	4683      	mov	fp, r0
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	e728      	b.n	8000bc8 <__aeabi_ddiv+0x48>
 8000d76:	2304      	movs	r3, #4
 8000d78:	4699      	mov	r9, r3
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	469b      	mov	fp, r3
 8000d7e:	3301      	adds	r3, #1
 8000d80:	2500      	movs	r5, #0
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	e720      	b.n	8000bc8 <__aeabi_ddiv+0x48>
 8000d86:	2300      	movs	r3, #0
 8000d88:	2480      	movs	r4, #128	; 0x80
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <__aeabi_ddiv+0x244>)
 8000d90:	0324      	lsls	r4, r4, #12
 8000d92:	e74f      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	4641      	mov	r1, r8
 8000d98:	031b      	lsls	r3, r3, #12
 8000d9a:	4219      	tst	r1, r3
 8000d9c:	d008      	beq.n	8000db0 <__aeabi_ddiv+0x230>
 8000d9e:	421c      	tst	r4, r3
 8000da0:	d106      	bne.n	8000db0 <__aeabi_ddiv+0x230>
 8000da2:	431c      	orrs	r4, r3
 8000da4:	0324      	lsls	r4, r4, #12
 8000da6:	46ba      	mov	sl, r7
 8000da8:	0015      	movs	r5, r2
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <__aeabi_ddiv+0x244>)
 8000dac:	0b24      	lsrs	r4, r4, #12
 8000dae:	e741      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8000db0:	2480      	movs	r4, #128	; 0x80
 8000db2:	4643      	mov	r3, r8
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	431c      	orrs	r4, r3
 8000db8:	0324      	lsls	r4, r4, #12
 8000dba:	46b2      	mov	sl, r6
 8000dbc:	4b01      	ldr	r3, [pc, #4]	; (8000dc4 <__aeabi_ddiv+0x244>)
 8000dbe:	0b24      	lsrs	r4, r4, #12
 8000dc0:	e738      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	000007ff 	.word	0x000007ff
 8000dc8:	fffffc01 	.word	0xfffffc01
 8000dcc:	08006448 	.word	0x08006448
 8000dd0:	fffff801 	.word	0xfffff801
 8000dd4:	fffffc0d 	.word	0xfffffc0d
 8000dd8:	000003f3 	.word	0x000003f3
 8000ddc:	000003ff 	.word	0x000003ff
 8000de0:	feffffff 	.word	0xfeffffff
 8000de4:	000007fe 	.word	0x000007fe
 8000de8:	4544      	cmp	r4, r8
 8000dea:	d200      	bcs.n	8000dee <__aeabi_ddiv+0x26e>
 8000dec:	e116      	b.n	800101c <__aeabi_ddiv+0x49c>
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x272>
 8000df0:	e111      	b.n	8001016 <__aeabi_ddiv+0x496>
 8000df2:	2301      	movs	r3, #1
 8000df4:	425b      	negs	r3, r3
 8000df6:	469c      	mov	ip, r3
 8000df8:	002e      	movs	r6, r5
 8000dfa:	4640      	mov	r0, r8
 8000dfc:	2500      	movs	r5, #0
 8000dfe:	44e3      	add	fp, ip
 8000e00:	0223      	lsls	r3, r4, #8
 8000e02:	0e14      	lsrs	r4, r2, #24
 8000e04:	431c      	orrs	r4, r3
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	4699      	mov	r9, r3
 8000e0a:	0423      	lsls	r3, r4, #16
 8000e0c:	0c1f      	lsrs	r7, r3, #16
 8000e0e:	0212      	lsls	r2, r2, #8
 8000e10:	4649      	mov	r1, r9
 8000e12:	9200      	str	r2, [sp, #0]
 8000e14:	9701      	str	r7, [sp, #4]
 8000e16:	f7ff f9fd 	bl	8000214 <__aeabi_uidivmod>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	437a      	muls	r2, r7
 8000e1e:	040b      	lsls	r3, r1, #16
 8000e20:	0c31      	lsrs	r1, r6, #16
 8000e22:	4680      	mov	r8, r0
 8000e24:	4319      	orrs	r1, r3
 8000e26:	428a      	cmp	r2, r1
 8000e28:	d90b      	bls.n	8000e42 <__aeabi_ddiv+0x2c2>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	469c      	mov	ip, r3
 8000e30:	1909      	adds	r1, r1, r4
 8000e32:	44e0      	add	r8, ip
 8000e34:	428c      	cmp	r4, r1
 8000e36:	d804      	bhi.n	8000e42 <__aeabi_ddiv+0x2c2>
 8000e38:	428a      	cmp	r2, r1
 8000e3a:	d902      	bls.n	8000e42 <__aeabi_ddiv+0x2c2>
 8000e3c:	1e83      	subs	r3, r0, #2
 8000e3e:	4698      	mov	r8, r3
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	1a88      	subs	r0, r1, r2
 8000e44:	4649      	mov	r1, r9
 8000e46:	f7ff f9e5 	bl	8000214 <__aeabi_uidivmod>
 8000e4a:	0409      	lsls	r1, r1, #16
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	0431      	lsls	r1, r6, #16
 8000e50:	4666      	mov	r6, ip
 8000e52:	9a01      	ldr	r2, [sp, #4]
 8000e54:	0c09      	lsrs	r1, r1, #16
 8000e56:	4342      	muls	r2, r0
 8000e58:	0003      	movs	r3, r0
 8000e5a:	4331      	orrs	r1, r6
 8000e5c:	428a      	cmp	r2, r1
 8000e5e:	d904      	bls.n	8000e6a <__aeabi_ddiv+0x2ea>
 8000e60:	1909      	adds	r1, r1, r4
 8000e62:	3b01      	subs	r3, #1
 8000e64:	428c      	cmp	r4, r1
 8000e66:	d800      	bhi.n	8000e6a <__aeabi_ddiv+0x2ea>
 8000e68:	e111      	b.n	800108e <__aeabi_ddiv+0x50e>
 8000e6a:	1a89      	subs	r1, r1, r2
 8000e6c:	4642      	mov	r2, r8
 8000e6e:	9e00      	ldr	r6, [sp, #0]
 8000e70:	0412      	lsls	r2, r2, #16
 8000e72:	431a      	orrs	r2, r3
 8000e74:	0c33      	lsrs	r3, r6, #16
 8000e76:	001f      	movs	r7, r3
 8000e78:	0c10      	lsrs	r0, r2, #16
 8000e7a:	4690      	mov	r8, r2
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	0413      	lsls	r3, r2, #16
 8000e80:	0432      	lsls	r2, r6, #16
 8000e82:	0c16      	lsrs	r6, r2, #16
 8000e84:	0032      	movs	r2, r6
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	435a      	muls	r2, r3
 8000e8a:	9603      	str	r6, [sp, #12]
 8000e8c:	437b      	muls	r3, r7
 8000e8e:	4346      	muls	r6, r0
 8000e90:	4378      	muls	r0, r7
 8000e92:	0c17      	lsrs	r7, r2, #16
 8000e94:	46bc      	mov	ip, r7
 8000e96:	199b      	adds	r3, r3, r6
 8000e98:	4463      	add	r3, ip
 8000e9a:	429e      	cmp	r6, r3
 8000e9c:	d903      	bls.n	8000ea6 <__aeabi_ddiv+0x326>
 8000e9e:	2680      	movs	r6, #128	; 0x80
 8000ea0:	0276      	lsls	r6, r6, #9
 8000ea2:	46b4      	mov	ip, r6
 8000ea4:	4460      	add	r0, ip
 8000ea6:	0c1e      	lsrs	r6, r3, #16
 8000ea8:	1830      	adds	r0, r6, r0
 8000eaa:	0416      	lsls	r6, r2, #16
 8000eac:	041b      	lsls	r3, r3, #16
 8000eae:	0c36      	lsrs	r6, r6, #16
 8000eb0:	199e      	adds	r6, r3, r6
 8000eb2:	4281      	cmp	r1, r0
 8000eb4:	d200      	bcs.n	8000eb8 <__aeabi_ddiv+0x338>
 8000eb6:	e09c      	b.n	8000ff2 <__aeabi_ddiv+0x472>
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x33c>
 8000eba:	e097      	b.n	8000fec <__aeabi_ddiv+0x46c>
 8000ebc:	1bae      	subs	r6, r5, r6
 8000ebe:	1a09      	subs	r1, r1, r0
 8000ec0:	42b5      	cmp	r5, r6
 8000ec2:	4180      	sbcs	r0, r0
 8000ec4:	4240      	negs	r0, r0
 8000ec6:	1a08      	subs	r0, r1, r0
 8000ec8:	4284      	cmp	r4, r0
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0x34e>
 8000ecc:	e111      	b.n	80010f2 <__aeabi_ddiv+0x572>
 8000ece:	4649      	mov	r1, r9
 8000ed0:	f7ff f9a0 	bl	8000214 <__aeabi_uidivmod>
 8000ed4:	9a01      	ldr	r2, [sp, #4]
 8000ed6:	040b      	lsls	r3, r1, #16
 8000ed8:	4342      	muls	r2, r0
 8000eda:	0c31      	lsrs	r1, r6, #16
 8000edc:	0005      	movs	r5, r0
 8000ede:	4319      	orrs	r1, r3
 8000ee0:	428a      	cmp	r2, r1
 8000ee2:	d907      	bls.n	8000ef4 <__aeabi_ddiv+0x374>
 8000ee4:	1909      	adds	r1, r1, r4
 8000ee6:	3d01      	subs	r5, #1
 8000ee8:	428c      	cmp	r4, r1
 8000eea:	d803      	bhi.n	8000ef4 <__aeabi_ddiv+0x374>
 8000eec:	428a      	cmp	r2, r1
 8000eee:	d901      	bls.n	8000ef4 <__aeabi_ddiv+0x374>
 8000ef0:	1e85      	subs	r5, r0, #2
 8000ef2:	1909      	adds	r1, r1, r4
 8000ef4:	1a88      	subs	r0, r1, r2
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	f7ff f98c 	bl	8000214 <__aeabi_uidivmod>
 8000efc:	0409      	lsls	r1, r1, #16
 8000efe:	468c      	mov	ip, r1
 8000f00:	0431      	lsls	r1, r6, #16
 8000f02:	4666      	mov	r6, ip
 8000f04:	9a01      	ldr	r2, [sp, #4]
 8000f06:	0c09      	lsrs	r1, r1, #16
 8000f08:	4342      	muls	r2, r0
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	4331      	orrs	r1, r6
 8000f0e:	428a      	cmp	r2, r1
 8000f10:	d907      	bls.n	8000f22 <__aeabi_ddiv+0x3a2>
 8000f12:	1909      	adds	r1, r1, r4
 8000f14:	3b01      	subs	r3, #1
 8000f16:	428c      	cmp	r4, r1
 8000f18:	d803      	bhi.n	8000f22 <__aeabi_ddiv+0x3a2>
 8000f1a:	428a      	cmp	r2, r1
 8000f1c:	d901      	bls.n	8000f22 <__aeabi_ddiv+0x3a2>
 8000f1e:	1e83      	subs	r3, r0, #2
 8000f20:	1909      	adds	r1, r1, r4
 8000f22:	9e03      	ldr	r6, [sp, #12]
 8000f24:	1a89      	subs	r1, r1, r2
 8000f26:	0032      	movs	r2, r6
 8000f28:	042d      	lsls	r5, r5, #16
 8000f2a:	431d      	orrs	r5, r3
 8000f2c:	9f02      	ldr	r7, [sp, #8]
 8000f2e:	042b      	lsls	r3, r5, #16
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	435a      	muls	r2, r3
 8000f34:	437b      	muls	r3, r7
 8000f36:	469c      	mov	ip, r3
 8000f38:	0c28      	lsrs	r0, r5, #16
 8000f3a:	4346      	muls	r6, r0
 8000f3c:	0c13      	lsrs	r3, r2, #16
 8000f3e:	44b4      	add	ip, r6
 8000f40:	4463      	add	r3, ip
 8000f42:	4378      	muls	r0, r7
 8000f44:	429e      	cmp	r6, r3
 8000f46:	d903      	bls.n	8000f50 <__aeabi_ddiv+0x3d0>
 8000f48:	2680      	movs	r6, #128	; 0x80
 8000f4a:	0276      	lsls	r6, r6, #9
 8000f4c:	46b4      	mov	ip, r6
 8000f4e:	4460      	add	r0, ip
 8000f50:	0c1e      	lsrs	r6, r3, #16
 8000f52:	0412      	lsls	r2, r2, #16
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	0c12      	lsrs	r2, r2, #16
 8000f58:	1830      	adds	r0, r6, r0
 8000f5a:	189b      	adds	r3, r3, r2
 8000f5c:	4281      	cmp	r1, r0
 8000f5e:	d306      	bcc.n	8000f6e <__aeabi_ddiv+0x3ee>
 8000f60:	d002      	beq.n	8000f68 <__aeabi_ddiv+0x3e8>
 8000f62:	2301      	movs	r3, #1
 8000f64:	431d      	orrs	r5, r3
 8000f66:	e6ce      	b.n	8000d06 <__aeabi_ddiv+0x186>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0x3ee>
 8000f6c:	e6cb      	b.n	8000d06 <__aeabi_ddiv+0x186>
 8000f6e:	1861      	adds	r1, r4, r1
 8000f70:	1e6e      	subs	r6, r5, #1
 8000f72:	42a1      	cmp	r1, r4
 8000f74:	d200      	bcs.n	8000f78 <__aeabi_ddiv+0x3f8>
 8000f76:	e0a4      	b.n	80010c2 <__aeabi_ddiv+0x542>
 8000f78:	4281      	cmp	r1, r0
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x3fe>
 8000f7c:	e0c9      	b.n	8001112 <__aeabi_ddiv+0x592>
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x402>
 8000f80:	e0d9      	b.n	8001136 <__aeabi_ddiv+0x5b6>
 8000f82:	0035      	movs	r5, r6
 8000f84:	e7ed      	b.n	8000f62 <__aeabi_ddiv+0x3e2>
 8000f86:	2501      	movs	r5, #1
 8000f88:	426d      	negs	r5, r5
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	1a89      	subs	r1, r1, r2
 8000f8e:	2938      	cmp	r1, #56	; 0x38
 8000f90:	dd00      	ble.n	8000f94 <__aeabi_ddiv+0x414>
 8000f92:	e64c      	b.n	8000c2e <__aeabi_ddiv+0xae>
 8000f94:	291f      	cmp	r1, #31
 8000f96:	dc00      	bgt.n	8000f9a <__aeabi_ddiv+0x41a>
 8000f98:	e07f      	b.n	800109a <__aeabi_ddiv+0x51a>
 8000f9a:	231f      	movs	r3, #31
 8000f9c:	425b      	negs	r3, r3
 8000f9e:	1a9a      	subs	r2, r3, r2
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	40d3      	lsrs	r3, r2
 8000fa4:	2920      	cmp	r1, #32
 8000fa6:	d004      	beq.n	8000fb2 <__aeabi_ddiv+0x432>
 8000fa8:	4644      	mov	r4, r8
 8000faa:	4a65      	ldr	r2, [pc, #404]	; (8001140 <__aeabi_ddiv+0x5c0>)
 8000fac:	445a      	add	r2, fp
 8000fae:	4094      	lsls	r4, r2
 8000fb0:	4325      	orrs	r5, r4
 8000fb2:	1e6a      	subs	r2, r5, #1
 8000fb4:	4195      	sbcs	r5, r2
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	432b      	orrs	r3, r5
 8000fba:	0015      	movs	r5, r2
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	401d      	ands	r5, r3
 8000fc0:	421a      	tst	r2, r3
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0x446>
 8000fc4:	e0a1      	b.n	800110a <__aeabi_ddiv+0x58a>
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	2400      	movs	r4, #0
 8000fca:	401a      	ands	r2, r3
 8000fcc:	2a04      	cmp	r2, #4
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_ddiv+0x452>
 8000fd0:	e098      	b.n	8001104 <__aeabi_ddiv+0x584>
 8000fd2:	1d1a      	adds	r2, r3, #4
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	419b      	sbcs	r3, r3
 8000fd8:	425b      	negs	r3, r3
 8000fda:	18e4      	adds	r4, r4, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	0222      	lsls	r2, r4, #8
 8000fe0:	d400      	bmi.n	8000fe4 <__aeabi_ddiv+0x464>
 8000fe2:	e08f      	b.n	8001104 <__aeabi_ddiv+0x584>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	2500      	movs	r5, #0
 8000fea:	e623      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8000fec:	42b5      	cmp	r5, r6
 8000fee:	d300      	bcc.n	8000ff2 <__aeabi_ddiv+0x472>
 8000ff0:	e764      	b.n	8000ebc <__aeabi_ddiv+0x33c>
 8000ff2:	4643      	mov	r3, r8
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	9b00      	ldr	r3, [sp, #0]
 8000ff8:	469c      	mov	ip, r3
 8000ffa:	4465      	add	r5, ip
 8000ffc:	001f      	movs	r7, r3
 8000ffe:	429d      	cmp	r5, r3
 8001000:	419b      	sbcs	r3, r3
 8001002:	425b      	negs	r3, r3
 8001004:	191b      	adds	r3, r3, r4
 8001006:	18c9      	adds	r1, r1, r3
 8001008:	428c      	cmp	r4, r1
 800100a:	d23a      	bcs.n	8001082 <__aeabi_ddiv+0x502>
 800100c:	4288      	cmp	r0, r1
 800100e:	d863      	bhi.n	80010d8 <__aeabi_ddiv+0x558>
 8001010:	d060      	beq.n	80010d4 <__aeabi_ddiv+0x554>
 8001012:	4690      	mov	r8, r2
 8001014:	e752      	b.n	8000ebc <__aeabi_ddiv+0x33c>
 8001016:	42aa      	cmp	r2, r5
 8001018:	d900      	bls.n	800101c <__aeabi_ddiv+0x49c>
 800101a:	e6ea      	b.n	8000df2 <__aeabi_ddiv+0x272>
 800101c:	4643      	mov	r3, r8
 800101e:	07de      	lsls	r6, r3, #31
 8001020:	0858      	lsrs	r0, r3, #1
 8001022:	086b      	lsrs	r3, r5, #1
 8001024:	431e      	orrs	r6, r3
 8001026:	07ed      	lsls	r5, r5, #31
 8001028:	e6ea      	b.n	8000e00 <__aeabi_ddiv+0x280>
 800102a:	4648      	mov	r0, r9
 800102c:	f001 f8e2 	bl	80021f4 <__clzsi2>
 8001030:	0001      	movs	r1, r0
 8001032:	0002      	movs	r2, r0
 8001034:	3115      	adds	r1, #21
 8001036:	3220      	adds	r2, #32
 8001038:	291c      	cmp	r1, #28
 800103a:	dc00      	bgt.n	800103e <__aeabi_ddiv+0x4be>
 800103c:	e61a      	b.n	8000c74 <__aeabi_ddiv+0xf4>
 800103e:	464b      	mov	r3, r9
 8001040:	3808      	subs	r0, #8
 8001042:	4083      	lsls	r3, r0
 8001044:	2500      	movs	r5, #0
 8001046:	4698      	mov	r8, r3
 8001048:	e620      	b.n	8000c8c <__aeabi_ddiv+0x10c>
 800104a:	f001 f8d3 	bl	80021f4 <__clzsi2>
 800104e:	0003      	movs	r3, r0
 8001050:	001a      	movs	r2, r3
 8001052:	3215      	adds	r2, #21
 8001054:	3020      	adds	r0, #32
 8001056:	2a1c      	cmp	r2, #28
 8001058:	dc00      	bgt.n	800105c <__aeabi_ddiv+0x4dc>
 800105a:	e630      	b.n	8000cbe <__aeabi_ddiv+0x13e>
 800105c:	4654      	mov	r4, sl
 800105e:	3b08      	subs	r3, #8
 8001060:	2200      	movs	r2, #0
 8001062:	409c      	lsls	r4, r3
 8001064:	e635      	b.n	8000cd2 <__aeabi_ddiv+0x152>
 8001066:	230f      	movs	r3, #15
 8001068:	402b      	ands	r3, r5
 800106a:	2b04      	cmp	r3, #4
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x4f0>
 800106e:	e652      	b.n	8000d16 <__aeabi_ddiv+0x196>
 8001070:	2305      	movs	r3, #5
 8001072:	425b      	negs	r3, r3
 8001074:	42ab      	cmp	r3, r5
 8001076:	419b      	sbcs	r3, r3
 8001078:	3504      	adds	r5, #4
 800107a:	425b      	negs	r3, r3
 800107c:	08ed      	lsrs	r5, r5, #3
 800107e:	4498      	add	r8, r3
 8001080:	e64a      	b.n	8000d18 <__aeabi_ddiv+0x198>
 8001082:	428c      	cmp	r4, r1
 8001084:	d1c5      	bne.n	8001012 <__aeabi_ddiv+0x492>
 8001086:	42af      	cmp	r7, r5
 8001088:	d9c0      	bls.n	800100c <__aeabi_ddiv+0x48c>
 800108a:	4690      	mov	r8, r2
 800108c:	e716      	b.n	8000ebc <__aeabi_ddiv+0x33c>
 800108e:	428a      	cmp	r2, r1
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x514>
 8001092:	e6ea      	b.n	8000e6a <__aeabi_ddiv+0x2ea>
 8001094:	1e83      	subs	r3, r0, #2
 8001096:	1909      	adds	r1, r1, r4
 8001098:	e6e7      	b.n	8000e6a <__aeabi_ddiv+0x2ea>
 800109a:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <__aeabi_ddiv+0x5c4>)
 800109c:	0028      	movs	r0, r5
 800109e:	445a      	add	r2, fp
 80010a0:	4643      	mov	r3, r8
 80010a2:	4095      	lsls	r5, r2
 80010a4:	4093      	lsls	r3, r2
 80010a6:	40c8      	lsrs	r0, r1
 80010a8:	1e6a      	subs	r2, r5, #1
 80010aa:	4195      	sbcs	r5, r2
 80010ac:	4644      	mov	r4, r8
 80010ae:	4303      	orrs	r3, r0
 80010b0:	432b      	orrs	r3, r5
 80010b2:	40cc      	lsrs	r4, r1
 80010b4:	075a      	lsls	r2, r3, #29
 80010b6:	d092      	beq.n	8000fde <__aeabi_ddiv+0x45e>
 80010b8:	220f      	movs	r2, #15
 80010ba:	401a      	ands	r2, r3
 80010bc:	2a04      	cmp	r2, #4
 80010be:	d188      	bne.n	8000fd2 <__aeabi_ddiv+0x452>
 80010c0:	e78d      	b.n	8000fde <__aeabi_ddiv+0x45e>
 80010c2:	0035      	movs	r5, r6
 80010c4:	4281      	cmp	r1, r0
 80010c6:	d000      	beq.n	80010ca <__aeabi_ddiv+0x54a>
 80010c8:	e74b      	b.n	8000f62 <__aeabi_ddiv+0x3e2>
 80010ca:	9a00      	ldr	r2, [sp, #0]
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x552>
 80010d0:	e747      	b.n	8000f62 <__aeabi_ddiv+0x3e2>
 80010d2:	e618      	b.n	8000d06 <__aeabi_ddiv+0x186>
 80010d4:	42ae      	cmp	r6, r5
 80010d6:	d99c      	bls.n	8001012 <__aeabi_ddiv+0x492>
 80010d8:	2302      	movs	r3, #2
 80010da:	425b      	negs	r3, r3
 80010dc:	469c      	mov	ip, r3
 80010de:	9b00      	ldr	r3, [sp, #0]
 80010e0:	44e0      	add	r8, ip
 80010e2:	469c      	mov	ip, r3
 80010e4:	4465      	add	r5, ip
 80010e6:	429d      	cmp	r5, r3
 80010e8:	419b      	sbcs	r3, r3
 80010ea:	425b      	negs	r3, r3
 80010ec:	191b      	adds	r3, r3, r4
 80010ee:	18c9      	adds	r1, r1, r3
 80010f0:	e6e4      	b.n	8000ebc <__aeabi_ddiv+0x33c>
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <__aeabi_ddiv+0x5c8>)
 80010f4:	445a      	add	r2, fp
 80010f6:	2a00      	cmp	r2, #0
 80010f8:	dc00      	bgt.n	80010fc <__aeabi_ddiv+0x57c>
 80010fa:	e744      	b.n	8000f86 <__aeabi_ddiv+0x406>
 80010fc:	2301      	movs	r3, #1
 80010fe:	2500      	movs	r5, #0
 8001100:	4498      	add	r8, r3
 8001102:	e609      	b.n	8000d18 <__aeabi_ddiv+0x198>
 8001104:	0765      	lsls	r5, r4, #29
 8001106:	0264      	lsls	r4, r4, #9
 8001108:	0b24      	lsrs	r4, r4, #12
 800110a:	08db      	lsrs	r3, r3, #3
 800110c:	431d      	orrs	r5, r3
 800110e:	2300      	movs	r3, #0
 8001110:	e590      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8001112:	9e00      	ldr	r6, [sp, #0]
 8001114:	3d02      	subs	r5, #2
 8001116:	0072      	lsls	r2, r6, #1
 8001118:	42b2      	cmp	r2, r6
 800111a:	41bf      	sbcs	r7, r7
 800111c:	427f      	negs	r7, r7
 800111e:	193c      	adds	r4, r7, r4
 8001120:	1909      	adds	r1, r1, r4
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	e7ce      	b.n	80010c4 <__aeabi_ddiv+0x544>
 8001126:	2480      	movs	r4, #128	; 0x80
 8001128:	4643      	mov	r3, r8
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	431c      	orrs	r4, r3
 800112e:	0324      	lsls	r4, r4, #12
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <__aeabi_ddiv+0x5cc>)
 8001132:	0b24      	lsrs	r4, r4, #12
 8001134:	e57e      	b.n	8000c34 <__aeabi_ddiv+0xb4>
 8001136:	9a00      	ldr	r2, [sp, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3ea      	bcc.n	8001112 <__aeabi_ddiv+0x592>
 800113c:	0035      	movs	r5, r6
 800113e:	e7c4      	b.n	80010ca <__aeabi_ddiv+0x54a>
 8001140:	0000043e 	.word	0x0000043e
 8001144:	0000041e 	.word	0x0000041e
 8001148:	000003ff 	.word	0x000003ff
 800114c:	000007ff 	.word	0x000007ff

08001150 <__eqdf2>:
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	464f      	mov	r7, r9
 8001154:	4646      	mov	r6, r8
 8001156:	46d6      	mov	lr, sl
 8001158:	4694      	mov	ip, r2
 800115a:	4691      	mov	r9, r2
 800115c:	031a      	lsls	r2, r3, #12
 800115e:	0b12      	lsrs	r2, r2, #12
 8001160:	4d18      	ldr	r5, [pc, #96]	; (80011c4 <__eqdf2+0x74>)
 8001162:	b5c0      	push	{r6, r7, lr}
 8001164:	004c      	lsls	r4, r1, #1
 8001166:	030f      	lsls	r7, r1, #12
 8001168:	4692      	mov	sl, r2
 800116a:	005a      	lsls	r2, r3, #1
 800116c:	0006      	movs	r6, r0
 800116e:	4680      	mov	r8, r0
 8001170:	0b3f      	lsrs	r7, r7, #12
 8001172:	2001      	movs	r0, #1
 8001174:	0d64      	lsrs	r4, r4, #21
 8001176:	0fc9      	lsrs	r1, r1, #31
 8001178:	0d52      	lsrs	r2, r2, #21
 800117a:	0fdb      	lsrs	r3, r3, #31
 800117c:	42ac      	cmp	r4, r5
 800117e:	d00a      	beq.n	8001196 <__eqdf2+0x46>
 8001180:	42aa      	cmp	r2, r5
 8001182:	d003      	beq.n	800118c <__eqdf2+0x3c>
 8001184:	4294      	cmp	r4, r2
 8001186:	d101      	bne.n	800118c <__eqdf2+0x3c>
 8001188:	4557      	cmp	r7, sl
 800118a:	d00d      	beq.n	80011a8 <__eqdf2+0x58>
 800118c:	bce0      	pop	{r5, r6, r7}
 800118e:	46ba      	mov	sl, r7
 8001190:	46b1      	mov	r9, r6
 8001192:	46a8      	mov	r8, r5
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001196:	003d      	movs	r5, r7
 8001198:	4335      	orrs	r5, r6
 800119a:	d1f7      	bne.n	800118c <__eqdf2+0x3c>
 800119c:	42a2      	cmp	r2, r4
 800119e:	d1f5      	bne.n	800118c <__eqdf2+0x3c>
 80011a0:	4652      	mov	r2, sl
 80011a2:	4665      	mov	r5, ip
 80011a4:	432a      	orrs	r2, r5
 80011a6:	d1f1      	bne.n	800118c <__eqdf2+0x3c>
 80011a8:	2001      	movs	r0, #1
 80011aa:	45c8      	cmp	r8, r9
 80011ac:	d1ee      	bne.n	800118c <__eqdf2+0x3c>
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d006      	beq.n	80011c0 <__eqdf2+0x70>
 80011b2:	2c00      	cmp	r4, #0
 80011b4:	d1ea      	bne.n	800118c <__eqdf2+0x3c>
 80011b6:	433e      	orrs	r6, r7
 80011b8:	0030      	movs	r0, r6
 80011ba:	1e46      	subs	r6, r0, #1
 80011bc:	41b0      	sbcs	r0, r6
 80011be:	e7e5      	b.n	800118c <__eqdf2+0x3c>
 80011c0:	2000      	movs	r0, #0
 80011c2:	e7e3      	b.n	800118c <__eqdf2+0x3c>
 80011c4:	000007ff 	.word	0x000007ff

080011c8 <__gedf2>:
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	464e      	mov	r6, r9
 80011cc:	4645      	mov	r5, r8
 80011ce:	4657      	mov	r7, sl
 80011d0:	46de      	mov	lr, fp
 80011d2:	0004      	movs	r4, r0
 80011d4:	0018      	movs	r0, r3
 80011d6:	b5e0      	push	{r5, r6, r7, lr}
 80011d8:	0016      	movs	r6, r2
 80011da:	031b      	lsls	r3, r3, #12
 80011dc:	0b1b      	lsrs	r3, r3, #12
 80011de:	4d32      	ldr	r5, [pc, #200]	; (80012a8 <__gedf2+0xe0>)
 80011e0:	030f      	lsls	r7, r1, #12
 80011e2:	004a      	lsls	r2, r1, #1
 80011e4:	4699      	mov	r9, r3
 80011e6:	0043      	lsls	r3, r0, #1
 80011e8:	46a4      	mov	ip, r4
 80011ea:	46b0      	mov	r8, r6
 80011ec:	0b3f      	lsrs	r7, r7, #12
 80011ee:	0d52      	lsrs	r2, r2, #21
 80011f0:	0fc9      	lsrs	r1, r1, #31
 80011f2:	0d5b      	lsrs	r3, r3, #21
 80011f4:	0fc0      	lsrs	r0, r0, #31
 80011f6:	42aa      	cmp	r2, r5
 80011f8:	d029      	beq.n	800124e <__gedf2+0x86>
 80011fa:	42ab      	cmp	r3, r5
 80011fc:	d018      	beq.n	8001230 <__gedf2+0x68>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d12a      	bne.n	8001258 <__gedf2+0x90>
 8001202:	433c      	orrs	r4, r7
 8001204:	46a3      	mov	fp, r4
 8001206:	4265      	negs	r5, r4
 8001208:	4165      	adcs	r5, r4
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <__gedf2+0x4c>
 800120e:	464c      	mov	r4, r9
 8001210:	4326      	orrs	r6, r4
 8001212:	d027      	beq.n	8001264 <__gedf2+0x9c>
 8001214:	2d00      	cmp	r5, #0
 8001216:	d115      	bne.n	8001244 <__gedf2+0x7c>
 8001218:	4281      	cmp	r1, r0
 800121a:	d028      	beq.n	800126e <__gedf2+0xa6>
 800121c:	2002      	movs	r0, #2
 800121e:	3901      	subs	r1, #1
 8001220:	4008      	ands	r0, r1
 8001222:	3801      	subs	r0, #1
 8001224:	bcf0      	pop	{r4, r5, r6, r7}
 8001226:	46bb      	mov	fp, r7
 8001228:	46b2      	mov	sl, r6
 800122a:	46a9      	mov	r9, r5
 800122c:	46a0      	mov	r8, r4
 800122e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001230:	464d      	mov	r5, r9
 8001232:	432e      	orrs	r6, r5
 8001234:	d12f      	bne.n	8001296 <__gedf2+0xce>
 8001236:	2a00      	cmp	r2, #0
 8001238:	d1ee      	bne.n	8001218 <__gedf2+0x50>
 800123a:	433c      	orrs	r4, r7
 800123c:	4265      	negs	r5, r4
 800123e:	4165      	adcs	r5, r4
 8001240:	2d00      	cmp	r5, #0
 8001242:	d0e9      	beq.n	8001218 <__gedf2+0x50>
 8001244:	2800      	cmp	r0, #0
 8001246:	d1ed      	bne.n	8001224 <__gedf2+0x5c>
 8001248:	2001      	movs	r0, #1
 800124a:	4240      	negs	r0, r0
 800124c:	e7ea      	b.n	8001224 <__gedf2+0x5c>
 800124e:	003d      	movs	r5, r7
 8001250:	4325      	orrs	r5, r4
 8001252:	d120      	bne.n	8001296 <__gedf2+0xce>
 8001254:	4293      	cmp	r3, r2
 8001256:	d0eb      	beq.n	8001230 <__gedf2+0x68>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1dd      	bne.n	8001218 <__gedf2+0x50>
 800125c:	464c      	mov	r4, r9
 800125e:	4326      	orrs	r6, r4
 8001260:	d1da      	bne.n	8001218 <__gedf2+0x50>
 8001262:	e7db      	b.n	800121c <__gedf2+0x54>
 8001264:	465b      	mov	r3, fp
 8001266:	2000      	movs	r0, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0db      	beq.n	8001224 <__gedf2+0x5c>
 800126c:	e7d6      	b.n	800121c <__gedf2+0x54>
 800126e:	429a      	cmp	r2, r3
 8001270:	dc0a      	bgt.n	8001288 <__gedf2+0xc0>
 8001272:	dbe7      	blt.n	8001244 <__gedf2+0x7c>
 8001274:	454f      	cmp	r7, r9
 8001276:	d8d1      	bhi.n	800121c <__gedf2+0x54>
 8001278:	d010      	beq.n	800129c <__gedf2+0xd4>
 800127a:	2000      	movs	r0, #0
 800127c:	454f      	cmp	r7, r9
 800127e:	d2d1      	bcs.n	8001224 <__gedf2+0x5c>
 8001280:	2900      	cmp	r1, #0
 8001282:	d0e1      	beq.n	8001248 <__gedf2+0x80>
 8001284:	0008      	movs	r0, r1
 8001286:	e7cd      	b.n	8001224 <__gedf2+0x5c>
 8001288:	4243      	negs	r3, r0
 800128a:	4158      	adcs	r0, r3
 800128c:	2302      	movs	r3, #2
 800128e:	4240      	negs	r0, r0
 8001290:	4018      	ands	r0, r3
 8001292:	3801      	subs	r0, #1
 8001294:	e7c6      	b.n	8001224 <__gedf2+0x5c>
 8001296:	2002      	movs	r0, #2
 8001298:	4240      	negs	r0, r0
 800129a:	e7c3      	b.n	8001224 <__gedf2+0x5c>
 800129c:	45c4      	cmp	ip, r8
 800129e:	d8bd      	bhi.n	800121c <__gedf2+0x54>
 80012a0:	2000      	movs	r0, #0
 80012a2:	45c4      	cmp	ip, r8
 80012a4:	d2be      	bcs.n	8001224 <__gedf2+0x5c>
 80012a6:	e7eb      	b.n	8001280 <__gedf2+0xb8>
 80012a8:	000007ff 	.word	0x000007ff

080012ac <__ledf2>:
 80012ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ae:	464e      	mov	r6, r9
 80012b0:	4645      	mov	r5, r8
 80012b2:	4657      	mov	r7, sl
 80012b4:	46de      	mov	lr, fp
 80012b6:	0004      	movs	r4, r0
 80012b8:	0018      	movs	r0, r3
 80012ba:	b5e0      	push	{r5, r6, r7, lr}
 80012bc:	0016      	movs	r6, r2
 80012be:	031b      	lsls	r3, r3, #12
 80012c0:	0b1b      	lsrs	r3, r3, #12
 80012c2:	4d31      	ldr	r5, [pc, #196]	; (8001388 <__ledf2+0xdc>)
 80012c4:	030f      	lsls	r7, r1, #12
 80012c6:	004a      	lsls	r2, r1, #1
 80012c8:	4699      	mov	r9, r3
 80012ca:	0043      	lsls	r3, r0, #1
 80012cc:	46a4      	mov	ip, r4
 80012ce:	46b0      	mov	r8, r6
 80012d0:	0b3f      	lsrs	r7, r7, #12
 80012d2:	0d52      	lsrs	r2, r2, #21
 80012d4:	0fc9      	lsrs	r1, r1, #31
 80012d6:	0d5b      	lsrs	r3, r3, #21
 80012d8:	0fc0      	lsrs	r0, r0, #31
 80012da:	42aa      	cmp	r2, r5
 80012dc:	d011      	beq.n	8001302 <__ledf2+0x56>
 80012de:	42ab      	cmp	r3, r5
 80012e0:	d014      	beq.n	800130c <__ledf2+0x60>
 80012e2:	2a00      	cmp	r2, #0
 80012e4:	d12f      	bne.n	8001346 <__ledf2+0x9a>
 80012e6:	433c      	orrs	r4, r7
 80012e8:	46a3      	mov	fp, r4
 80012ea:	4265      	negs	r5, r4
 80012ec:	4165      	adcs	r5, r4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d114      	bne.n	800131c <__ledf2+0x70>
 80012f2:	464c      	mov	r4, r9
 80012f4:	4326      	orrs	r6, r4
 80012f6:	d111      	bne.n	800131c <__ledf2+0x70>
 80012f8:	465b      	mov	r3, fp
 80012fa:	2000      	movs	r0, #0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d017      	beq.n	8001330 <__ledf2+0x84>
 8001300:	e010      	b.n	8001324 <__ledf2+0x78>
 8001302:	003d      	movs	r5, r7
 8001304:	4325      	orrs	r5, r4
 8001306:	d112      	bne.n	800132e <__ledf2+0x82>
 8001308:	4293      	cmp	r3, r2
 800130a:	d11c      	bne.n	8001346 <__ledf2+0x9a>
 800130c:	464d      	mov	r5, r9
 800130e:	432e      	orrs	r6, r5
 8001310:	d10d      	bne.n	800132e <__ledf2+0x82>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d104      	bne.n	8001320 <__ledf2+0x74>
 8001316:	433c      	orrs	r4, r7
 8001318:	4265      	negs	r5, r4
 800131a:	4165      	adcs	r5, r4
 800131c:	2d00      	cmp	r5, #0
 800131e:	d10d      	bne.n	800133c <__ledf2+0x90>
 8001320:	4281      	cmp	r1, r0
 8001322:	d016      	beq.n	8001352 <__ledf2+0xa6>
 8001324:	2002      	movs	r0, #2
 8001326:	3901      	subs	r1, #1
 8001328:	4008      	ands	r0, r1
 800132a:	3801      	subs	r0, #1
 800132c:	e000      	b.n	8001330 <__ledf2+0x84>
 800132e:	2002      	movs	r0, #2
 8001330:	bcf0      	pop	{r4, r5, r6, r7}
 8001332:	46bb      	mov	fp, r7
 8001334:	46b2      	mov	sl, r6
 8001336:	46a9      	mov	r9, r5
 8001338:	46a0      	mov	r8, r4
 800133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133c:	2800      	cmp	r0, #0
 800133e:	d1f7      	bne.n	8001330 <__ledf2+0x84>
 8001340:	2001      	movs	r0, #1
 8001342:	4240      	negs	r0, r0
 8001344:	e7f4      	b.n	8001330 <__ledf2+0x84>
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1ea      	bne.n	8001320 <__ledf2+0x74>
 800134a:	464c      	mov	r4, r9
 800134c:	4326      	orrs	r6, r4
 800134e:	d1e7      	bne.n	8001320 <__ledf2+0x74>
 8001350:	e7e8      	b.n	8001324 <__ledf2+0x78>
 8001352:	429a      	cmp	r2, r3
 8001354:	dd06      	ble.n	8001364 <__ledf2+0xb8>
 8001356:	4243      	negs	r3, r0
 8001358:	4158      	adcs	r0, r3
 800135a:	2302      	movs	r3, #2
 800135c:	4240      	negs	r0, r0
 800135e:	4018      	ands	r0, r3
 8001360:	3801      	subs	r0, #1
 8001362:	e7e5      	b.n	8001330 <__ledf2+0x84>
 8001364:	429a      	cmp	r2, r3
 8001366:	dbe9      	blt.n	800133c <__ledf2+0x90>
 8001368:	454f      	cmp	r7, r9
 800136a:	d8db      	bhi.n	8001324 <__ledf2+0x78>
 800136c:	d006      	beq.n	800137c <__ledf2+0xd0>
 800136e:	2000      	movs	r0, #0
 8001370:	454f      	cmp	r7, r9
 8001372:	d2dd      	bcs.n	8001330 <__ledf2+0x84>
 8001374:	2900      	cmp	r1, #0
 8001376:	d0e3      	beq.n	8001340 <__ledf2+0x94>
 8001378:	0008      	movs	r0, r1
 800137a:	e7d9      	b.n	8001330 <__ledf2+0x84>
 800137c:	45c4      	cmp	ip, r8
 800137e:	d8d1      	bhi.n	8001324 <__ledf2+0x78>
 8001380:	2000      	movs	r0, #0
 8001382:	45c4      	cmp	ip, r8
 8001384:	d2d4      	bcs.n	8001330 <__ledf2+0x84>
 8001386:	e7f5      	b.n	8001374 <__ledf2+0xc8>
 8001388:	000007ff 	.word	0x000007ff

0800138c <__aeabi_dmul>:
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	4657      	mov	r7, sl
 8001390:	464e      	mov	r6, r9
 8001392:	4645      	mov	r5, r8
 8001394:	46de      	mov	lr, fp
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	4698      	mov	r8, r3
 800139a:	030c      	lsls	r4, r1, #12
 800139c:	004b      	lsls	r3, r1, #1
 800139e:	0006      	movs	r6, r0
 80013a0:	4692      	mov	sl, r2
 80013a2:	b087      	sub	sp, #28
 80013a4:	0b24      	lsrs	r4, r4, #12
 80013a6:	0d5b      	lsrs	r3, r3, #21
 80013a8:	0fcf      	lsrs	r7, r1, #31
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <__aeabi_dmul+0xfc>
 80013ae:	4add      	ldr	r2, [pc, #884]	; (8001724 <__aeabi_dmul+0x398>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dmul+0x2a>
 80013b4:	e086      	b.n	80014c4 <__aeabi_dmul+0x138>
 80013b6:	0f42      	lsrs	r2, r0, #29
 80013b8:	00e4      	lsls	r4, r4, #3
 80013ba:	4314      	orrs	r4, r2
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	0412      	lsls	r2, r2, #16
 80013c0:	4314      	orrs	r4, r2
 80013c2:	4ad9      	ldr	r2, [pc, #868]	; (8001728 <__aeabi_dmul+0x39c>)
 80013c4:	00c5      	lsls	r5, r0, #3
 80013c6:	4694      	mov	ip, r2
 80013c8:	4463      	add	r3, ip
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	4699      	mov	r9, r3
 80013d0:	469b      	mov	fp, r3
 80013d2:	4643      	mov	r3, r8
 80013d4:	4642      	mov	r2, r8
 80013d6:	031e      	lsls	r6, r3, #12
 80013d8:	0fd2      	lsrs	r2, r2, #31
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4650      	mov	r0, sl
 80013de:	4690      	mov	r8, r2
 80013e0:	0b36      	lsrs	r6, r6, #12
 80013e2:	0d5b      	lsrs	r3, r3, #21
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dmul+0x5c>
 80013e6:	e078      	b.n	80014da <__aeabi_dmul+0x14e>
 80013e8:	4ace      	ldr	r2, [pc, #824]	; (8001724 <__aeabi_dmul+0x398>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01d      	beq.n	800142a <__aeabi_dmul+0x9e>
 80013ee:	49ce      	ldr	r1, [pc, #824]	; (8001728 <__aeabi_dmul+0x39c>)
 80013f0:	0f42      	lsrs	r2, r0, #29
 80013f2:	468c      	mov	ip, r1
 80013f4:	9900      	ldr	r1, [sp, #0]
 80013f6:	4463      	add	r3, ip
 80013f8:	00f6      	lsls	r6, r6, #3
 80013fa:	468c      	mov	ip, r1
 80013fc:	4316      	orrs	r6, r2
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	449c      	add	ip, r3
 8001402:	0412      	lsls	r2, r2, #16
 8001404:	4663      	mov	r3, ip
 8001406:	4316      	orrs	r6, r2
 8001408:	00c2      	lsls	r2, r0, #3
 800140a:	2000      	movs	r0, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	9900      	ldr	r1, [sp, #0]
 8001410:	4643      	mov	r3, r8
 8001412:	3101      	adds	r1, #1
 8001414:	468c      	mov	ip, r1
 8001416:	4649      	mov	r1, r9
 8001418:	407b      	eors	r3, r7
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	290f      	cmp	r1, #15
 800141e:	d900      	bls.n	8001422 <__aeabi_dmul+0x96>
 8001420:	e07e      	b.n	8001520 <__aeabi_dmul+0x194>
 8001422:	4bc2      	ldr	r3, [pc, #776]	; (800172c <__aeabi_dmul+0x3a0>)
 8001424:	0089      	lsls	r1, r1, #2
 8001426:	5859      	ldr	r1, [r3, r1]
 8001428:	468f      	mov	pc, r1
 800142a:	4652      	mov	r2, sl
 800142c:	9b00      	ldr	r3, [sp, #0]
 800142e:	4332      	orrs	r2, r6
 8001430:	d000      	beq.n	8001434 <__aeabi_dmul+0xa8>
 8001432:	e156      	b.n	80016e2 <__aeabi_dmul+0x356>
 8001434:	49bb      	ldr	r1, [pc, #748]	; (8001724 <__aeabi_dmul+0x398>)
 8001436:	2600      	movs	r6, #0
 8001438:	468c      	mov	ip, r1
 800143a:	4463      	add	r3, ip
 800143c:	4649      	mov	r1, r9
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2302      	movs	r3, #2
 8001442:	4319      	orrs	r1, r3
 8001444:	4689      	mov	r9, r1
 8001446:	2002      	movs	r0, #2
 8001448:	e7e1      	b.n	800140e <__aeabi_dmul+0x82>
 800144a:	4643      	mov	r3, r8
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	0034      	movs	r4, r6
 8001450:	0015      	movs	r5, r2
 8001452:	4683      	mov	fp, r0
 8001454:	465b      	mov	r3, fp
 8001456:	2b02      	cmp	r3, #2
 8001458:	d05e      	beq.n	8001518 <__aeabi_dmul+0x18c>
 800145a:	2b03      	cmp	r3, #3
 800145c:	d100      	bne.n	8001460 <__aeabi_dmul+0xd4>
 800145e:	e1f3      	b.n	8001848 <__aeabi_dmul+0x4bc>
 8001460:	2b01      	cmp	r3, #1
 8001462:	d000      	beq.n	8001466 <__aeabi_dmul+0xda>
 8001464:	e118      	b.n	8001698 <__aeabi_dmul+0x30c>
 8001466:	2200      	movs	r2, #0
 8001468:	2400      	movs	r4, #0
 800146a:	2500      	movs	r5, #0
 800146c:	9b01      	ldr	r3, [sp, #4]
 800146e:	0512      	lsls	r2, r2, #20
 8001470:	4322      	orrs	r2, r4
 8001472:	07db      	lsls	r3, r3, #31
 8001474:	431a      	orrs	r2, r3
 8001476:	0028      	movs	r0, r5
 8001478:	0011      	movs	r1, r2
 800147a:	b007      	add	sp, #28
 800147c:	bcf0      	pop	{r4, r5, r6, r7}
 800147e:	46bb      	mov	fp, r7
 8001480:	46b2      	mov	sl, r6
 8001482:	46a9      	mov	r9, r5
 8001484:	46a0      	mov	r8, r4
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001488:	0025      	movs	r5, r4
 800148a:	4305      	orrs	r5, r0
 800148c:	d100      	bne.n	8001490 <__aeabi_dmul+0x104>
 800148e:	e141      	b.n	8001714 <__aeabi_dmul+0x388>
 8001490:	2c00      	cmp	r4, #0
 8001492:	d100      	bne.n	8001496 <__aeabi_dmul+0x10a>
 8001494:	e1ad      	b.n	80017f2 <__aeabi_dmul+0x466>
 8001496:	0020      	movs	r0, r4
 8001498:	f000 feac 	bl	80021f4 <__clzsi2>
 800149c:	0001      	movs	r1, r0
 800149e:	0002      	movs	r2, r0
 80014a0:	390b      	subs	r1, #11
 80014a2:	231d      	movs	r3, #29
 80014a4:	0010      	movs	r0, r2
 80014a6:	1a5b      	subs	r3, r3, r1
 80014a8:	0031      	movs	r1, r6
 80014aa:	0035      	movs	r5, r6
 80014ac:	3808      	subs	r0, #8
 80014ae:	4084      	lsls	r4, r0
 80014b0:	40d9      	lsrs	r1, r3
 80014b2:	4085      	lsls	r5, r0
 80014b4:	430c      	orrs	r4, r1
 80014b6:	489e      	ldr	r0, [pc, #632]	; (8001730 <__aeabi_dmul+0x3a4>)
 80014b8:	1a83      	subs	r3, r0, r2
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	4699      	mov	r9, r3
 80014c0:	469b      	mov	fp, r3
 80014c2:	e786      	b.n	80013d2 <__aeabi_dmul+0x46>
 80014c4:	0005      	movs	r5, r0
 80014c6:	4325      	orrs	r5, r4
 80014c8:	d000      	beq.n	80014cc <__aeabi_dmul+0x140>
 80014ca:	e11c      	b.n	8001706 <__aeabi_dmul+0x37a>
 80014cc:	2208      	movs	r2, #8
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2302      	movs	r3, #2
 80014d2:	2400      	movs	r4, #0
 80014d4:	4691      	mov	r9, r2
 80014d6:	469b      	mov	fp, r3
 80014d8:	e77b      	b.n	80013d2 <__aeabi_dmul+0x46>
 80014da:	4652      	mov	r2, sl
 80014dc:	4332      	orrs	r2, r6
 80014de:	d100      	bne.n	80014e2 <__aeabi_dmul+0x156>
 80014e0:	e10a      	b.n	80016f8 <__aeabi_dmul+0x36c>
 80014e2:	2e00      	cmp	r6, #0
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dmul+0x15c>
 80014e6:	e176      	b.n	80017d6 <__aeabi_dmul+0x44a>
 80014e8:	0030      	movs	r0, r6
 80014ea:	f000 fe83 	bl	80021f4 <__clzsi2>
 80014ee:	0002      	movs	r2, r0
 80014f0:	3a0b      	subs	r2, #11
 80014f2:	231d      	movs	r3, #29
 80014f4:	0001      	movs	r1, r0
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	4652      	mov	r2, sl
 80014fa:	3908      	subs	r1, #8
 80014fc:	40da      	lsrs	r2, r3
 80014fe:	408e      	lsls	r6, r1
 8001500:	4316      	orrs	r6, r2
 8001502:	4652      	mov	r2, sl
 8001504:	408a      	lsls	r2, r1
 8001506:	9b00      	ldr	r3, [sp, #0]
 8001508:	4989      	ldr	r1, [pc, #548]	; (8001730 <__aeabi_dmul+0x3a4>)
 800150a:	1a18      	subs	r0, r3, r0
 800150c:	0003      	movs	r3, r0
 800150e:	468c      	mov	ip, r1
 8001510:	4463      	add	r3, ip
 8001512:	2000      	movs	r0, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	e77a      	b.n	800140e <__aeabi_dmul+0x82>
 8001518:	2400      	movs	r4, #0
 800151a:	2500      	movs	r5, #0
 800151c:	4a81      	ldr	r2, [pc, #516]	; (8001724 <__aeabi_dmul+0x398>)
 800151e:	e7a5      	b.n	800146c <__aeabi_dmul+0xe0>
 8001520:	0c2f      	lsrs	r7, r5, #16
 8001522:	042d      	lsls	r5, r5, #16
 8001524:	0c2d      	lsrs	r5, r5, #16
 8001526:	002b      	movs	r3, r5
 8001528:	0c11      	lsrs	r1, r2, #16
 800152a:	0412      	lsls	r2, r2, #16
 800152c:	0c12      	lsrs	r2, r2, #16
 800152e:	4353      	muls	r3, r2
 8001530:	4698      	mov	r8, r3
 8001532:	0013      	movs	r3, r2
 8001534:	0028      	movs	r0, r5
 8001536:	437b      	muls	r3, r7
 8001538:	4699      	mov	r9, r3
 800153a:	4348      	muls	r0, r1
 800153c:	4448      	add	r0, r9
 800153e:	4683      	mov	fp, r0
 8001540:	4640      	mov	r0, r8
 8001542:	000b      	movs	r3, r1
 8001544:	0c00      	lsrs	r0, r0, #16
 8001546:	4682      	mov	sl, r0
 8001548:	4658      	mov	r0, fp
 800154a:	437b      	muls	r3, r7
 800154c:	4450      	add	r0, sl
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	4581      	cmp	r9, r0
 8001552:	d906      	bls.n	8001562 <__aeabi_dmul+0x1d6>
 8001554:	469a      	mov	sl, r3
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4699      	mov	r9, r3
 800155c:	44ca      	add	sl, r9
 800155e:	4653      	mov	r3, sl
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	0c03      	lsrs	r3, r0, #16
 8001564:	469b      	mov	fp, r3
 8001566:	4643      	mov	r3, r8
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	0400      	lsls	r0, r0, #16
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	4698      	mov	r8, r3
 8001570:	0003      	movs	r3, r0
 8001572:	4443      	add	r3, r8
 8001574:	9304      	str	r3, [sp, #16]
 8001576:	0c33      	lsrs	r3, r6, #16
 8001578:	4699      	mov	r9, r3
 800157a:	002b      	movs	r3, r5
 800157c:	0436      	lsls	r6, r6, #16
 800157e:	0c36      	lsrs	r6, r6, #16
 8001580:	4373      	muls	r3, r6
 8001582:	4698      	mov	r8, r3
 8001584:	0033      	movs	r3, r6
 8001586:	437b      	muls	r3, r7
 8001588:	469a      	mov	sl, r3
 800158a:	464b      	mov	r3, r9
 800158c:	435d      	muls	r5, r3
 800158e:	435f      	muls	r7, r3
 8001590:	4643      	mov	r3, r8
 8001592:	4455      	add	r5, sl
 8001594:	0c18      	lsrs	r0, r3, #16
 8001596:	1940      	adds	r0, r0, r5
 8001598:	4582      	cmp	sl, r0
 800159a:	d903      	bls.n	80015a4 <__aeabi_dmul+0x218>
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	469a      	mov	sl, r3
 80015a2:	4457      	add	r7, sl
 80015a4:	0c05      	lsrs	r5, r0, #16
 80015a6:	19eb      	adds	r3, r5, r7
 80015a8:	9305      	str	r3, [sp, #20]
 80015aa:	4643      	mov	r3, r8
 80015ac:	041d      	lsls	r5, r3, #16
 80015ae:	0c2d      	lsrs	r5, r5, #16
 80015b0:	0400      	lsls	r0, r0, #16
 80015b2:	1940      	adds	r0, r0, r5
 80015b4:	0c25      	lsrs	r5, r4, #16
 80015b6:	0424      	lsls	r4, r4, #16
 80015b8:	0c24      	lsrs	r4, r4, #16
 80015ba:	0027      	movs	r7, r4
 80015bc:	4357      	muls	r7, r2
 80015be:	436a      	muls	r2, r5
 80015c0:	4690      	mov	r8, r2
 80015c2:	002a      	movs	r2, r5
 80015c4:	0c3b      	lsrs	r3, r7, #16
 80015c6:	469a      	mov	sl, r3
 80015c8:	434a      	muls	r2, r1
 80015ca:	4361      	muls	r1, r4
 80015cc:	4441      	add	r1, r8
 80015ce:	4451      	add	r1, sl
 80015d0:	4483      	add	fp, r0
 80015d2:	4588      	cmp	r8, r1
 80015d4:	d903      	bls.n	80015de <__aeabi_dmul+0x252>
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	4698      	mov	r8, r3
 80015dc:	4442      	add	r2, r8
 80015de:	043f      	lsls	r7, r7, #16
 80015e0:	0c0b      	lsrs	r3, r1, #16
 80015e2:	0c3f      	lsrs	r7, r7, #16
 80015e4:	0409      	lsls	r1, r1, #16
 80015e6:	19c9      	adds	r1, r1, r7
 80015e8:	0027      	movs	r7, r4
 80015ea:	4698      	mov	r8, r3
 80015ec:	464b      	mov	r3, r9
 80015ee:	4377      	muls	r7, r6
 80015f0:	435c      	muls	r4, r3
 80015f2:	436e      	muls	r6, r5
 80015f4:	435d      	muls	r5, r3
 80015f6:	0c3b      	lsrs	r3, r7, #16
 80015f8:	4699      	mov	r9, r3
 80015fa:	19a4      	adds	r4, r4, r6
 80015fc:	444c      	add	r4, r9
 80015fe:	4442      	add	r2, r8
 8001600:	9503      	str	r5, [sp, #12]
 8001602:	42a6      	cmp	r6, r4
 8001604:	d904      	bls.n	8001610 <__aeabi_dmul+0x284>
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	4698      	mov	r8, r3
 800160c:	4445      	add	r5, r8
 800160e:	9503      	str	r5, [sp, #12]
 8001610:	9b02      	ldr	r3, [sp, #8]
 8001612:	043f      	lsls	r7, r7, #16
 8001614:	445b      	add	r3, fp
 8001616:	001e      	movs	r6, r3
 8001618:	4283      	cmp	r3, r0
 800161a:	4180      	sbcs	r0, r0
 800161c:	0423      	lsls	r3, r4, #16
 800161e:	4698      	mov	r8, r3
 8001620:	9b05      	ldr	r3, [sp, #20]
 8001622:	0c3f      	lsrs	r7, r7, #16
 8001624:	4447      	add	r7, r8
 8001626:	4698      	mov	r8, r3
 8001628:	1876      	adds	r6, r6, r1
 800162a:	428e      	cmp	r6, r1
 800162c:	4189      	sbcs	r1, r1
 800162e:	4447      	add	r7, r8
 8001630:	4240      	negs	r0, r0
 8001632:	183d      	adds	r5, r7, r0
 8001634:	46a8      	mov	r8, r5
 8001636:	4693      	mov	fp, r2
 8001638:	4249      	negs	r1, r1
 800163a:	468a      	mov	sl, r1
 800163c:	44c3      	add	fp, r8
 800163e:	429f      	cmp	r7, r3
 8001640:	41bf      	sbcs	r7, r7
 8001642:	4580      	cmp	r8, r0
 8001644:	4180      	sbcs	r0, r0
 8001646:	9b03      	ldr	r3, [sp, #12]
 8001648:	44da      	add	sl, fp
 800164a:	4698      	mov	r8, r3
 800164c:	4653      	mov	r3, sl
 800164e:	4240      	negs	r0, r0
 8001650:	427f      	negs	r7, r7
 8001652:	4307      	orrs	r7, r0
 8001654:	0c24      	lsrs	r4, r4, #16
 8001656:	4593      	cmp	fp, r2
 8001658:	4192      	sbcs	r2, r2
 800165a:	458a      	cmp	sl, r1
 800165c:	4189      	sbcs	r1, r1
 800165e:	193f      	adds	r7, r7, r4
 8001660:	0ddc      	lsrs	r4, r3, #23
 8001662:	9b04      	ldr	r3, [sp, #16]
 8001664:	0275      	lsls	r5, r6, #9
 8001666:	431d      	orrs	r5, r3
 8001668:	1e68      	subs	r0, r5, #1
 800166a:	4185      	sbcs	r5, r0
 800166c:	4653      	mov	r3, sl
 800166e:	4252      	negs	r2, r2
 8001670:	4249      	negs	r1, r1
 8001672:	430a      	orrs	r2, r1
 8001674:	18bf      	adds	r7, r7, r2
 8001676:	4447      	add	r7, r8
 8001678:	0df6      	lsrs	r6, r6, #23
 800167a:	027f      	lsls	r7, r7, #9
 800167c:	4335      	orrs	r5, r6
 800167e:	025a      	lsls	r2, r3, #9
 8001680:	433c      	orrs	r4, r7
 8001682:	4315      	orrs	r5, r2
 8001684:	01fb      	lsls	r3, r7, #7
 8001686:	d400      	bmi.n	800168a <__aeabi_dmul+0x2fe>
 8001688:	e0c1      	b.n	800180e <__aeabi_dmul+0x482>
 800168a:	2101      	movs	r1, #1
 800168c:	086a      	lsrs	r2, r5, #1
 800168e:	400d      	ands	r5, r1
 8001690:	4315      	orrs	r5, r2
 8001692:	07e2      	lsls	r2, r4, #31
 8001694:	4315      	orrs	r5, r2
 8001696:	0864      	lsrs	r4, r4, #1
 8001698:	4926      	ldr	r1, [pc, #152]	; (8001734 <__aeabi_dmul+0x3a8>)
 800169a:	4461      	add	r1, ip
 800169c:	2900      	cmp	r1, #0
 800169e:	dd56      	ble.n	800174e <__aeabi_dmul+0x3c2>
 80016a0:	076b      	lsls	r3, r5, #29
 80016a2:	d009      	beq.n	80016b8 <__aeabi_dmul+0x32c>
 80016a4:	220f      	movs	r2, #15
 80016a6:	402a      	ands	r2, r5
 80016a8:	2a04      	cmp	r2, #4
 80016aa:	d005      	beq.n	80016b8 <__aeabi_dmul+0x32c>
 80016ac:	1d2a      	adds	r2, r5, #4
 80016ae:	42aa      	cmp	r2, r5
 80016b0:	41ad      	sbcs	r5, r5
 80016b2:	426d      	negs	r5, r5
 80016b4:	1964      	adds	r4, r4, r5
 80016b6:	0015      	movs	r5, r2
 80016b8:	01e3      	lsls	r3, r4, #7
 80016ba:	d504      	bpl.n	80016c6 <__aeabi_dmul+0x33a>
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <__aeabi_dmul+0x3ac>)
 80016c0:	00c9      	lsls	r1, r1, #3
 80016c2:	4014      	ands	r4, r2
 80016c4:	4461      	add	r1, ip
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <__aeabi_dmul+0x3b0>)
 80016c8:	4291      	cmp	r1, r2
 80016ca:	dd00      	ble.n	80016ce <__aeabi_dmul+0x342>
 80016cc:	e724      	b.n	8001518 <__aeabi_dmul+0x18c>
 80016ce:	0762      	lsls	r2, r4, #29
 80016d0:	08ed      	lsrs	r5, r5, #3
 80016d2:	0264      	lsls	r4, r4, #9
 80016d4:	0549      	lsls	r1, r1, #21
 80016d6:	4315      	orrs	r5, r2
 80016d8:	0b24      	lsrs	r4, r4, #12
 80016da:	0d4a      	lsrs	r2, r1, #21
 80016dc:	e6c6      	b.n	800146c <__aeabi_dmul+0xe0>
 80016de:	9701      	str	r7, [sp, #4]
 80016e0:	e6b8      	b.n	8001454 <__aeabi_dmul+0xc8>
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <__aeabi_dmul+0x398>)
 80016e4:	2003      	movs	r0, #3
 80016e6:	4694      	mov	ip, r2
 80016e8:	4463      	add	r3, ip
 80016ea:	464a      	mov	r2, r9
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2303      	movs	r3, #3
 80016f0:	431a      	orrs	r2, r3
 80016f2:	4691      	mov	r9, r2
 80016f4:	4652      	mov	r2, sl
 80016f6:	e68a      	b.n	800140e <__aeabi_dmul+0x82>
 80016f8:	4649      	mov	r1, r9
 80016fa:	2301      	movs	r3, #1
 80016fc:	4319      	orrs	r1, r3
 80016fe:	4689      	mov	r9, r1
 8001700:	2600      	movs	r6, #0
 8001702:	2001      	movs	r0, #1
 8001704:	e683      	b.n	800140e <__aeabi_dmul+0x82>
 8001706:	220c      	movs	r2, #12
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2303      	movs	r3, #3
 800170c:	0005      	movs	r5, r0
 800170e:	4691      	mov	r9, r2
 8001710:	469b      	mov	fp, r3
 8001712:	e65e      	b.n	80013d2 <__aeabi_dmul+0x46>
 8001714:	2304      	movs	r3, #4
 8001716:	4699      	mov	r9, r3
 8001718:	2300      	movs	r3, #0
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	2400      	movs	r4, #0
 8001720:	469b      	mov	fp, r3
 8001722:	e656      	b.n	80013d2 <__aeabi_dmul+0x46>
 8001724:	000007ff 	.word	0x000007ff
 8001728:	fffffc01 	.word	0xfffffc01
 800172c:	08006488 	.word	0x08006488
 8001730:	fffffc0d 	.word	0xfffffc0d
 8001734:	000003ff 	.word	0x000003ff
 8001738:	feffffff 	.word	0xfeffffff
 800173c:	000007fe 	.word	0x000007fe
 8001740:	2300      	movs	r3, #0
 8001742:	2480      	movs	r4, #128	; 0x80
 8001744:	2500      	movs	r5, #0
 8001746:	4a44      	ldr	r2, [pc, #272]	; (8001858 <__aeabi_dmul+0x4cc>)
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	0324      	lsls	r4, r4, #12
 800174c:	e68e      	b.n	800146c <__aeabi_dmul+0xe0>
 800174e:	2001      	movs	r0, #1
 8001750:	1a40      	subs	r0, r0, r1
 8001752:	2838      	cmp	r0, #56	; 0x38
 8001754:	dd00      	ble.n	8001758 <__aeabi_dmul+0x3cc>
 8001756:	e686      	b.n	8001466 <__aeabi_dmul+0xda>
 8001758:	281f      	cmp	r0, #31
 800175a:	dd5b      	ble.n	8001814 <__aeabi_dmul+0x488>
 800175c:	221f      	movs	r2, #31
 800175e:	0023      	movs	r3, r4
 8001760:	4252      	negs	r2, r2
 8001762:	1a51      	subs	r1, r2, r1
 8001764:	40cb      	lsrs	r3, r1
 8001766:	0019      	movs	r1, r3
 8001768:	2820      	cmp	r0, #32
 800176a:	d003      	beq.n	8001774 <__aeabi_dmul+0x3e8>
 800176c:	4a3b      	ldr	r2, [pc, #236]	; (800185c <__aeabi_dmul+0x4d0>)
 800176e:	4462      	add	r2, ip
 8001770:	4094      	lsls	r4, r2
 8001772:	4325      	orrs	r5, r4
 8001774:	1e6a      	subs	r2, r5, #1
 8001776:	4195      	sbcs	r5, r2
 8001778:	002a      	movs	r2, r5
 800177a:	430a      	orrs	r2, r1
 800177c:	2107      	movs	r1, #7
 800177e:	000d      	movs	r5, r1
 8001780:	2400      	movs	r4, #0
 8001782:	4015      	ands	r5, r2
 8001784:	4211      	tst	r1, r2
 8001786:	d05b      	beq.n	8001840 <__aeabi_dmul+0x4b4>
 8001788:	210f      	movs	r1, #15
 800178a:	2400      	movs	r4, #0
 800178c:	4011      	ands	r1, r2
 800178e:	2904      	cmp	r1, #4
 8001790:	d053      	beq.n	800183a <__aeabi_dmul+0x4ae>
 8001792:	1d11      	adds	r1, r2, #4
 8001794:	4291      	cmp	r1, r2
 8001796:	4192      	sbcs	r2, r2
 8001798:	4252      	negs	r2, r2
 800179a:	18a4      	adds	r4, r4, r2
 800179c:	000a      	movs	r2, r1
 800179e:	0223      	lsls	r3, r4, #8
 80017a0:	d54b      	bpl.n	800183a <__aeabi_dmul+0x4ae>
 80017a2:	2201      	movs	r2, #1
 80017a4:	2400      	movs	r4, #0
 80017a6:	2500      	movs	r5, #0
 80017a8:	e660      	b.n	800146c <__aeabi_dmul+0xe0>
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	031b      	lsls	r3, r3, #12
 80017ae:	421c      	tst	r4, r3
 80017b0:	d009      	beq.n	80017c6 <__aeabi_dmul+0x43a>
 80017b2:	421e      	tst	r6, r3
 80017b4:	d107      	bne.n	80017c6 <__aeabi_dmul+0x43a>
 80017b6:	4333      	orrs	r3, r6
 80017b8:	031c      	lsls	r4, r3, #12
 80017ba:	4643      	mov	r3, r8
 80017bc:	0015      	movs	r5, r2
 80017be:	0b24      	lsrs	r4, r4, #12
 80017c0:	4a25      	ldr	r2, [pc, #148]	; (8001858 <__aeabi_dmul+0x4cc>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	e652      	b.n	800146c <__aeabi_dmul+0xe0>
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	0312      	lsls	r2, r2, #12
 80017ca:	4314      	orrs	r4, r2
 80017cc:	0324      	lsls	r4, r4, #12
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <__aeabi_dmul+0x4cc>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	9701      	str	r7, [sp, #4]
 80017d4:	e64a      	b.n	800146c <__aeabi_dmul+0xe0>
 80017d6:	f000 fd0d 	bl	80021f4 <__clzsi2>
 80017da:	0003      	movs	r3, r0
 80017dc:	001a      	movs	r2, r3
 80017de:	3215      	adds	r2, #21
 80017e0:	3020      	adds	r0, #32
 80017e2:	2a1c      	cmp	r2, #28
 80017e4:	dc00      	bgt.n	80017e8 <__aeabi_dmul+0x45c>
 80017e6:	e684      	b.n	80014f2 <__aeabi_dmul+0x166>
 80017e8:	4656      	mov	r6, sl
 80017ea:	3b08      	subs	r3, #8
 80017ec:	2200      	movs	r2, #0
 80017ee:	409e      	lsls	r6, r3
 80017f0:	e689      	b.n	8001506 <__aeabi_dmul+0x17a>
 80017f2:	f000 fcff 	bl	80021f4 <__clzsi2>
 80017f6:	0001      	movs	r1, r0
 80017f8:	0002      	movs	r2, r0
 80017fa:	3115      	adds	r1, #21
 80017fc:	3220      	adds	r2, #32
 80017fe:	291c      	cmp	r1, #28
 8001800:	dc00      	bgt.n	8001804 <__aeabi_dmul+0x478>
 8001802:	e64e      	b.n	80014a2 <__aeabi_dmul+0x116>
 8001804:	0034      	movs	r4, r6
 8001806:	3808      	subs	r0, #8
 8001808:	2500      	movs	r5, #0
 800180a:	4084      	lsls	r4, r0
 800180c:	e653      	b.n	80014b6 <__aeabi_dmul+0x12a>
 800180e:	9b00      	ldr	r3, [sp, #0]
 8001810:	469c      	mov	ip, r3
 8001812:	e741      	b.n	8001698 <__aeabi_dmul+0x30c>
 8001814:	4912      	ldr	r1, [pc, #72]	; (8001860 <__aeabi_dmul+0x4d4>)
 8001816:	0022      	movs	r2, r4
 8001818:	4461      	add	r1, ip
 800181a:	002e      	movs	r6, r5
 800181c:	408d      	lsls	r5, r1
 800181e:	408a      	lsls	r2, r1
 8001820:	40c6      	lsrs	r6, r0
 8001822:	1e69      	subs	r1, r5, #1
 8001824:	418d      	sbcs	r5, r1
 8001826:	4332      	orrs	r2, r6
 8001828:	432a      	orrs	r2, r5
 800182a:	40c4      	lsrs	r4, r0
 800182c:	0753      	lsls	r3, r2, #29
 800182e:	d0b6      	beq.n	800179e <__aeabi_dmul+0x412>
 8001830:	210f      	movs	r1, #15
 8001832:	4011      	ands	r1, r2
 8001834:	2904      	cmp	r1, #4
 8001836:	d1ac      	bne.n	8001792 <__aeabi_dmul+0x406>
 8001838:	e7b1      	b.n	800179e <__aeabi_dmul+0x412>
 800183a:	0765      	lsls	r5, r4, #29
 800183c:	0264      	lsls	r4, r4, #9
 800183e:	0b24      	lsrs	r4, r4, #12
 8001840:	08d2      	lsrs	r2, r2, #3
 8001842:	4315      	orrs	r5, r2
 8001844:	2200      	movs	r2, #0
 8001846:	e611      	b.n	800146c <__aeabi_dmul+0xe0>
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	0312      	lsls	r2, r2, #12
 800184c:	4314      	orrs	r4, r2
 800184e:	0324      	lsls	r4, r4, #12
 8001850:	4a01      	ldr	r2, [pc, #4]	; (8001858 <__aeabi_dmul+0x4cc>)
 8001852:	0b24      	lsrs	r4, r4, #12
 8001854:	e60a      	b.n	800146c <__aeabi_dmul+0xe0>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	000007ff 	.word	0x000007ff
 800185c:	0000043e 	.word	0x0000043e
 8001860:	0000041e 	.word	0x0000041e

08001864 <__aeabi_dsub>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	4657      	mov	r7, sl
 8001868:	464e      	mov	r6, r9
 800186a:	4645      	mov	r5, r8
 800186c:	46de      	mov	lr, fp
 800186e:	0004      	movs	r4, r0
 8001870:	b5e0      	push	{r5, r6, r7, lr}
 8001872:	001f      	movs	r7, r3
 8001874:	0010      	movs	r0, r2
 8001876:	030b      	lsls	r3, r1, #12
 8001878:	0f62      	lsrs	r2, r4, #29
 800187a:	004e      	lsls	r6, r1, #1
 800187c:	0fcd      	lsrs	r5, r1, #31
 800187e:	0a5b      	lsrs	r3, r3, #9
 8001880:	0339      	lsls	r1, r7, #12
 8001882:	4313      	orrs	r3, r2
 8001884:	0a49      	lsrs	r1, r1, #9
 8001886:	00e2      	lsls	r2, r4, #3
 8001888:	0f44      	lsrs	r4, r0, #29
 800188a:	4321      	orrs	r1, r4
 800188c:	4cc2      	ldr	r4, [pc, #776]	; (8001b98 <__aeabi_dsub+0x334>)
 800188e:	4691      	mov	r9, r2
 8001890:	4692      	mov	sl, r2
 8001892:	00c0      	lsls	r0, r0, #3
 8001894:	007a      	lsls	r2, r7, #1
 8001896:	4680      	mov	r8, r0
 8001898:	0d76      	lsrs	r6, r6, #21
 800189a:	0d52      	lsrs	r2, r2, #21
 800189c:	0fff      	lsrs	r7, r7, #31
 800189e:	42a2      	cmp	r2, r4
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dsub+0x40>
 80018a2:	e0b4      	b.n	8001a0e <__aeabi_dsub+0x1aa>
 80018a4:	2401      	movs	r4, #1
 80018a6:	4067      	eors	r7, r4
 80018a8:	46bb      	mov	fp, r7
 80018aa:	42bd      	cmp	r5, r7
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dsub+0x4c>
 80018ae:	e088      	b.n	80019c2 <__aeabi_dsub+0x15e>
 80018b0:	1ab4      	subs	r4, r6, r2
 80018b2:	46a4      	mov	ip, r4
 80018b4:	2c00      	cmp	r4, #0
 80018b6:	dc00      	bgt.n	80018ba <__aeabi_dsub+0x56>
 80018b8:	e0b2      	b.n	8001a20 <__aeabi_dsub+0x1bc>
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dsub+0x5c>
 80018be:	e0c5      	b.n	8001a4c <__aeabi_dsub+0x1e8>
 80018c0:	4ab5      	ldr	r2, [pc, #724]	; (8001b98 <__aeabi_dsub+0x334>)
 80018c2:	4296      	cmp	r6, r2
 80018c4:	d100      	bne.n	80018c8 <__aeabi_dsub+0x64>
 80018c6:	e28b      	b.n	8001de0 <__aeabi_dsub+0x57c>
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	0412      	lsls	r2, r2, #16
 80018cc:	4311      	orrs	r1, r2
 80018ce:	4662      	mov	r2, ip
 80018d0:	2a38      	cmp	r2, #56	; 0x38
 80018d2:	dd00      	ble.n	80018d6 <__aeabi_dsub+0x72>
 80018d4:	e1a1      	b.n	8001c1a <__aeabi_dsub+0x3b6>
 80018d6:	2a1f      	cmp	r2, #31
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dsub+0x78>
 80018da:	e216      	b.n	8001d0a <__aeabi_dsub+0x4a6>
 80018dc:	2720      	movs	r7, #32
 80018de:	000c      	movs	r4, r1
 80018e0:	1abf      	subs	r7, r7, r2
 80018e2:	40bc      	lsls	r4, r7
 80018e4:	0002      	movs	r2, r0
 80018e6:	46a0      	mov	r8, r4
 80018e8:	4664      	mov	r4, ip
 80018ea:	40b8      	lsls	r0, r7
 80018ec:	40e2      	lsrs	r2, r4
 80018ee:	4644      	mov	r4, r8
 80018f0:	4314      	orrs	r4, r2
 80018f2:	0002      	movs	r2, r0
 80018f4:	1e50      	subs	r0, r2, #1
 80018f6:	4182      	sbcs	r2, r0
 80018f8:	4660      	mov	r0, ip
 80018fa:	40c1      	lsrs	r1, r0
 80018fc:	4322      	orrs	r2, r4
 80018fe:	1a5b      	subs	r3, r3, r1
 8001900:	4649      	mov	r1, r9
 8001902:	1a8c      	subs	r4, r1, r2
 8001904:	45a1      	cmp	r9, r4
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	4698      	mov	r8, r3
 800190e:	4643      	mov	r3, r8
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	d400      	bmi.n	8001916 <__aeabi_dsub+0xb2>
 8001914:	e117      	b.n	8001b46 <__aeabi_dsub+0x2e2>
 8001916:	4643      	mov	r3, r8
 8001918:	025b      	lsls	r3, r3, #9
 800191a:	0a5b      	lsrs	r3, r3, #9
 800191c:	4698      	mov	r8, r3
 800191e:	4643      	mov	r3, r8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0xc2>
 8001924:	e16c      	b.n	8001c00 <__aeabi_dsub+0x39c>
 8001926:	4640      	mov	r0, r8
 8001928:	f000 fc64 	bl	80021f4 <__clzsi2>
 800192c:	0002      	movs	r2, r0
 800192e:	3a08      	subs	r2, #8
 8001930:	2120      	movs	r1, #32
 8001932:	0020      	movs	r0, r4
 8001934:	4643      	mov	r3, r8
 8001936:	1a89      	subs	r1, r1, r2
 8001938:	4093      	lsls	r3, r2
 800193a:	40c8      	lsrs	r0, r1
 800193c:	4094      	lsls	r4, r2
 800193e:	4303      	orrs	r3, r0
 8001940:	4296      	cmp	r6, r2
 8001942:	dd00      	ble.n	8001946 <__aeabi_dsub+0xe2>
 8001944:	e157      	b.n	8001bf6 <__aeabi_dsub+0x392>
 8001946:	1b96      	subs	r6, r2, r6
 8001948:	1c71      	adds	r1, r6, #1
 800194a:	291f      	cmp	r1, #31
 800194c:	dd00      	ble.n	8001950 <__aeabi_dsub+0xec>
 800194e:	e1cb      	b.n	8001ce8 <__aeabi_dsub+0x484>
 8001950:	2220      	movs	r2, #32
 8001952:	0018      	movs	r0, r3
 8001954:	0026      	movs	r6, r4
 8001956:	1a52      	subs	r2, r2, r1
 8001958:	4094      	lsls	r4, r2
 800195a:	4090      	lsls	r0, r2
 800195c:	40ce      	lsrs	r6, r1
 800195e:	40cb      	lsrs	r3, r1
 8001960:	1e62      	subs	r2, r4, #1
 8001962:	4194      	sbcs	r4, r2
 8001964:	4330      	orrs	r0, r6
 8001966:	4698      	mov	r8, r3
 8001968:	2600      	movs	r6, #0
 800196a:	4304      	orrs	r4, r0
 800196c:	0763      	lsls	r3, r4, #29
 800196e:	d009      	beq.n	8001984 <__aeabi_dsub+0x120>
 8001970:	230f      	movs	r3, #15
 8001972:	4023      	ands	r3, r4
 8001974:	2b04      	cmp	r3, #4
 8001976:	d005      	beq.n	8001984 <__aeabi_dsub+0x120>
 8001978:	1d23      	adds	r3, r4, #4
 800197a:	42a3      	cmp	r3, r4
 800197c:	41a4      	sbcs	r4, r4
 800197e:	4264      	negs	r4, r4
 8001980:	44a0      	add	r8, r4
 8001982:	001c      	movs	r4, r3
 8001984:	4643      	mov	r3, r8
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	d400      	bmi.n	800198c <__aeabi_dsub+0x128>
 800198a:	e0df      	b.n	8001b4c <__aeabi_dsub+0x2e8>
 800198c:	4b82      	ldr	r3, [pc, #520]	; (8001b98 <__aeabi_dsub+0x334>)
 800198e:	3601      	adds	r6, #1
 8001990:	429e      	cmp	r6, r3
 8001992:	d100      	bne.n	8001996 <__aeabi_dsub+0x132>
 8001994:	e0fb      	b.n	8001b8e <__aeabi_dsub+0x32a>
 8001996:	4642      	mov	r2, r8
 8001998:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <__aeabi_dsub+0x338>)
 800199a:	08e4      	lsrs	r4, r4, #3
 800199c:	401a      	ands	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	0571      	lsls	r1, r6, #21
 80019a2:	0752      	lsls	r2, r2, #29
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	4322      	orrs	r2, r4
 80019a8:	0b1b      	lsrs	r3, r3, #12
 80019aa:	0d49      	lsrs	r1, r1, #21
 80019ac:	0509      	lsls	r1, r1, #20
 80019ae:	07ed      	lsls	r5, r5, #31
 80019b0:	4319      	orrs	r1, r3
 80019b2:	4329      	orrs	r1, r5
 80019b4:	0010      	movs	r0, r2
 80019b6:	bcf0      	pop	{r4, r5, r6, r7}
 80019b8:	46bb      	mov	fp, r7
 80019ba:	46b2      	mov	sl, r6
 80019bc:	46a9      	mov	r9, r5
 80019be:	46a0      	mov	r8, r4
 80019c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c2:	1ab4      	subs	r4, r6, r2
 80019c4:	46a4      	mov	ip, r4
 80019c6:	2c00      	cmp	r4, #0
 80019c8:	dd58      	ble.n	8001a7c <__aeabi_dsub+0x218>
 80019ca:	2a00      	cmp	r2, #0
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x16c>
 80019ce:	e09e      	b.n	8001b0e <__aeabi_dsub+0x2aa>
 80019d0:	4a71      	ldr	r2, [pc, #452]	; (8001b98 <__aeabi_dsub+0x334>)
 80019d2:	4296      	cmp	r6, r2
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x174>
 80019d6:	e13b      	b.n	8001c50 <__aeabi_dsub+0x3ec>
 80019d8:	2280      	movs	r2, #128	; 0x80
 80019da:	0412      	lsls	r2, r2, #16
 80019dc:	4311      	orrs	r1, r2
 80019de:	4662      	mov	r2, ip
 80019e0:	2a38      	cmp	r2, #56	; 0x38
 80019e2:	dd00      	ble.n	80019e6 <__aeabi_dsub+0x182>
 80019e4:	e0c1      	b.n	8001b6a <__aeabi_dsub+0x306>
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dc00      	bgt.n	80019ec <__aeabi_dsub+0x188>
 80019ea:	e1bb      	b.n	8001d64 <__aeabi_dsub+0x500>
 80019ec:	000c      	movs	r4, r1
 80019ee:	3a20      	subs	r2, #32
 80019f0:	40d4      	lsrs	r4, r2
 80019f2:	0022      	movs	r2, r4
 80019f4:	4664      	mov	r4, ip
 80019f6:	2c20      	cmp	r4, #32
 80019f8:	d004      	beq.n	8001a04 <__aeabi_dsub+0x1a0>
 80019fa:	2740      	movs	r7, #64	; 0x40
 80019fc:	1b3f      	subs	r7, r7, r4
 80019fe:	40b9      	lsls	r1, r7
 8001a00:	4308      	orrs	r0, r1
 8001a02:	4680      	mov	r8, r0
 8001a04:	4644      	mov	r4, r8
 8001a06:	1e61      	subs	r1, r4, #1
 8001a08:	418c      	sbcs	r4, r1
 8001a0a:	4314      	orrs	r4, r2
 8001a0c:	e0b1      	b.n	8001b72 <__aeabi_dsub+0x30e>
 8001a0e:	000c      	movs	r4, r1
 8001a10:	4304      	orrs	r4, r0
 8001a12:	d02a      	beq.n	8001a6a <__aeabi_dsub+0x206>
 8001a14:	46bb      	mov	fp, r7
 8001a16:	42bd      	cmp	r5, r7
 8001a18:	d02d      	beq.n	8001a76 <__aeabi_dsub+0x212>
 8001a1a:	4c61      	ldr	r4, [pc, #388]	; (8001ba0 <__aeabi_dsub+0x33c>)
 8001a1c:	46a4      	mov	ip, r4
 8001a1e:	44b4      	add	ip, r6
 8001a20:	4664      	mov	r4, ip
 8001a22:	2c00      	cmp	r4, #0
 8001a24:	d05c      	beq.n	8001ae0 <__aeabi_dsub+0x27c>
 8001a26:	1b94      	subs	r4, r2, r6
 8001a28:	46a4      	mov	ip, r4
 8001a2a:	2e00      	cmp	r6, #0
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dsub+0x1cc>
 8001a2e:	e115      	b.n	8001c5c <__aeabi_dsub+0x3f8>
 8001a30:	464d      	mov	r5, r9
 8001a32:	431d      	orrs	r5, r3
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x1d4>
 8001a36:	e1c3      	b.n	8001dc0 <__aeabi_dsub+0x55c>
 8001a38:	1e65      	subs	r5, r4, #1
 8001a3a:	2c01      	cmp	r4, #1
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x1dc>
 8001a3e:	e20c      	b.n	8001e5a <__aeabi_dsub+0x5f6>
 8001a40:	4e55      	ldr	r6, [pc, #340]	; (8001b98 <__aeabi_dsub+0x334>)
 8001a42:	42b4      	cmp	r4, r6
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x1e4>
 8001a46:	e1f8      	b.n	8001e3a <__aeabi_dsub+0x5d6>
 8001a48:	46ac      	mov	ip, r5
 8001a4a:	e10e      	b.n	8001c6a <__aeabi_dsub+0x406>
 8001a4c:	000a      	movs	r2, r1
 8001a4e:	4302      	orrs	r2, r0
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x1f0>
 8001a52:	e136      	b.n	8001cc2 <__aeabi_dsub+0x45e>
 8001a54:	0022      	movs	r2, r4
 8001a56:	3a01      	subs	r2, #1
 8001a58:	2c01      	cmp	r4, #1
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dsub+0x1fa>
 8001a5c:	e1c6      	b.n	8001dec <__aeabi_dsub+0x588>
 8001a5e:	4c4e      	ldr	r4, [pc, #312]	; (8001b98 <__aeabi_dsub+0x334>)
 8001a60:	45a4      	cmp	ip, r4
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dsub+0x202>
 8001a64:	e0f4      	b.n	8001c50 <__aeabi_dsub+0x3ec>
 8001a66:	4694      	mov	ip, r2
 8001a68:	e731      	b.n	80018ce <__aeabi_dsub+0x6a>
 8001a6a:	2401      	movs	r4, #1
 8001a6c:	4067      	eors	r7, r4
 8001a6e:	46bb      	mov	fp, r7
 8001a70:	42bd      	cmp	r5, r7
 8001a72:	d000      	beq.n	8001a76 <__aeabi_dsub+0x212>
 8001a74:	e71c      	b.n	80018b0 <__aeabi_dsub+0x4c>
 8001a76:	4c4a      	ldr	r4, [pc, #296]	; (8001ba0 <__aeabi_dsub+0x33c>)
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44b4      	add	ip, r6
 8001a7c:	4664      	mov	r4, ip
 8001a7e:	2c00      	cmp	r4, #0
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x220>
 8001a82:	e0cf      	b.n	8001c24 <__aeabi_dsub+0x3c0>
 8001a84:	1b94      	subs	r4, r2, r6
 8001a86:	46a4      	mov	ip, r4
 8001a88:	2e00      	cmp	r6, #0
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0x22a>
 8001a8c:	e15c      	b.n	8001d48 <__aeabi_dsub+0x4e4>
 8001a8e:	4e42      	ldr	r6, [pc, #264]	; (8001b98 <__aeabi_dsub+0x334>)
 8001a90:	42b2      	cmp	r2, r6
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dsub+0x232>
 8001a94:	e1ec      	b.n	8001e70 <__aeabi_dsub+0x60c>
 8001a96:	2680      	movs	r6, #128	; 0x80
 8001a98:	0436      	lsls	r6, r6, #16
 8001a9a:	4333      	orrs	r3, r6
 8001a9c:	4664      	mov	r4, ip
 8001a9e:	2c38      	cmp	r4, #56	; 0x38
 8001aa0:	dd00      	ble.n	8001aa4 <__aeabi_dsub+0x240>
 8001aa2:	e1b3      	b.n	8001e0c <__aeabi_dsub+0x5a8>
 8001aa4:	2c1f      	cmp	r4, #31
 8001aa6:	dd00      	ble.n	8001aaa <__aeabi_dsub+0x246>
 8001aa8:	e238      	b.n	8001f1c <__aeabi_dsub+0x6b8>
 8001aaa:	2620      	movs	r6, #32
 8001aac:	1b36      	subs	r6, r6, r4
 8001aae:	001c      	movs	r4, r3
 8001ab0:	40b4      	lsls	r4, r6
 8001ab2:	464f      	mov	r7, r9
 8001ab4:	46a0      	mov	r8, r4
 8001ab6:	4664      	mov	r4, ip
 8001ab8:	40e7      	lsrs	r7, r4
 8001aba:	4644      	mov	r4, r8
 8001abc:	433c      	orrs	r4, r7
 8001abe:	464f      	mov	r7, r9
 8001ac0:	40b7      	lsls	r7, r6
 8001ac2:	003e      	movs	r6, r7
 8001ac4:	1e77      	subs	r7, r6, #1
 8001ac6:	41be      	sbcs	r6, r7
 8001ac8:	4334      	orrs	r4, r6
 8001aca:	4666      	mov	r6, ip
 8001acc:	40f3      	lsrs	r3, r6
 8001ace:	18c9      	adds	r1, r1, r3
 8001ad0:	1824      	adds	r4, r4, r0
 8001ad2:	4284      	cmp	r4, r0
 8001ad4:	419b      	sbcs	r3, r3
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	4698      	mov	r8, r3
 8001ada:	0016      	movs	r6, r2
 8001adc:	4488      	add	r8, r1
 8001ade:	e04e      	b.n	8001b7e <__aeabi_dsub+0x31a>
 8001ae0:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <__aeabi_dsub+0x340>)
 8001ae2:	1c74      	adds	r4, r6, #1
 8001ae4:	4214      	tst	r4, r2
 8001ae6:	d000      	beq.n	8001aea <__aeabi_dsub+0x286>
 8001ae8:	e0d6      	b.n	8001c98 <__aeabi_dsub+0x434>
 8001aea:	464a      	mov	r2, r9
 8001aec:	431a      	orrs	r2, r3
 8001aee:	2e00      	cmp	r6, #0
 8001af0:	d000      	beq.n	8001af4 <__aeabi_dsub+0x290>
 8001af2:	e15b      	b.n	8001dac <__aeabi_dsub+0x548>
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	d100      	bne.n	8001afa <__aeabi_dsub+0x296>
 8001af8:	e1a5      	b.n	8001e46 <__aeabi_dsub+0x5e2>
 8001afa:	000a      	movs	r2, r1
 8001afc:	4302      	orrs	r2, r0
 8001afe:	d000      	beq.n	8001b02 <__aeabi_dsub+0x29e>
 8001b00:	e1bb      	b.n	8001e7a <__aeabi_dsub+0x616>
 8001b02:	464a      	mov	r2, r9
 8001b04:	0759      	lsls	r1, r3, #29
 8001b06:	08d2      	lsrs	r2, r2, #3
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	08db      	lsrs	r3, r3, #3
 8001b0c:	e027      	b.n	8001b5e <__aeabi_dsub+0x2fa>
 8001b0e:	000a      	movs	r2, r1
 8001b10:	4302      	orrs	r2, r0
 8001b12:	d100      	bne.n	8001b16 <__aeabi_dsub+0x2b2>
 8001b14:	e174      	b.n	8001e00 <__aeabi_dsub+0x59c>
 8001b16:	0022      	movs	r2, r4
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	2c01      	cmp	r4, #1
 8001b1c:	d005      	beq.n	8001b2a <__aeabi_dsub+0x2c6>
 8001b1e:	4c1e      	ldr	r4, [pc, #120]	; (8001b98 <__aeabi_dsub+0x334>)
 8001b20:	45a4      	cmp	ip, r4
 8001b22:	d100      	bne.n	8001b26 <__aeabi_dsub+0x2c2>
 8001b24:	e094      	b.n	8001c50 <__aeabi_dsub+0x3ec>
 8001b26:	4694      	mov	ip, r2
 8001b28:	e759      	b.n	80019de <__aeabi_dsub+0x17a>
 8001b2a:	4448      	add	r0, r9
 8001b2c:	4548      	cmp	r0, r9
 8001b2e:	4192      	sbcs	r2, r2
 8001b30:	185b      	adds	r3, r3, r1
 8001b32:	4698      	mov	r8, r3
 8001b34:	0004      	movs	r4, r0
 8001b36:	4252      	negs	r2, r2
 8001b38:	4490      	add	r8, r2
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	2602      	movs	r6, #2
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	d500      	bpl.n	8001b44 <__aeabi_dsub+0x2e0>
 8001b42:	e0c4      	b.n	8001cce <__aeabi_dsub+0x46a>
 8001b44:	3e01      	subs	r6, #1
 8001b46:	0763      	lsls	r3, r4, #29
 8001b48:	d000      	beq.n	8001b4c <__aeabi_dsub+0x2e8>
 8001b4a:	e711      	b.n	8001970 <__aeabi_dsub+0x10c>
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	46b4      	mov	ip, r6
 8001b50:	0759      	lsls	r1, r3, #29
 8001b52:	08e2      	lsrs	r2, r4, #3
 8001b54:	430a      	orrs	r2, r1
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	490f      	ldr	r1, [pc, #60]	; (8001b98 <__aeabi_dsub+0x334>)
 8001b5a:	458c      	cmp	ip, r1
 8001b5c:	d040      	beq.n	8001be0 <__aeabi_dsub+0x37c>
 8001b5e:	4661      	mov	r1, ip
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	0549      	lsls	r1, r1, #21
 8001b64:	0b1b      	lsrs	r3, r3, #12
 8001b66:	0d49      	lsrs	r1, r1, #21
 8001b68:	e720      	b.n	80019ac <__aeabi_dsub+0x148>
 8001b6a:	4301      	orrs	r1, r0
 8001b6c:	000c      	movs	r4, r1
 8001b6e:	1e61      	subs	r1, r4, #1
 8001b70:	418c      	sbcs	r4, r1
 8001b72:	444c      	add	r4, r9
 8001b74:	454c      	cmp	r4, r9
 8001b76:	4192      	sbcs	r2, r2
 8001b78:	4252      	negs	r2, r2
 8001b7a:	4690      	mov	r8, r2
 8001b7c:	4498      	add	r8, r3
 8001b7e:	4643      	mov	r3, r8
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	d5e0      	bpl.n	8001b46 <__aeabi_dsub+0x2e2>
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__aeabi_dsub+0x334>)
 8001b86:	3601      	adds	r6, #1
 8001b88:	429e      	cmp	r6, r3
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x32a>
 8001b8c:	e09f      	b.n	8001cce <__aeabi_dsub+0x46a>
 8001b8e:	0031      	movs	r1, r6
 8001b90:	2300      	movs	r3, #0
 8001b92:	2200      	movs	r2, #0
 8001b94:	e70a      	b.n	80019ac <__aeabi_dsub+0x148>
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	000007ff 	.word	0x000007ff
 8001b9c:	ff7fffff 	.word	0xff7fffff
 8001ba0:	fffff801 	.word	0xfffff801
 8001ba4:	000007fe 	.word	0x000007fe
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x34a>
 8001bac:	e160      	b.n	8001e70 <__aeabi_dsub+0x60c>
 8001bae:	000a      	movs	r2, r1
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	d04d      	beq.n	8001c50 <__aeabi_dsub+0x3ec>
 8001bb4:	464a      	mov	r2, r9
 8001bb6:	075c      	lsls	r4, r3, #29
 8001bb8:	08d2      	lsrs	r2, r2, #3
 8001bba:	4322      	orrs	r2, r4
 8001bbc:	2480      	movs	r4, #128	; 0x80
 8001bbe:	08db      	lsrs	r3, r3, #3
 8001bc0:	0324      	lsls	r4, r4, #12
 8001bc2:	4223      	tst	r3, r4
 8001bc4:	d007      	beq.n	8001bd6 <__aeabi_dsub+0x372>
 8001bc6:	08ce      	lsrs	r6, r1, #3
 8001bc8:	4226      	tst	r6, r4
 8001bca:	d104      	bne.n	8001bd6 <__aeabi_dsub+0x372>
 8001bcc:	465d      	mov	r5, fp
 8001bce:	0033      	movs	r3, r6
 8001bd0:	08c2      	lsrs	r2, r0, #3
 8001bd2:	0749      	lsls	r1, r1, #29
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	0f51      	lsrs	r1, r2, #29
 8001bd8:	00d2      	lsls	r2, r2, #3
 8001bda:	08d2      	lsrs	r2, r2, #3
 8001bdc:	0749      	lsls	r1, r1, #29
 8001bde:	430a      	orrs	r2, r1
 8001be0:	0011      	movs	r1, r2
 8001be2:	4319      	orrs	r1, r3
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dsub+0x384>
 8001be6:	e1c8      	b.n	8001f7a <__aeabi_dsub+0x716>
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	0309      	lsls	r1, r1, #12
 8001bec:	430b      	orrs	r3, r1
 8001bee:	031b      	lsls	r3, r3, #12
 8001bf0:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e4>)
 8001bf2:	0b1b      	lsrs	r3, r3, #12
 8001bf4:	e6da      	b.n	80019ac <__aeabi_dsub+0x148>
 8001bf6:	49d5      	ldr	r1, [pc, #852]	; (8001f4c <__aeabi_dsub+0x6e8>)
 8001bf8:	1ab6      	subs	r6, r6, r2
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	e6b5      	b.n	800196c <__aeabi_dsub+0x108>
 8001c00:	0020      	movs	r0, r4
 8001c02:	f000 faf7 	bl	80021f4 <__clzsi2>
 8001c06:	0002      	movs	r2, r0
 8001c08:	3218      	adds	r2, #24
 8001c0a:	2a1f      	cmp	r2, #31
 8001c0c:	dc00      	bgt.n	8001c10 <__aeabi_dsub+0x3ac>
 8001c0e:	e68f      	b.n	8001930 <__aeabi_dsub+0xcc>
 8001c10:	0023      	movs	r3, r4
 8001c12:	3808      	subs	r0, #8
 8001c14:	4083      	lsls	r3, r0
 8001c16:	2400      	movs	r4, #0
 8001c18:	e692      	b.n	8001940 <__aeabi_dsub+0xdc>
 8001c1a:	4308      	orrs	r0, r1
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	1e50      	subs	r0, r2, #1
 8001c20:	4182      	sbcs	r2, r0
 8001c22:	e66d      	b.n	8001900 <__aeabi_dsub+0x9c>
 8001c24:	4cca      	ldr	r4, [pc, #808]	; (8001f50 <__aeabi_dsub+0x6ec>)
 8001c26:	1c72      	adds	r2, r6, #1
 8001c28:	4222      	tst	r2, r4
 8001c2a:	d000      	beq.n	8001c2e <__aeabi_dsub+0x3ca>
 8001c2c:	e0ad      	b.n	8001d8a <__aeabi_dsub+0x526>
 8001c2e:	464a      	mov	r2, r9
 8001c30:	431a      	orrs	r2, r3
 8001c32:	2e00      	cmp	r6, #0
 8001c34:	d1b8      	bne.n	8001ba8 <__aeabi_dsub+0x344>
 8001c36:	2a00      	cmp	r2, #0
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x3d8>
 8001c3a:	e158      	b.n	8001eee <__aeabi_dsub+0x68a>
 8001c3c:	000a      	movs	r2, r1
 8001c3e:	4302      	orrs	r2, r0
 8001c40:	d000      	beq.n	8001c44 <__aeabi_dsub+0x3e0>
 8001c42:	e159      	b.n	8001ef8 <__aeabi_dsub+0x694>
 8001c44:	464a      	mov	r2, r9
 8001c46:	0759      	lsls	r1, r3, #29
 8001c48:	08d2      	lsrs	r2, r2, #3
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	e786      	b.n	8001b5e <__aeabi_dsub+0x2fa>
 8001c50:	464a      	mov	r2, r9
 8001c52:	0759      	lsls	r1, r3, #29
 8001c54:	08d2      	lsrs	r2, r2, #3
 8001c56:	430a      	orrs	r2, r1
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	e7c1      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001c5c:	4dba      	ldr	r5, [pc, #744]	; (8001f48 <__aeabi_dsub+0x6e4>)
 8001c5e:	42aa      	cmp	r2, r5
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x400>
 8001c62:	e11e      	b.n	8001ea2 <__aeabi_dsub+0x63e>
 8001c64:	2580      	movs	r5, #128	; 0x80
 8001c66:	042d      	lsls	r5, r5, #16
 8001c68:	432b      	orrs	r3, r5
 8001c6a:	4664      	mov	r4, ip
 8001c6c:	2c38      	cmp	r4, #56	; 0x38
 8001c6e:	dc5d      	bgt.n	8001d2c <__aeabi_dsub+0x4c8>
 8001c70:	2c1f      	cmp	r4, #31
 8001c72:	dd00      	ble.n	8001c76 <__aeabi_dsub+0x412>
 8001c74:	e0d0      	b.n	8001e18 <__aeabi_dsub+0x5b4>
 8001c76:	2520      	movs	r5, #32
 8001c78:	4667      	mov	r7, ip
 8001c7a:	1b2d      	subs	r5, r5, r4
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	001c      	movs	r4, r3
 8001c80:	40fe      	lsrs	r6, r7
 8001c82:	40ac      	lsls	r4, r5
 8001c84:	4334      	orrs	r4, r6
 8001c86:	464e      	mov	r6, r9
 8001c88:	40ae      	lsls	r6, r5
 8001c8a:	0035      	movs	r5, r6
 8001c8c:	40fb      	lsrs	r3, r7
 8001c8e:	1e6e      	subs	r6, r5, #1
 8001c90:	41b5      	sbcs	r5, r6
 8001c92:	1ac9      	subs	r1, r1, r3
 8001c94:	432c      	orrs	r4, r5
 8001c96:	e04e      	b.n	8001d36 <__aeabi_dsub+0x4d2>
 8001c98:	464a      	mov	r2, r9
 8001c9a:	1a14      	subs	r4, r2, r0
 8001c9c:	45a1      	cmp	r9, r4
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	4690      	mov	r8, r2
 8001ca4:	1a5f      	subs	r7, r3, r1
 8001ca6:	003a      	movs	r2, r7
 8001ca8:	4647      	mov	r7, r8
 8001caa:	1bd2      	subs	r2, r2, r7
 8001cac:	4690      	mov	r8, r2
 8001cae:	0212      	lsls	r2, r2, #8
 8001cb0:	d500      	bpl.n	8001cb4 <__aeabi_dsub+0x450>
 8001cb2:	e08b      	b.n	8001dcc <__aeabi_dsub+0x568>
 8001cb4:	4642      	mov	r2, r8
 8001cb6:	4322      	orrs	r2, r4
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x458>
 8001cba:	e630      	b.n	800191e <__aeabi_dsub+0xba>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2500      	movs	r5, #0
 8001cc0:	e74d      	b.n	8001b5e <__aeabi_dsub+0x2fa>
 8001cc2:	464a      	mov	r2, r9
 8001cc4:	0759      	lsls	r1, r3, #29
 8001cc6:	08d2      	lsrs	r2, r2, #3
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	08db      	lsrs	r3, r3, #3
 8001ccc:	e744      	b.n	8001b58 <__aeabi_dsub+0x2f4>
 8001cce:	4642      	mov	r2, r8
 8001cd0:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <__aeabi_dsub+0x6e8>)
 8001cd2:	0861      	lsrs	r1, r4, #1
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4014      	ands	r4, r2
 8001cdc:	430c      	orrs	r4, r1
 8001cde:	07da      	lsls	r2, r3, #31
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	4314      	orrs	r4, r2
 8001ce6:	e641      	b.n	800196c <__aeabi_dsub+0x108>
 8001ce8:	001a      	movs	r2, r3
 8001cea:	3e1f      	subs	r6, #31
 8001cec:	40f2      	lsrs	r2, r6
 8001cee:	0016      	movs	r6, r2
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	d003      	beq.n	8001cfc <__aeabi_dsub+0x498>
 8001cf4:	2240      	movs	r2, #64	; 0x40
 8001cf6:	1a51      	subs	r1, r2, r1
 8001cf8:	408b      	lsls	r3, r1
 8001cfa:	431c      	orrs	r4, r3
 8001cfc:	1e62      	subs	r2, r4, #1
 8001cfe:	4194      	sbcs	r4, r2
 8001d00:	2300      	movs	r3, #0
 8001d02:	4334      	orrs	r4, r6
 8001d04:	4698      	mov	r8, r3
 8001d06:	2600      	movs	r6, #0
 8001d08:	e71d      	b.n	8001b46 <__aeabi_dsub+0x2e2>
 8001d0a:	000c      	movs	r4, r1
 8001d0c:	3a20      	subs	r2, #32
 8001d0e:	40d4      	lsrs	r4, r2
 8001d10:	0022      	movs	r2, r4
 8001d12:	4664      	mov	r4, ip
 8001d14:	2c20      	cmp	r4, #32
 8001d16:	d004      	beq.n	8001d22 <__aeabi_dsub+0x4be>
 8001d18:	2740      	movs	r7, #64	; 0x40
 8001d1a:	1b3f      	subs	r7, r7, r4
 8001d1c:	40b9      	lsls	r1, r7
 8001d1e:	4308      	orrs	r0, r1
 8001d20:	4680      	mov	r8, r0
 8001d22:	4644      	mov	r4, r8
 8001d24:	1e61      	subs	r1, r4, #1
 8001d26:	418c      	sbcs	r4, r1
 8001d28:	4322      	orrs	r2, r4
 8001d2a:	e5e9      	b.n	8001900 <__aeabi_dsub+0x9c>
 8001d2c:	464c      	mov	r4, r9
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	001c      	movs	r4, r3
 8001d32:	1e63      	subs	r3, r4, #1
 8001d34:	419c      	sbcs	r4, r3
 8001d36:	1b04      	subs	r4, r0, r4
 8001d38:	42a0      	cmp	r0, r4
 8001d3a:	419b      	sbcs	r3, r3
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	4698      	mov	r8, r3
 8001d42:	465d      	mov	r5, fp
 8001d44:	0016      	movs	r6, r2
 8001d46:	e5e2      	b.n	800190e <__aeabi_dsub+0xaa>
 8001d48:	464e      	mov	r6, r9
 8001d4a:	431e      	orrs	r6, r3
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x4ec>
 8001d4e:	e0ae      	b.n	8001eae <__aeabi_dsub+0x64a>
 8001d50:	1e66      	subs	r6, r4, #1
 8001d52:	2c01      	cmp	r4, #1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x4f4>
 8001d56:	e0fd      	b.n	8001f54 <__aeabi_dsub+0x6f0>
 8001d58:	4f7b      	ldr	r7, [pc, #492]	; (8001f48 <__aeabi_dsub+0x6e4>)
 8001d5a:	42bc      	cmp	r4, r7
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x4fc>
 8001d5e:	e107      	b.n	8001f70 <__aeabi_dsub+0x70c>
 8001d60:	46b4      	mov	ip, r6
 8001d62:	e69b      	b.n	8001a9c <__aeabi_dsub+0x238>
 8001d64:	4664      	mov	r4, ip
 8001d66:	2220      	movs	r2, #32
 8001d68:	1b12      	subs	r2, r2, r4
 8001d6a:	000c      	movs	r4, r1
 8001d6c:	4094      	lsls	r4, r2
 8001d6e:	0007      	movs	r7, r0
 8001d70:	4090      	lsls	r0, r2
 8001d72:	46a0      	mov	r8, r4
 8001d74:	4664      	mov	r4, ip
 8001d76:	1e42      	subs	r2, r0, #1
 8001d78:	4190      	sbcs	r0, r2
 8001d7a:	4662      	mov	r2, ip
 8001d7c:	40e7      	lsrs	r7, r4
 8001d7e:	4644      	mov	r4, r8
 8001d80:	40d1      	lsrs	r1, r2
 8001d82:	433c      	orrs	r4, r7
 8001d84:	4304      	orrs	r4, r0
 8001d86:	185b      	adds	r3, r3, r1
 8001d88:	e6f3      	b.n	8001b72 <__aeabi_dsub+0x30e>
 8001d8a:	4c6f      	ldr	r4, [pc, #444]	; (8001f48 <__aeabi_dsub+0x6e4>)
 8001d8c:	42a2      	cmp	r2, r4
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x52e>
 8001d90:	e0d5      	b.n	8001f3e <__aeabi_dsub+0x6da>
 8001d92:	4448      	add	r0, r9
 8001d94:	185b      	adds	r3, r3, r1
 8001d96:	4548      	cmp	r0, r9
 8001d98:	4189      	sbcs	r1, r1
 8001d9a:	4249      	negs	r1, r1
 8001d9c:	185b      	adds	r3, r3, r1
 8001d9e:	07dc      	lsls	r4, r3, #31
 8001da0:	0840      	lsrs	r0, r0, #1
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	4698      	mov	r8, r3
 8001da6:	0016      	movs	r6, r2
 8001da8:	4304      	orrs	r4, r0
 8001daa:	e6cc      	b.n	8001b46 <__aeabi_dsub+0x2e2>
 8001dac:	2a00      	cmp	r2, #0
 8001dae:	d000      	beq.n	8001db2 <__aeabi_dsub+0x54e>
 8001db0:	e082      	b.n	8001eb8 <__aeabi_dsub+0x654>
 8001db2:	000a      	movs	r2, r1
 8001db4:	4302      	orrs	r2, r0
 8001db6:	d140      	bne.n	8001e3a <__aeabi_dsub+0x5d6>
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	2500      	movs	r5, #0
 8001dbc:	031b      	lsls	r3, r3, #12
 8001dbe:	e713      	b.n	8001be8 <__aeabi_dsub+0x384>
 8001dc0:	074b      	lsls	r3, r1, #29
 8001dc2:	08c2      	lsrs	r2, r0, #3
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	465d      	mov	r5, fp
 8001dc8:	08cb      	lsrs	r3, r1, #3
 8001dca:	e6c5      	b.n	8001b58 <__aeabi_dsub+0x2f4>
 8001dcc:	464a      	mov	r2, r9
 8001dce:	1a84      	subs	r4, r0, r2
 8001dd0:	42a0      	cmp	r0, r4
 8001dd2:	4192      	sbcs	r2, r2
 8001dd4:	1acb      	subs	r3, r1, r3
 8001dd6:	4252      	negs	r2, r2
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	4698      	mov	r8, r3
 8001ddc:	465d      	mov	r5, fp
 8001dde:	e59e      	b.n	800191e <__aeabi_dsub+0xba>
 8001de0:	464a      	mov	r2, r9
 8001de2:	0759      	lsls	r1, r3, #29
 8001de4:	08d2      	lsrs	r2, r2, #3
 8001de6:	430a      	orrs	r2, r1
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	e6f9      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001dec:	464a      	mov	r2, r9
 8001dee:	1a14      	subs	r4, r2, r0
 8001df0:	45a1      	cmp	r9, r4
 8001df2:	4192      	sbcs	r2, r2
 8001df4:	1a5b      	subs	r3, r3, r1
 8001df6:	4252      	negs	r2, r2
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	4698      	mov	r8, r3
 8001dfc:	2601      	movs	r6, #1
 8001dfe:	e586      	b.n	800190e <__aeabi_dsub+0xaa>
 8001e00:	464a      	mov	r2, r9
 8001e02:	0759      	lsls	r1, r3, #29
 8001e04:	08d2      	lsrs	r2, r2, #3
 8001e06:	430a      	orrs	r2, r1
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	e6a5      	b.n	8001b58 <__aeabi_dsub+0x2f4>
 8001e0c:	464c      	mov	r4, r9
 8001e0e:	4323      	orrs	r3, r4
 8001e10:	001c      	movs	r4, r3
 8001e12:	1e63      	subs	r3, r4, #1
 8001e14:	419c      	sbcs	r4, r3
 8001e16:	e65b      	b.n	8001ad0 <__aeabi_dsub+0x26c>
 8001e18:	4665      	mov	r5, ip
 8001e1a:	001e      	movs	r6, r3
 8001e1c:	3d20      	subs	r5, #32
 8001e1e:	40ee      	lsrs	r6, r5
 8001e20:	2c20      	cmp	r4, #32
 8001e22:	d005      	beq.n	8001e30 <__aeabi_dsub+0x5cc>
 8001e24:	2540      	movs	r5, #64	; 0x40
 8001e26:	1b2d      	subs	r5, r5, r4
 8001e28:	40ab      	lsls	r3, r5
 8001e2a:	464c      	mov	r4, r9
 8001e2c:	431c      	orrs	r4, r3
 8001e2e:	46a2      	mov	sl, r4
 8001e30:	4654      	mov	r4, sl
 8001e32:	1e63      	subs	r3, r4, #1
 8001e34:	419c      	sbcs	r4, r3
 8001e36:	4334      	orrs	r4, r6
 8001e38:	e77d      	b.n	8001d36 <__aeabi_dsub+0x4d2>
 8001e3a:	074b      	lsls	r3, r1, #29
 8001e3c:	08c2      	lsrs	r2, r0, #3
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	465d      	mov	r5, fp
 8001e42:	08cb      	lsrs	r3, r1, #3
 8001e44:	e6cc      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001e46:	000a      	movs	r2, r1
 8001e48:	4302      	orrs	r2, r0
 8001e4a:	d100      	bne.n	8001e4e <__aeabi_dsub+0x5ea>
 8001e4c:	e736      	b.n	8001cbc <__aeabi_dsub+0x458>
 8001e4e:	074b      	lsls	r3, r1, #29
 8001e50:	08c2      	lsrs	r2, r0, #3
 8001e52:	431a      	orrs	r2, r3
 8001e54:	465d      	mov	r5, fp
 8001e56:	08cb      	lsrs	r3, r1, #3
 8001e58:	e681      	b.n	8001b5e <__aeabi_dsub+0x2fa>
 8001e5a:	464a      	mov	r2, r9
 8001e5c:	1a84      	subs	r4, r0, r2
 8001e5e:	42a0      	cmp	r0, r4
 8001e60:	4192      	sbcs	r2, r2
 8001e62:	1acb      	subs	r3, r1, r3
 8001e64:	4252      	negs	r2, r2
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	4698      	mov	r8, r3
 8001e6a:	465d      	mov	r5, fp
 8001e6c:	2601      	movs	r6, #1
 8001e6e:	e54e      	b.n	800190e <__aeabi_dsub+0xaa>
 8001e70:	074b      	lsls	r3, r1, #29
 8001e72:	08c2      	lsrs	r2, r0, #3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	08cb      	lsrs	r3, r1, #3
 8001e78:	e6b2      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	1a14      	subs	r4, r2, r0
 8001e7e:	45a1      	cmp	r9, r4
 8001e80:	4192      	sbcs	r2, r2
 8001e82:	1a5f      	subs	r7, r3, r1
 8001e84:	4252      	negs	r2, r2
 8001e86:	1aba      	subs	r2, r7, r2
 8001e88:	4690      	mov	r8, r2
 8001e8a:	0212      	lsls	r2, r2, #8
 8001e8c:	d56b      	bpl.n	8001f66 <__aeabi_dsub+0x702>
 8001e8e:	464a      	mov	r2, r9
 8001e90:	1a84      	subs	r4, r0, r2
 8001e92:	42a0      	cmp	r0, r4
 8001e94:	4192      	sbcs	r2, r2
 8001e96:	1acb      	subs	r3, r1, r3
 8001e98:	4252      	negs	r2, r2
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	465d      	mov	r5, fp
 8001ea0:	e564      	b.n	800196c <__aeabi_dsub+0x108>
 8001ea2:	074b      	lsls	r3, r1, #29
 8001ea4:	08c2      	lsrs	r2, r0, #3
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	465d      	mov	r5, fp
 8001eaa:	08cb      	lsrs	r3, r1, #3
 8001eac:	e698      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001eae:	074b      	lsls	r3, r1, #29
 8001eb0:	08c2      	lsrs	r2, r0, #3
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	08cb      	lsrs	r3, r1, #3
 8001eb6:	e64f      	b.n	8001b58 <__aeabi_dsub+0x2f4>
 8001eb8:	000a      	movs	r2, r1
 8001eba:	4302      	orrs	r2, r0
 8001ebc:	d090      	beq.n	8001de0 <__aeabi_dsub+0x57c>
 8001ebe:	464a      	mov	r2, r9
 8001ec0:	075c      	lsls	r4, r3, #29
 8001ec2:	08d2      	lsrs	r2, r2, #3
 8001ec4:	4314      	orrs	r4, r2
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	0312      	lsls	r2, r2, #12
 8001ecc:	4213      	tst	r3, r2
 8001ece:	d008      	beq.n	8001ee2 <__aeabi_dsub+0x67e>
 8001ed0:	08ce      	lsrs	r6, r1, #3
 8001ed2:	4216      	tst	r6, r2
 8001ed4:	d105      	bne.n	8001ee2 <__aeabi_dsub+0x67e>
 8001ed6:	08c0      	lsrs	r0, r0, #3
 8001ed8:	0749      	lsls	r1, r1, #29
 8001eda:	4308      	orrs	r0, r1
 8001edc:	0004      	movs	r4, r0
 8001ede:	465d      	mov	r5, fp
 8001ee0:	0033      	movs	r3, r6
 8001ee2:	0f61      	lsrs	r1, r4, #29
 8001ee4:	00e2      	lsls	r2, r4, #3
 8001ee6:	0749      	lsls	r1, r1, #29
 8001ee8:	08d2      	lsrs	r2, r2, #3
 8001eea:	430a      	orrs	r2, r1
 8001eec:	e678      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001eee:	074b      	lsls	r3, r1, #29
 8001ef0:	08c2      	lsrs	r2, r0, #3
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	08cb      	lsrs	r3, r1, #3
 8001ef6:	e632      	b.n	8001b5e <__aeabi_dsub+0x2fa>
 8001ef8:	4448      	add	r0, r9
 8001efa:	185b      	adds	r3, r3, r1
 8001efc:	4548      	cmp	r0, r9
 8001efe:	4192      	sbcs	r2, r2
 8001f00:	4698      	mov	r8, r3
 8001f02:	4252      	negs	r2, r2
 8001f04:	4490      	add	r8, r2
 8001f06:	4643      	mov	r3, r8
 8001f08:	0004      	movs	r4, r0
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	d400      	bmi.n	8001f10 <__aeabi_dsub+0x6ac>
 8001f0e:	e61a      	b.n	8001b46 <__aeabi_dsub+0x2e2>
 8001f10:	4642      	mov	r2, r8
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <__aeabi_dsub+0x6e8>)
 8001f14:	2601      	movs	r6, #1
 8001f16:	401a      	ands	r2, r3
 8001f18:	4690      	mov	r8, r2
 8001f1a:	e614      	b.n	8001b46 <__aeabi_dsub+0x2e2>
 8001f1c:	4666      	mov	r6, ip
 8001f1e:	001f      	movs	r7, r3
 8001f20:	3e20      	subs	r6, #32
 8001f22:	40f7      	lsrs	r7, r6
 8001f24:	2c20      	cmp	r4, #32
 8001f26:	d005      	beq.n	8001f34 <__aeabi_dsub+0x6d0>
 8001f28:	2640      	movs	r6, #64	; 0x40
 8001f2a:	1b36      	subs	r6, r6, r4
 8001f2c:	40b3      	lsls	r3, r6
 8001f2e:	464c      	mov	r4, r9
 8001f30:	431c      	orrs	r4, r3
 8001f32:	46a2      	mov	sl, r4
 8001f34:	4654      	mov	r4, sl
 8001f36:	1e63      	subs	r3, r4, #1
 8001f38:	419c      	sbcs	r4, r3
 8001f3a:	433c      	orrs	r4, r7
 8001f3c:	e5c8      	b.n	8001ad0 <__aeabi_dsub+0x26c>
 8001f3e:	0011      	movs	r1, r2
 8001f40:	2300      	movs	r3, #0
 8001f42:	2200      	movs	r2, #0
 8001f44:	e532      	b.n	80019ac <__aeabi_dsub+0x148>
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	000007ff 	.word	0x000007ff
 8001f4c:	ff7fffff 	.word	0xff7fffff
 8001f50:	000007fe 	.word	0x000007fe
 8001f54:	464a      	mov	r2, r9
 8001f56:	1814      	adds	r4, r2, r0
 8001f58:	4284      	cmp	r4, r0
 8001f5a:	4192      	sbcs	r2, r2
 8001f5c:	185b      	adds	r3, r3, r1
 8001f5e:	4698      	mov	r8, r3
 8001f60:	4252      	negs	r2, r2
 8001f62:	4490      	add	r8, r2
 8001f64:	e5e9      	b.n	8001b3a <__aeabi_dsub+0x2d6>
 8001f66:	4642      	mov	r2, r8
 8001f68:	4322      	orrs	r2, r4
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0x70a>
 8001f6c:	e6a6      	b.n	8001cbc <__aeabi_dsub+0x458>
 8001f6e:	e5ea      	b.n	8001b46 <__aeabi_dsub+0x2e2>
 8001f70:	074b      	lsls	r3, r1, #29
 8001f72:	08c2      	lsrs	r2, r0, #3
 8001f74:	431a      	orrs	r2, r3
 8001f76:	08cb      	lsrs	r3, r1, #3
 8001f78:	e632      	b.n	8001be0 <__aeabi_dsub+0x37c>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4901      	ldr	r1, [pc, #4]	; (8001f84 <__aeabi_dsub+0x720>)
 8001f7e:	0013      	movs	r3, r2
 8001f80:	e514      	b.n	80019ac <__aeabi_dsub+0x148>
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	000007ff 	.word	0x000007ff

08001f88 <__aeabi_d2iz>:
 8001f88:	000a      	movs	r2, r1
 8001f8a:	b530      	push	{r4, r5, lr}
 8001f8c:	4c13      	ldr	r4, [pc, #76]	; (8001fdc <__aeabi_d2iz+0x54>)
 8001f8e:	0053      	lsls	r3, r2, #1
 8001f90:	0309      	lsls	r1, r1, #12
 8001f92:	0005      	movs	r5, r0
 8001f94:	0b09      	lsrs	r1, r1, #12
 8001f96:	2000      	movs	r0, #0
 8001f98:	0d5b      	lsrs	r3, r3, #21
 8001f9a:	0fd2      	lsrs	r2, r2, #31
 8001f9c:	42a3      	cmp	r3, r4
 8001f9e:	dd04      	ble.n	8001faa <__aeabi_d2iz+0x22>
 8001fa0:	480f      	ldr	r0, [pc, #60]	; (8001fe0 <__aeabi_d2iz+0x58>)
 8001fa2:	4283      	cmp	r3, r0
 8001fa4:	dd02      	ble.n	8001fac <__aeabi_d2iz+0x24>
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <__aeabi_d2iz+0x5c>)
 8001fa8:	18d0      	adds	r0, r2, r3
 8001faa:	bd30      	pop	{r4, r5, pc}
 8001fac:	2080      	movs	r0, #128	; 0x80
 8001fae:	0340      	lsls	r0, r0, #13
 8001fb0:	4301      	orrs	r1, r0
 8001fb2:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <__aeabi_d2iz+0x60>)
 8001fb4:	1ac0      	subs	r0, r0, r3
 8001fb6:	281f      	cmp	r0, #31
 8001fb8:	dd08      	ble.n	8001fcc <__aeabi_d2iz+0x44>
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <__aeabi_d2iz+0x64>)
 8001fbc:	1ac3      	subs	r3, r0, r3
 8001fbe:	40d9      	lsrs	r1, r3
 8001fc0:	000b      	movs	r3, r1
 8001fc2:	4258      	negs	r0, r3
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d1f0      	bne.n	8001faa <__aeabi_d2iz+0x22>
 8001fc8:	0018      	movs	r0, r3
 8001fca:	e7ee      	b.n	8001faa <__aeabi_d2iz+0x22>
 8001fcc:	4c08      	ldr	r4, [pc, #32]	; (8001ff0 <__aeabi_d2iz+0x68>)
 8001fce:	40c5      	lsrs	r5, r0
 8001fd0:	46a4      	mov	ip, r4
 8001fd2:	4463      	add	r3, ip
 8001fd4:	4099      	lsls	r1, r3
 8001fd6:	000b      	movs	r3, r1
 8001fd8:	432b      	orrs	r3, r5
 8001fda:	e7f2      	b.n	8001fc2 <__aeabi_d2iz+0x3a>
 8001fdc:	000003fe 	.word	0x000003fe
 8001fe0:	0000041d 	.word	0x0000041d
 8001fe4:	7fffffff 	.word	0x7fffffff
 8001fe8:	00000433 	.word	0x00000433
 8001fec:	00000413 	.word	0x00000413
 8001ff0:	fffffbed 	.word	0xfffffbed

08001ff4 <__aeabi_i2d>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d016      	beq.n	8002028 <__aeabi_i2d+0x34>
 8001ffa:	17c3      	asrs	r3, r0, #31
 8001ffc:	18c5      	adds	r5, r0, r3
 8001ffe:	405d      	eors	r5, r3
 8002000:	0fc4      	lsrs	r4, r0, #31
 8002002:	0028      	movs	r0, r5
 8002004:	f000 f8f6 	bl	80021f4 <__clzsi2>
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <__aeabi_i2d+0x5c>)
 800200a:	1a12      	subs	r2, r2, r0
 800200c:	280a      	cmp	r0, #10
 800200e:	dc16      	bgt.n	800203e <__aeabi_i2d+0x4a>
 8002010:	0003      	movs	r3, r0
 8002012:	002e      	movs	r6, r5
 8002014:	3315      	adds	r3, #21
 8002016:	409e      	lsls	r6, r3
 8002018:	230b      	movs	r3, #11
 800201a:	1a18      	subs	r0, r3, r0
 800201c:	40c5      	lsrs	r5, r0
 800201e:	0553      	lsls	r3, r2, #21
 8002020:	032d      	lsls	r5, r5, #12
 8002022:	0b2d      	lsrs	r5, r5, #12
 8002024:	0d5b      	lsrs	r3, r3, #21
 8002026:	e003      	b.n	8002030 <__aeabi_i2d+0x3c>
 8002028:	2400      	movs	r4, #0
 800202a:	2300      	movs	r3, #0
 800202c:	2500      	movs	r5, #0
 800202e:	2600      	movs	r6, #0
 8002030:	051b      	lsls	r3, r3, #20
 8002032:	432b      	orrs	r3, r5
 8002034:	07e4      	lsls	r4, r4, #31
 8002036:	4323      	orrs	r3, r4
 8002038:	0030      	movs	r0, r6
 800203a:	0019      	movs	r1, r3
 800203c:	bd70      	pop	{r4, r5, r6, pc}
 800203e:	380b      	subs	r0, #11
 8002040:	4085      	lsls	r5, r0
 8002042:	0553      	lsls	r3, r2, #21
 8002044:	032d      	lsls	r5, r5, #12
 8002046:	2600      	movs	r6, #0
 8002048:	0b2d      	lsrs	r5, r5, #12
 800204a:	0d5b      	lsrs	r3, r3, #21
 800204c:	e7f0      	b.n	8002030 <__aeabi_i2d+0x3c>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	0000041e 	.word	0x0000041e

08002054 <__aeabi_f2d>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	0043      	lsls	r3, r0, #1
 8002058:	0246      	lsls	r6, r0, #9
 800205a:	0fc4      	lsrs	r4, r0, #31
 800205c:	20fe      	movs	r0, #254	; 0xfe
 800205e:	0e1b      	lsrs	r3, r3, #24
 8002060:	1c59      	adds	r1, r3, #1
 8002062:	0a75      	lsrs	r5, r6, #9
 8002064:	4208      	tst	r0, r1
 8002066:	d00c      	beq.n	8002082 <__aeabi_f2d+0x2e>
 8002068:	22e0      	movs	r2, #224	; 0xe0
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4694      	mov	ip, r2
 800206e:	076d      	lsls	r5, r5, #29
 8002070:	0b36      	lsrs	r6, r6, #12
 8002072:	4463      	add	r3, ip
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	4333      	orrs	r3, r6
 8002078:	07e4      	lsls	r4, r4, #31
 800207a:	4323      	orrs	r3, r4
 800207c:	0028      	movs	r0, r5
 800207e:	0019      	movs	r1, r3
 8002080:	bd70      	pop	{r4, r5, r6, pc}
 8002082:	2b00      	cmp	r3, #0
 8002084:	d114      	bne.n	80020b0 <__aeabi_f2d+0x5c>
 8002086:	2d00      	cmp	r5, #0
 8002088:	d01b      	beq.n	80020c2 <__aeabi_f2d+0x6e>
 800208a:	0028      	movs	r0, r5
 800208c:	f000 f8b2 	bl	80021f4 <__clzsi2>
 8002090:	280a      	cmp	r0, #10
 8002092:	dc1c      	bgt.n	80020ce <__aeabi_f2d+0x7a>
 8002094:	230b      	movs	r3, #11
 8002096:	002a      	movs	r2, r5
 8002098:	1a1b      	subs	r3, r3, r0
 800209a:	40da      	lsrs	r2, r3
 800209c:	0003      	movs	r3, r0
 800209e:	3315      	adds	r3, #21
 80020a0:	409d      	lsls	r5, r3
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <__aeabi_f2d+0x88>)
 80020a4:	0312      	lsls	r2, r2, #12
 80020a6:	1a1b      	subs	r3, r3, r0
 80020a8:	055b      	lsls	r3, r3, #21
 80020aa:	0b16      	lsrs	r6, r2, #12
 80020ac:	0d5b      	lsrs	r3, r3, #21
 80020ae:	e7e1      	b.n	8002074 <__aeabi_f2d+0x20>
 80020b0:	2d00      	cmp	r5, #0
 80020b2:	d009      	beq.n	80020c8 <__aeabi_f2d+0x74>
 80020b4:	0b32      	lsrs	r2, r6, #12
 80020b6:	2680      	movs	r6, #128	; 0x80
 80020b8:	0336      	lsls	r6, r6, #12
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <__aeabi_f2d+0x8c>)
 80020bc:	076d      	lsls	r5, r5, #29
 80020be:	4316      	orrs	r6, r2
 80020c0:	e7d8      	b.n	8002074 <__aeabi_f2d+0x20>
 80020c2:	2300      	movs	r3, #0
 80020c4:	2600      	movs	r6, #0
 80020c6:	e7d5      	b.n	8002074 <__aeabi_f2d+0x20>
 80020c8:	2600      	movs	r6, #0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <__aeabi_f2d+0x8c>)
 80020cc:	e7d2      	b.n	8002074 <__aeabi_f2d+0x20>
 80020ce:	0003      	movs	r3, r0
 80020d0:	002a      	movs	r2, r5
 80020d2:	3b0b      	subs	r3, #11
 80020d4:	409a      	lsls	r2, r3
 80020d6:	2500      	movs	r5, #0
 80020d8:	e7e3      	b.n	80020a2 <__aeabi_f2d+0x4e>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	00000389 	.word	0x00000389
 80020e0:	000007ff 	.word	0x000007ff

080020e4 <__aeabi_d2f>:
 80020e4:	0002      	movs	r2, r0
 80020e6:	004b      	lsls	r3, r1, #1
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	0308      	lsls	r0, r1, #12
 80020ec:	0d5b      	lsrs	r3, r3, #21
 80020ee:	4e3d      	ldr	r6, [pc, #244]	; (80021e4 <__aeabi_d2f+0x100>)
 80020f0:	0fcc      	lsrs	r4, r1, #31
 80020f2:	0a40      	lsrs	r0, r0, #9
 80020f4:	0f51      	lsrs	r1, r2, #29
 80020f6:	1c5f      	adds	r7, r3, #1
 80020f8:	4308      	orrs	r0, r1
 80020fa:	00d5      	lsls	r5, r2, #3
 80020fc:	4237      	tst	r7, r6
 80020fe:	d00a      	beq.n	8002116 <__aeabi_d2f+0x32>
 8002100:	4939      	ldr	r1, [pc, #228]	; (80021e8 <__aeabi_d2f+0x104>)
 8002102:	185e      	adds	r6, r3, r1
 8002104:	2efe      	cmp	r6, #254	; 0xfe
 8002106:	dd16      	ble.n	8002136 <__aeabi_d2f+0x52>
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	2100      	movs	r1, #0
 800210c:	05db      	lsls	r3, r3, #23
 800210e:	430b      	orrs	r3, r1
 8002110:	07e0      	lsls	r0, r4, #31
 8002112:	4318      	orrs	r0, r3
 8002114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <__aeabi_d2f+0x44>
 800211a:	4328      	orrs	r0, r5
 800211c:	d027      	beq.n	800216e <__aeabi_d2f+0x8a>
 800211e:	2105      	movs	r1, #5
 8002120:	0189      	lsls	r1, r1, #6
 8002122:	0a49      	lsrs	r1, r1, #9
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e7f1      	b.n	800210c <__aeabi_d2f+0x28>
 8002128:	4305      	orrs	r5, r0
 800212a:	d0ed      	beq.n	8002108 <__aeabi_d2f+0x24>
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	03c9      	lsls	r1, r1, #15
 8002130:	23ff      	movs	r3, #255	; 0xff
 8002132:	4301      	orrs	r1, r0
 8002134:	e7ea      	b.n	800210c <__aeabi_d2f+0x28>
 8002136:	2e00      	cmp	r6, #0
 8002138:	dd1c      	ble.n	8002174 <__aeabi_d2f+0x90>
 800213a:	0192      	lsls	r2, r2, #6
 800213c:	0011      	movs	r1, r2
 800213e:	1e4a      	subs	r2, r1, #1
 8002140:	4191      	sbcs	r1, r2
 8002142:	00c0      	lsls	r0, r0, #3
 8002144:	0f6d      	lsrs	r5, r5, #29
 8002146:	4301      	orrs	r1, r0
 8002148:	4329      	orrs	r1, r5
 800214a:	074b      	lsls	r3, r1, #29
 800214c:	d048      	beq.n	80021e0 <__aeabi_d2f+0xfc>
 800214e:	230f      	movs	r3, #15
 8002150:	400b      	ands	r3, r1
 8002152:	2b04      	cmp	r3, #4
 8002154:	d000      	beq.n	8002158 <__aeabi_d2f+0x74>
 8002156:	3104      	adds	r1, #4
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	04db      	lsls	r3, r3, #19
 800215c:	400b      	ands	r3, r1
 800215e:	d03f      	beq.n	80021e0 <__aeabi_d2f+0xfc>
 8002160:	1c72      	adds	r2, r6, #1
 8002162:	2efe      	cmp	r6, #254	; 0xfe
 8002164:	d0d0      	beq.n	8002108 <__aeabi_d2f+0x24>
 8002166:	0189      	lsls	r1, r1, #6
 8002168:	0a49      	lsrs	r1, r1, #9
 800216a:	b2d3      	uxtb	r3, r2
 800216c:	e7ce      	b.n	800210c <__aeabi_d2f+0x28>
 800216e:	2300      	movs	r3, #0
 8002170:	2100      	movs	r1, #0
 8002172:	e7cb      	b.n	800210c <__aeabi_d2f+0x28>
 8002174:	0032      	movs	r2, r6
 8002176:	3217      	adds	r2, #23
 8002178:	db22      	blt.n	80021c0 <__aeabi_d2f+0xdc>
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	221e      	movs	r2, #30
 800217e:	0409      	lsls	r1, r1, #16
 8002180:	4308      	orrs	r0, r1
 8002182:	1b92      	subs	r2, r2, r6
 8002184:	2a1f      	cmp	r2, #31
 8002186:	dd1d      	ble.n	80021c4 <__aeabi_d2f+0xe0>
 8002188:	2102      	movs	r1, #2
 800218a:	4249      	negs	r1, r1
 800218c:	1b8e      	subs	r6, r1, r6
 800218e:	0001      	movs	r1, r0
 8002190:	40f1      	lsrs	r1, r6
 8002192:	000e      	movs	r6, r1
 8002194:	2a20      	cmp	r2, #32
 8002196:	d004      	beq.n	80021a2 <__aeabi_d2f+0xbe>
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <__aeabi_d2f+0x108>)
 800219a:	4694      	mov	ip, r2
 800219c:	4463      	add	r3, ip
 800219e:	4098      	lsls	r0, r3
 80021a0:	4305      	orrs	r5, r0
 80021a2:	0029      	movs	r1, r5
 80021a4:	1e4d      	subs	r5, r1, #1
 80021a6:	41a9      	sbcs	r1, r5
 80021a8:	4331      	orrs	r1, r6
 80021aa:	2600      	movs	r6, #0
 80021ac:	074b      	lsls	r3, r1, #29
 80021ae:	d1ce      	bne.n	800214e <__aeabi_d2f+0x6a>
 80021b0:	2080      	movs	r0, #128	; 0x80
 80021b2:	000b      	movs	r3, r1
 80021b4:	04c0      	lsls	r0, r0, #19
 80021b6:	2201      	movs	r2, #1
 80021b8:	4003      	ands	r3, r0
 80021ba:	4201      	tst	r1, r0
 80021bc:	d1d3      	bne.n	8002166 <__aeabi_d2f+0x82>
 80021be:	e7af      	b.n	8002120 <__aeabi_d2f+0x3c>
 80021c0:	2300      	movs	r3, #0
 80021c2:	e7ac      	b.n	800211e <__aeabi_d2f+0x3a>
 80021c4:	490a      	ldr	r1, [pc, #40]	; (80021f0 <__aeabi_d2f+0x10c>)
 80021c6:	468c      	mov	ip, r1
 80021c8:	0029      	movs	r1, r5
 80021ca:	4463      	add	r3, ip
 80021cc:	40d1      	lsrs	r1, r2
 80021ce:	409d      	lsls	r5, r3
 80021d0:	000a      	movs	r2, r1
 80021d2:	0029      	movs	r1, r5
 80021d4:	4098      	lsls	r0, r3
 80021d6:	1e4d      	subs	r5, r1, #1
 80021d8:	41a9      	sbcs	r1, r5
 80021da:	4301      	orrs	r1, r0
 80021dc:	4311      	orrs	r1, r2
 80021de:	e7e4      	b.n	80021aa <__aeabi_d2f+0xc6>
 80021e0:	0033      	movs	r3, r6
 80021e2:	e79d      	b.n	8002120 <__aeabi_d2f+0x3c>
 80021e4:	000007fe 	.word	0x000007fe
 80021e8:	fffffc80 	.word	0xfffffc80
 80021ec:	fffffca2 	.word	0xfffffca2
 80021f0:	fffffc82 	.word	0xfffffc82

080021f4 <__clzsi2>:
 80021f4:	211c      	movs	r1, #28
 80021f6:	2301      	movs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4298      	cmp	r0, r3
 80021fc:	d301      	bcc.n	8002202 <__clzsi2+0xe>
 80021fe:	0c00      	lsrs	r0, r0, #16
 8002200:	3910      	subs	r1, #16
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	4298      	cmp	r0, r3
 8002206:	d301      	bcc.n	800220c <__clzsi2+0x18>
 8002208:	0a00      	lsrs	r0, r0, #8
 800220a:	3908      	subs	r1, #8
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	4298      	cmp	r0, r3
 8002210:	d301      	bcc.n	8002216 <__clzsi2+0x22>
 8002212:	0900      	lsrs	r0, r0, #4
 8002214:	3904      	subs	r1, #4
 8002216:	a202      	add	r2, pc, #8	; (adr r2, 8002220 <__clzsi2+0x2c>)
 8002218:	5c10      	ldrb	r0, [r2, r0]
 800221a:	1840      	adds	r0, r0, r1
 800221c:	4770      	bx	lr
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	02020304 	.word	0x02020304
 8002224:	01010101 	.word	0x01010101
	...

08002230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002234:	f000 fa4a 	bl	80026cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002238:	f000 f8a2 	bl	8002380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223c:	f000 f940 	bl	80024c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002240:	f000 f8f6 	bl	8002430 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	ti = HAL_GetTick();
 8002244:	f000 fa9c 	bl	8002780 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	001a      	movs	r2, r3
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <main+0x10c>)
 800224e:	601a      	str	r2, [r3, #0]
	dac_voltage = 3.3/2*sin(2*M_PI*1000*t) + 3.3/2;
 8002250:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <main+0x110>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	1c18      	adds	r0, r3, #0
 8002256:	f7ff fefd 	bl	8002054 <__aeabi_f2d>
 800225a:	4a3a      	ldr	r2, [pc, #232]	; (8002344 <main+0x114>)
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <main+0x118>)
 800225e:	f7ff f895 	bl	800138c <__aeabi_dmul>
 8002262:	0002      	movs	r2, r0
 8002264:	000b      	movs	r3, r1
 8002266:	0010      	movs	r0, r2
 8002268:	0019      	movs	r1, r3
 800226a:	f003 f8c9 	bl	8005400 <sin>
 800226e:	4a37      	ldr	r2, [pc, #220]	; (800234c <main+0x11c>)
 8002270:	4b37      	ldr	r3, [pc, #220]	; (8002350 <main+0x120>)
 8002272:	f7ff f88b 	bl	800138c <__aeabi_dmul>
 8002276:	0002      	movs	r2, r0
 8002278:	000b      	movs	r3, r1
 800227a:	0010      	movs	r0, r2
 800227c:	0019      	movs	r1, r3
 800227e:	4a33      	ldr	r2, [pc, #204]	; (800234c <main+0x11c>)
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <main+0x120>)
 8002282:	f7fe f913 	bl	80004ac <__aeabi_dadd>
 8002286:	0002      	movs	r2, r0
 8002288:	000b      	movs	r3, r1
 800228a:	0010      	movs	r0, r2
 800228c:	0019      	movs	r1, r3
 800228e:	f7ff ff29 	bl	80020e4 <__aeabi_d2f>
 8002292:	1c02      	adds	r2, r0, #0
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <main+0x124>)
 8002296:	601a      	str	r2, [r3, #0]
	dac_bits = dac_voltage/3.3 * 4095;
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <main+0x124>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	1c18      	adds	r0, r3, #0
 800229e:	f7ff fed9 	bl	8002054 <__aeabi_f2d>
 80022a2:	4a2a      	ldr	r2, [pc, #168]	; (800234c <main+0x11c>)
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <main+0x128>)
 80022a6:	f7fe fc6b 	bl	8000b80 <__aeabi_ddiv>
 80022aa:	0002      	movs	r2, r0
 80022ac:	000b      	movs	r3, r1
 80022ae:	0010      	movs	r0, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	2200      	movs	r2, #0
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <main+0x12c>)
 80022b6:	f7ff f869 	bl	800138c <__aeabi_dmul>
 80022ba:	0002      	movs	r2, r0
 80022bc:	000b      	movs	r3, r1
 80022be:	0010      	movs	r0, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	f7fe f8d5 	bl	8000470 <__aeabi_d2uiz>
 80022c6:	0003      	movs	r3, r0
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <main+0x130>)
 80022cc:	801a      	strh	r2, [r3, #0]

	buffer[0] = dac_bits >> 8;
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <main+0x130>)
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <main+0x134>)
 80022da:	701a      	strb	r2, [r3, #0]
	buffer[1] = dac_bits;
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <main+0x130>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <main+0x134>)
 80022e4:	705a      	strb	r2, [r3, #1]

	tf = HAL_GetTick();
 80022e6:	f000 fa4b 	bl	8002780 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	001a      	movs	r2, r3
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <main+0x138>)
 80022f0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c1, dac_converter_address, buffer, 3);
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <main+0x13c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b299      	uxth	r1, r3
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <main+0x134>)
 80022fa:	481d      	ldr	r0, [pc, #116]	; (8002370 <main+0x140>)
 80022fc:	2303      	movs	r3, #3
 80022fe:	f000 fda3 	bl	8002e48 <HAL_I2C_Master_Transmit_IT>
	delta =tf-ti;
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <main+0x138>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <main+0x10c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1ad2      	subs	r2, r2, r3
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <main+0x144>)
 800230e:	601a      	str	r2, [r3, #0]
	t += 0.0001;
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <main+0x110>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	1c18      	adds	r0, r3, #0
 8002316:	f7ff fe9d 	bl	8002054 <__aeabi_f2d>
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <main+0x148>)
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <main+0x14c>)
 800231e:	f7fe f8c5 	bl	80004ac <__aeabi_dadd>
 8002322:	0002      	movs	r2, r0
 8002324:	000b      	movs	r3, r1
 8002326:	0010      	movs	r0, r2
 8002328:	0019      	movs	r1, r3
 800232a:	f7ff fedb 	bl	80020e4 <__aeabi_d2f>
 800232e:	1c02      	adds	r2, r0, #0
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <main+0x110>)
 8002332:	601a      	str	r2, [r3, #0]
	HAL_Delay(0.0001);
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fa2d 	bl	8002794 <HAL_Delay>
	ti = HAL_GetTick();
 800233a:	e783      	b.n	8002244 <main+0x14>
 800233c:	20000038 	.word	0x20000038
 8002340:	20000034 	.word	0x20000034
 8002344:	704a9409 	.word	0x704a9409
 8002348:	40b88b2f 	.word	0x40b88b2f
 800234c:	66666666 	.word	0x66666666
 8002350:	3ffa6666 	.word	0x3ffa6666
 8002354:	20000004 	.word	0x20000004
 8002358:	400a6666 	.word	0x400a6666
 800235c:	40affe00 	.word	0x40affe00
 8002360:	20000030 	.word	0x20000030
 8002364:	20000098 	.word	0x20000098
 8002368:	2000003c 	.word	0x2000003c
 800236c:	20000000 	.word	0x20000000
 8002370:	20000044 	.word	0x20000044
 8002374:	20000040 	.word	0x20000040
 8002378:	eb1c432d 	.word	0xeb1c432d
 800237c:	3f1a36e2 	.word	0x3f1a36e2

08002380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b095      	sub	sp, #84	; 0x54
 8002384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002386:	2420      	movs	r4, #32
 8002388:	193b      	adds	r3, r7, r4
 800238a:	0018      	movs	r0, r3
 800238c:	2330      	movs	r3, #48	; 0x30
 800238e:	001a      	movs	r2, r3
 8002390:	2100      	movs	r1, #0
 8002392:	f003 f82d 	bl	80053f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002396:	2310      	movs	r3, #16
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	0018      	movs	r0, r3
 800239c:	2310      	movs	r3, #16
 800239e:	001a      	movs	r2, r3
 80023a0:	2100      	movs	r1, #0
 80023a2:	f003 f825 	bl	80053f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a6:	003b      	movs	r3, r7
 80023a8:	0018      	movs	r0, r3
 80023aa:	2310      	movs	r3, #16
 80023ac:	001a      	movs	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f003 f81e 	bl	80053f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023b4:	0021      	movs	r1, r4
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2202      	movs	r2, #2
 80023ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2201      	movs	r2, #1
 80023c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023c2:	187b      	adds	r3, r7, r1
 80023c4:	2210      	movs	r2, #16
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	0018      	movs	r0, r3
 80023d2:	f002 fadd 	bl	8004990 <HAL_RCC_OscConfig>
 80023d6:	1e03      	subs	r3, r0, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023da:	f000 f897 	bl	800250c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023de:	2110      	movs	r1, #16
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	2207      	movs	r2, #7
 80023e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2100      	movs	r1, #0
 80023fc:	0018      	movs	r0, r3
 80023fe:	f002 fde1 	bl	8004fc4 <HAL_RCC_ClockConfig>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d001      	beq.n	800240a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002406:	f000 f881 	bl	800250c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800240a:	003b      	movs	r3, r7
 800240c:	2220      	movs	r2, #32
 800240e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002410:	003b      	movs	r3, r7
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002416:	003b      	movs	r3, r7
 8002418:	0018      	movs	r0, r3
 800241a:	f002 fef7 	bl	800520c <HAL_RCCEx_PeriphCLKConfig>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002422:	f000 f873 	bl	800250c <Error_Handler>
  }
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b015      	add	sp, #84	; 0x54
 800242c:	bd90      	pop	{r4, r7, pc}
	...

08002430 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <MX_I2C1_Init+0x80>)
 8002436:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <MX_I2C1_Init+0x84>)
 8002438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_I2C1_Init+0x80>)
 800243c:	2201      	movs	r2, #1
 800243e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_I2C1_Init+0x80>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_I2C1_Init+0x80>)
 8002448:	2201      	movs	r2, #1
 800244a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_I2C1_Init+0x80>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_I2C1_Init+0x80>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_I2C1_Init+0x80>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_I2C1_Init+0x80>)
 8002460:	2200      	movs	r2, #0
 8002462:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_I2C1_Init+0x80>)
 8002466:	2200      	movs	r2, #0
 8002468:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_I2C1_Init+0x80>)
 800246c:	0018      	movs	r0, r3
 800246e:	f000 fc55 	bl	8002d1c <HAL_I2C_Init>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002476:	f000 f849 	bl	800250c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <MX_I2C1_Init+0x80>)
 800247c:	2100      	movs	r1, #0
 800247e:	0018      	movs	r0, r3
 8002480:	f002 f9ee 	bl	8004860 <HAL_I2CEx_ConfigAnalogFilter>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d001      	beq.n	800248c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002488:	f000 f840 	bl	800250c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_I2C1_Init+0x80>)
 800248e:	2100      	movs	r1, #0
 8002490:	0018      	movs	r0, r3
 8002492:	f002 fa31 	bl	80048f8 <HAL_I2CEx_ConfigDigitalFilter>
 8002496:	1e03      	subs	r3, r0, #0
 8002498:	d001      	beq.n	800249e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800249a:	f000 f837 	bl	800250c <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_I2C1_Init+0x88>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <MX_I2C1_Init+0x88>)
 80024a4:	4905      	ldr	r1, [pc, #20]	; (80024bc <MX_I2C1_Init+0x8c>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000044 	.word	0x20000044
 80024b4:	40005400 	.word	0x40005400
 80024b8:	40010000 	.word	0x40010000
 80024bc:	aaaa0100 	.word	0xaaaa0100

080024c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <MX_GPIO_Init+0x48>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_GPIO_Init+0x48>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0289      	lsls	r1, r1, #10
 80024d0:	430a      	orrs	r2, r1
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_GPIO_Init+0x48>)
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_GPIO_Init+0x48>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_GPIO_Init+0x48>)
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	02c9      	lsls	r1, r1, #11
 80024ec:	430a      	orrs	r2, r1
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <MX_GPIO_Init+0x48>)
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	02db      	lsls	r3, r3, #11
 80024f8:	4013      	ands	r3, r2
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]

}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	40021000 	.word	0x40021000

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
}
 8002512:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002514:	e7fe      	b.n	8002514 <Error_Handler+0x8>
	...

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_MspInit+0x44>)
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_MspInit+0x44>)
 8002524:	2101      	movs	r1, #1
 8002526:	430a      	orrs	r2, r1
 8002528:	619a      	str	r2, [r3, #24]
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_MspInit+0x44>)
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_MspInit+0x44>)
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_MspInit+0x44>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0549      	lsls	r1, r1, #21
 8002540:	430a      	orrs	r2, r1
 8002542:	61da      	str	r2, [r3, #28]
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_MspInit+0x44>)
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	055b      	lsls	r3, r3, #21
 800254c:	4013      	ands	r3, r2
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b08b      	sub	sp, #44	; 0x2c
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	2414      	movs	r4, #20
 800256a:	193b      	adds	r3, r7, r4
 800256c:	0018      	movs	r0, r3
 800256e:	2314      	movs	r3, #20
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f002 ff3c 	bl	80053f0 <memset>
  if(hi2c->Instance==I2C1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a20      	ldr	r2, [pc, #128]	; (8002600 <HAL_I2C_MspInit+0xa0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d139      	bne.n	80025f6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_I2C_MspInit+0xa4>)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_I2C_MspInit+0xa4>)
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	02c9      	lsls	r1, r1, #11
 800258c:	430a      	orrs	r2, r1
 800258e:	615a      	str	r2, [r3, #20]
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <HAL_I2C_MspInit+0xa4>)
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	02db      	lsls	r3, r3, #11
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800259e:	0021      	movs	r1, r4
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	22c0      	movs	r2, #192	; 0xc0
 80025a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2212      	movs	r2, #18
 80025aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2203      	movs	r2, #3
 80025b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2201      	movs	r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_I2C_MspInit+0xa8>)
 80025c2:	0019      	movs	r1, r3
 80025c4:	0010      	movs	r0, r2
 80025c6:	f000 fa39 	bl	8002a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_I2C_MspInit+0xa4>)
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_I2C_MspInit+0xa4>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0389      	lsls	r1, r1, #14
 80025d4:	430a      	orrs	r2, r1
 80025d6:	61da      	str	r2, [r3, #28]
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_I2C_MspInit+0xa4>)
 80025da:	69da      	ldr	r2, [r3, #28]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	039b      	lsls	r3, r3, #14
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2017      	movs	r0, #23
 80025ec:	f000 f9a2 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80025f0:	2017      	movs	r0, #23
 80025f2:	f000 f9b4 	bl	800295e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b00b      	add	sp, #44	; 0x2c
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	40005400 	.word	0x40005400
 8002604:	40021000 	.word	0x40021000
 8002608:	48000400 	.word	0x48000400

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <NMI_Handler+0x4>

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002630:	f000 f894 	bl	800275c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <I2C1_IRQHandler+0x2c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	23e0      	movs	r3, #224	; 0xe0
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4013      	ands	r3, r2
 800264c:	d004      	beq.n	8002658 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <I2C1_IRQHandler+0x2c>)
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fc8f 	bl	8002f74 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002656:	e003      	b.n	8002660 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <I2C1_IRQHandler+0x2c>)
 800265a:	0018      	movs	r0, r3
 800265c:	f000 fc70 	bl	8002f40 <HAL_I2C_EV_IRQHandler>
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20000044 	.word	0x20000044

0800266c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800267a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800267c:	f7ff fff6 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002682:	490d      	ldr	r1, [pc, #52]	; (80026b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <LoopForever+0xe>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <LoopForever+0x16>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026a6:	f002 fe7f 	bl	80053a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026aa:	f7ff fdc1 	bl	8002230 <main>

080026ae <LoopForever>:

LoopForever:
    b LoopForever
 80026ae:	e7fe      	b.n	80026ae <LoopForever>
  ldr   r0, =_estack
 80026b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80026bc:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 80026c0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80026c4:	200000a4 	.word	0x200000a4

080026c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_IRQHandler>
	...

080026cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_Init+0x24>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_Init+0x24>)
 80026d6:	2110      	movs	r1, #16
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80026dc:	2003      	movs	r0, #3
 80026de:	f000 f809 	bl	80026f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e2:	f7ff ff19 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_InitTick+0x5c>)
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_InitTick+0x60>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	0019      	movs	r1, r3
 8002706:	23fa      	movs	r3, #250	; 0xfa
 8002708:	0098      	lsls	r0, r3, #2
 800270a:	f7fd fcfd 	bl	8000108 <__udivsi3>
 800270e:	0003      	movs	r3, r0
 8002710:	0019      	movs	r1, r3
 8002712:	0020      	movs	r0, r4
 8002714:	f7fd fcf8 	bl	8000108 <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f92f 	bl	800297e <HAL_SYSTICK_Config>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d80b      	bhi.n	8002746 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	2301      	movs	r3, #1
 8002732:	425b      	negs	r3, r3
 8002734:	2200      	movs	r2, #0
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f8fc 	bl	8002934 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_InitTick+0x64>)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b003      	add	sp, #12
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	20000008 	.word	0x20000008
 8002754:	20000010 	.word	0x20000010
 8002758:	2000000c 	.word	0x2000000c

0800275c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_IncTick+0x1c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	001a      	movs	r2, r3
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_IncTick+0x20>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	18d2      	adds	r2, r2, r3
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_IncTick+0x20>)
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000010 	.word	0x20000010
 800277c:	200000a0 	.word	0x200000a0

08002780 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b02      	ldr	r3, [pc, #8]	; (8002790 <HAL_GetTick+0x10>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	200000a0 	.word	0x200000a0

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff fff0 	bl	8002780 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	001a      	movs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	f7ff ffe0 	bl	8002780 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000010 	.word	0x20000010

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	0002      	movs	r2, r0
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b7f      	cmp	r3, #127	; 0x7f
 80027ee:	d809      	bhi.n	8002804 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	001a      	movs	r2, r3
 80027f6:	231f      	movs	r3, #31
 80027f8:	401a      	ands	r2, r3
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_EnableIRQ+0x30>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	4091      	lsls	r1, r2
 8002800:	000a      	movs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
  }
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}
 800280c:	e000e100 	.word	0xe000e100

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	0002      	movs	r2, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b7f      	cmp	r3, #127	; 0x7f
 8002824:	d828      	bhi.n	8002878 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <__NVIC_SetPriority+0xd4>)
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b25b      	sxtb	r3, r3
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	33c0      	adds	r3, #192	; 0xc0
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	589b      	ldr	r3, [r3, r2]
 8002836:	1dfa      	adds	r2, r7, #7
 8002838:	7812      	ldrb	r2, [r2, #0]
 800283a:	0011      	movs	r1, r2
 800283c:	2203      	movs	r2, #3
 800283e:	400a      	ands	r2, r1
 8002840:	00d2      	lsls	r2, r2, #3
 8002842:	21ff      	movs	r1, #255	; 0xff
 8002844:	4091      	lsls	r1, r2
 8002846:	000a      	movs	r2, r1
 8002848:	43d2      	mvns	r2, r2
 800284a:	401a      	ands	r2, r3
 800284c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	401a      	ands	r2, r3
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	0018      	movs	r0, r3
 800285c:	2303      	movs	r3, #3
 800285e:	4003      	ands	r3, r0
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002864:	481f      	ldr	r0, [pc, #124]	; (80028e4 <__NVIC_SetPriority+0xd4>)
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b25b      	sxtb	r3, r3
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	430a      	orrs	r2, r1
 8002870:	33c0      	adds	r3, #192	; 0xc0
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002876:	e031      	b.n	80028dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002878:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <__NVIC_SetPriority+0xd8>)
 800287a:	1dfb      	adds	r3, r7, #7
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	0019      	movs	r1, r3
 8002880:	230f      	movs	r3, #15
 8002882:	400b      	ands	r3, r1
 8002884:	3b08      	subs	r3, #8
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3306      	adds	r3, #6
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	18d3      	adds	r3, r2, r3
 800288e:	3304      	adds	r3, #4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1dfa      	adds	r2, r7, #7
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	0011      	movs	r1, r2
 8002898:	2203      	movs	r2, #3
 800289a:	400a      	ands	r2, r1
 800289c:	00d2      	lsls	r2, r2, #3
 800289e:	21ff      	movs	r1, #255	; 0xff
 80028a0:	4091      	lsls	r1, r2
 80028a2:	000a      	movs	r2, r1
 80028a4:	43d2      	mvns	r2, r2
 80028a6:	401a      	ands	r2, r3
 80028a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	401a      	ands	r2, r3
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	0018      	movs	r0, r3
 80028b8:	2303      	movs	r3, #3
 80028ba:	4003      	ands	r3, r0
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028c0:	4809      	ldr	r0, [pc, #36]	; (80028e8 <__NVIC_SetPriority+0xd8>)
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	001c      	movs	r4, r3
 80028c8:	230f      	movs	r3, #15
 80028ca:	4023      	ands	r3, r4
 80028cc:	3b08      	subs	r3, #8
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	430a      	orrs	r2, r1
 80028d2:	3306      	adds	r3, #6
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	18c3      	adds	r3, r0, r3
 80028d8:	3304      	adds	r3, #4
 80028da:	601a      	str	r2, [r3, #0]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b003      	add	sp, #12
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1e5a      	subs	r2, r3, #1
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	045b      	lsls	r3, r3, #17
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d301      	bcc.n	8002904 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002900:	2301      	movs	r3, #1
 8002902:	e010      	b.n	8002926 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <SysTick_Config+0x44>)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	3a01      	subs	r2, #1
 800290a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290c:	2301      	movs	r3, #1
 800290e:	425b      	negs	r3, r3
 8002910:	2103      	movs	r1, #3
 8002912:	0018      	movs	r0, r3
 8002914:	f7ff ff7c 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <SysTick_Config+0x44>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <SysTick_Config+0x44>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002924:	2300      	movs	r3, #0
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	210f      	movs	r1, #15
 8002940:	187b      	adds	r3, r7, r1
 8002942:	1c02      	adds	r2, r0, #0
 8002944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	187b      	adds	r3, r7, r1
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	b25b      	sxtb	r3, r3
 800294e:	0011      	movs	r1, r2
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff ff5d 	bl	8002810 <__NVIC_SetPriority>
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	0002      	movs	r2, r0
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296a:	1dfb      	adds	r3, r7, #7
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b25b      	sxtb	r3, r3
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff ff33 	bl	80027dc <__NVIC_EnableIRQ>
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff ffaf 	bl	80028ec <SysTick_Config>
 800298e:	0003      	movs	r3, r0
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	210f      	movs	r1, #15
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2221      	movs	r2, #33	; 0x21
 80029ac:	5c9b      	ldrb	r3, [r3, r2]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d006      	beq.n	80029c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2204      	movs	r2, #4
 80029b8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e028      	b.n	8002a14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	210e      	movs	r1, #14
 80029ce:	438a      	bics	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2101      	movs	r1, #1
 80029de:	438a      	bics	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2101      	movs	r1, #1
 80029ec:	4091      	lsls	r1, r2
 80029ee:	000a      	movs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	0010      	movs	r0, r2
 8002a12:	4798      	blx	r3
    }
  }
  return status;
 8002a14:	230f      	movs	r3, #15
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	781b      	ldrb	r3, [r3, #0]
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2221      	movs	r2, #33	; 0x21
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	b2db      	uxtb	r3, r3
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4a:	e14f      	b.n	8002cec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4091      	lsls	r1, r2
 8002a56:	000a      	movs	r2, r1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d100      	bne.n	8002a64 <HAL_GPIO_Init+0x28>
 8002a62:	e140      	b.n	8002ce6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d005      	beq.n	8002a7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2203      	movs	r2, #3
 8002a76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d130      	bne.n	8002ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	0013      	movs	r3, r2
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	0013      	movs	r3, r2
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	0013      	movs	r3, r2
 8002aba:	43da      	mvns	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	2201      	movs	r2, #1
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	0013      	movs	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d017      	beq.n	8002b1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	43da      	mvns	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d123      	bne.n	8002b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	58d3      	ldr	r3, [r2, r3]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2207      	movs	r2, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	43da      	mvns	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2107      	movs	r1, #7
 8002b52:	400b      	ands	r3, r1
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	6939      	ldr	r1, [r7, #16]
 8002b6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	23c0      	movs	r3, #192	; 0xc0
 8002ba8:	029b      	lsls	r3, r3, #10
 8002baa:	4013      	ands	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <HAL_GPIO_Init+0x174>
 8002bae:	e09a      	b.n	8002ce6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb0:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	619a      	str	r2, [r3, #24]
 8002bbc:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <HAL_GPIO_Init+0x2c8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_GPIO_Init+0x2cc>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	589b      	ldr	r3, [r3, r2]
 8002bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	4013      	ands	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	409a      	lsls	r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	43da      	mvns	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	2390      	movs	r3, #144	; 0x90
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x1e2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <HAL_GPIO_Init+0x2d0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x1de>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <HAL_GPIO_Init+0x2d4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x1da>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a42      	ldr	r2, [pc, #264]	; (8002d14 <HAL_GPIO_Init+0x2d8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x1d6>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x1e4>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	2103      	movs	r1, #3
 8002c24:	400a      	ands	r2, r1
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_GPIO_Init+0x2cc>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	43da      	mvns	r2, r3
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	035b      	lsls	r3, r3, #13
 8002c56:	4013      	ands	r3, r2
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c62:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	039b      	lsls	r3, r3, #14
 8002c80:	4013      	ands	r3, r2
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	029b      	lsls	r3, r3, #10
 8002caa:	4013      	ands	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	025b      	lsls	r3, r3, #9
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_GPIO_Init+0x2dc>)
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	40da      	lsrs	r2, r3
 8002cf4:	1e13      	subs	r3, r2, #0
 8002cf6:	d000      	beq.n	8002cfa <HAL_GPIO_Init+0x2be>
 8002cf8:	e6a8      	b.n	8002a4c <HAL_GPIO_Init+0x10>
  } 
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	48000400 	.word	0x48000400
 8002d10:	48000800 	.word	0x48000800
 8002d14:	48000c00 	.word	0x48000c00
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e082      	b.n	8002e34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2241      	movs	r2, #65	; 0x41
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d107      	bne.n	8002d4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fc0b 	bl	8002560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2241      	movs	r2, #65	; 0x41
 8002d4e:	2124      	movs	r1, #36	; 0x24
 8002d50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	438a      	bics	r2, r1
 8002d60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4934      	ldr	r1, [pc, #208]	; (8002e3c <HAL_I2C_Init+0x120>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4931      	ldr	r1, [pc, #196]	; (8002e40 <HAL_I2C_Init+0x124>)
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d108      	bne.n	8002d9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0209      	lsls	r1, r1, #8
 8002d94:	430a      	orrs	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e007      	b.n	8002daa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2184      	movs	r1, #132	; 0x84
 8002da4:	0209      	lsls	r1, r1, #8
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d104      	bne.n	8002dbc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	491f      	ldr	r1, [pc, #124]	; (8002e44 <HAL_I2C_Init+0x128>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	491a      	ldr	r1, [pc, #104]	; (8002e40 <HAL_I2C_Init+0x124>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69d9      	ldr	r1, [r3, #28]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1a      	ldr	r2, [r3, #32]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2241      	movs	r2, #65	; 0x41
 8002e20:	2120      	movs	r1, #32
 8002e22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2242      	movs	r2, #66	; 0x42
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	f0ffffff 	.word	0xf0ffffff
 8002e40:	ffff7fff 	.word	0xffff7fff
 8002e44:	02008000 	.word	0x02008000

08002e48 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	0008      	movs	r0, r1
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	0019      	movs	r1, r3
 8002e56:	230a      	movs	r3, #10
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	1c02      	adds	r2, r0, #0
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	2308      	movs	r3, #8
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	1c0a      	adds	r2, r1, #0
 8002e64:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2241      	movs	r2, #65	; 0x41
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d15b      	bne.n	8002f2a <HAL_I2C_Master_Transmit_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Master_Transmit_IT+0x42>
    {
      return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
 8002e88:	e050      	b.n	8002f2c <HAL_I2C_Master_Transmit_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	5c9b      	ldrb	r3, [r3, r2]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_I2C_Master_Transmit_IT+0x50>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e049      	b.n	8002f2c <HAL_I2C_Master_Transmit_IT+0xe4>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2241      	movs	r2, #65	; 0x41
 8002ea4:	2121      	movs	r1, #33	; 0x21
 8002ea6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2242      	movs	r2, #66	; 0x42
 8002eac:	2110      	movs	r1, #16
 8002eae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	18ba      	adds	r2, r7, r2
 8002ec2:	8812      	ldrh	r2, [r2, #0]
 8002ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_I2C_Master_Transmit_IT+0xec>)
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_I2C_Master_Transmit_IT+0xf0>)
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2bff      	cmp	r3, #255	; 0xff
 8002eda:	d906      	bls.n	8002eea <HAL_I2C_Master_Transmit_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	045b      	lsls	r3, r3, #17
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e007      	b.n	8002efa <HAL_I2C_Master_Transmit_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	049b      	lsls	r3, r3, #18
 8002ef8:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	697c      	ldr	r4, [r7, #20]
 8002f02:	230a      	movs	r3, #10
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	8819      	ldrh	r1, [r3, #0]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_I2C_Master_Transmit_IT+0xf4>)
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	0023      	movs	r3, r4
 8002f10:	f001 fb7a 	bl	8004608 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	2100      	movs	r1, #0
 8002f1a:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2101      	movs	r1, #1
 8002f20:	0018      	movs	r0, r3
 8002f22:	f001 fbab 	bl	800467c <I2C_Enable_IRQ>

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_I2C_Master_Transmit_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b007      	add	sp, #28
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	ffff0000 	.word	0xffff0000
 8002f38:	080030e9 	.word	0x080030e9
 8002f3c:	80002000 	.word	0x80002000

08002f40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
  }
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	001a      	movs	r2, r3
 8002f92:	2301      	movs	r3, #1
 8002f94:	4013      	ands	r3, r2
 8002f96:	d010      	beq.n	8002fba <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	09db      	lsrs	r3, r3, #7
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002fa2:	d00a      	beq.n	8002fba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	2201      	movs	r2, #1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	0052      	lsls	r2, r2, #1
 8002fb8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	0a9b      	lsrs	r3, r3, #10
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d010      	beq.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	09db      	lsrs	r3, r3, #7
 8002fca:	001a      	movs	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	0a5b      	lsrs	r3, r3, #9
 8002fec:	001a      	movs	r2, r3
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d010      	beq.n	8003016 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	09db      	lsrs	r3, r3, #7
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ffe:	d00a      	beq.n	8003016 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	2202      	movs	r2, #2
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	220b      	movs	r2, #11
 8003020:	4013      	ands	r3, r2
 8003022:	d005      	beq.n	8003030 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0011      	movs	r1, r2
 800302a:	0018      	movs	r0, r3
 800302c:	f001 f980 	bl	8004330 <I2C_ITError>
  }
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b006      	add	sp, #24
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b002      	add	sp, #8
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	0008      	movs	r0, r1
 8003082:	0011      	movs	r1, r2
 8003084:	1cfb      	adds	r3, r7, #3
 8003086:	1c02      	adds	r2, r0, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	003b      	movs	r3, r7
 800308c:	1c0a      	adds	r2, r1, #0
 800308e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <I2C_Master_ISR_IT+0x1e>
 8003102:	2302      	movs	r3, #2
 8003104:	e12b      	b.n	800335e <I2C_Master_ISR_IT+0x276>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	001a      	movs	r2, r3
 8003114:	2301      	movs	r3, #1
 8003116:	4013      	ands	r3, r2
 8003118:	d014      	beq.n	8003144 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	001a      	movs	r2, r3
 8003120:	2301      	movs	r3, #1
 8003122:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003124:	d00e      	beq.n	8003144 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2210      	movs	r2, #16
 800312c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	2204      	movs	r2, #4
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0018      	movs	r0, r3
 800313e:	f001 fa22 	bl	8004586 <I2C_Flush_TXDR>
 8003142:	e0f5      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	001a      	movs	r2, r3
 800314a:	2301      	movs	r3, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d023      	beq.n	8003198 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	001a      	movs	r2, r3
 8003156:	2301      	movs	r3, #1
 8003158:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800315a:	d01d      	beq.n	8003198 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2204      	movs	r2, #4
 8003160:	4393      	bics	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003196:	e0cb      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	001a      	movs	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	d01e      	beq.n	80031e2 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	001a      	movs	r2, r3
 80031aa:	2301      	movs	r3, #1
 80031ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031ae:	d018      	beq.n	80031e2 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031e0:	e0a6      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	09db      	lsrs	r3, r3, #7
 80031e6:	001a      	movs	r2, r3
 80031e8:	2301      	movs	r3, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d100      	bne.n	80031f0 <I2C_Master_ISR_IT+0x108>
 80031ee:	e06b      	b.n	80032c8 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	001a      	movs	r2, r3
 80031f6:	2301      	movs	r3, #1
 80031f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80031fa:	d065      	beq.n	80032c8 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d04a      	beq.n	800329c <I2C_Master_ISR_IT+0x1b4>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	d146      	bne.n	800329c <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	b29a      	uxth	r2, r3
 8003216:	2112      	movs	r1, #18
 8003218:	187b      	adds	r3, r7, r1
 800321a:	0592      	lsls	r2, r2, #22
 800321c:	0d92      	lsrs	r2, r2, #22
 800321e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2bff      	cmp	r3, #255	; 0xff
 8003228:	d910      	bls.n	800324c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	045c      	lsls	r4, r3, #17
 800323a:	187b      	adds	r3, r7, r1
 800323c:	8819      	ldrh	r1, [r3, #0]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	0023      	movs	r3, r4
 8003246:	f001 f9df 	bl	8004608 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324a:	e03c      	b.n	80032c6 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4a43      	ldr	r2, [pc, #268]	; (8003368 <I2C_Master_ISR_IT+0x280>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00e      	beq.n	800327e <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800326a:	2312      	movs	r3, #18
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	8819      	ldrh	r1, [r3, #0]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	0023      	movs	r3, r4
 8003278:	f001 f9c6 	bl	8004608 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800327c:	e023      	b.n	80032c6 <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	b2da      	uxtb	r2, r3
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	049c      	lsls	r4, r3, #18
 8003288:	2312      	movs	r3, #18
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	8819      	ldrh	r1, [r3, #0]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	2300      	movs	r3, #0
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	0023      	movs	r3, r4
 8003296:	f001 f9b7 	bl	8004608 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329a:	e014      	b.n	80032c6 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	049b      	lsls	r3, r3, #18
 80032a6:	401a      	ands	r2, r3
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	049b      	lsls	r3, r3, #18
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d004      	beq.n	80032ba <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 fd44 	bl	8003d40 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b8:	e03a      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2140      	movs	r1, #64	; 0x40
 80032be:	0018      	movs	r0, r3
 80032c0:	f001 f836 	bl	8004330 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032c4:	e034      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
 80032c6:	e033      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	001a      	movs	r2, r3
 80032ce:	2301      	movs	r3, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d02d      	beq.n	8003330 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	001a      	movs	r2, r3
 80032da:	2301      	movs	r3, #1
 80032dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80032de:	d027      	beq.n	8003330 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11d      	bne.n	8003326 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	049b      	lsls	r3, r3, #18
 80032f4:	401a      	ands	r2, r3
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	049b      	lsls	r3, r3, #18
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d018      	beq.n	8003330 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	4a19      	ldr	r2, [pc, #100]	; (8003368 <I2C_Master_ISR_IT+0x280>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d109      	bne.n	800331c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	01c9      	lsls	r1, r1, #7
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	e009      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 fd0e 	bl	8003d40 <I2C_ITMasterSeqCplt>
 8003324:	e004      	b.n	8003330 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	0018      	movs	r0, r3
 800332c:	f001 f800 	bl	8004330 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	001a      	movs	r2, r3
 8003336:	2301      	movs	r3, #1
 8003338:	4013      	ands	r3, r2
 800333a:	d00b      	beq.n	8003354 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	001a      	movs	r2, r3
 8003342:	2301      	movs	r3, #1
 8003344:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003346:	d005      	beq.n	8003354 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	0011      	movs	r1, r2
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fd9e 	bl	8003e90 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	2100      	movs	r1, #0
 800335a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b007      	add	sp, #28
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	ffff0000 	.word	0xffff0000

0800336c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2240      	movs	r2, #64	; 0x40
 8003386:	5c9b      	ldrb	r3, [r3, r2]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <I2C_Slave_ISR_IT+0x24>
 800338c:	2302      	movs	r3, #2
 800338e:	e0fa      	b.n	8003586 <I2C_Slave_ISR_IT+0x21a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	2101      	movs	r1, #1
 8003396:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	001a      	movs	r2, r3
 800339e:	2301      	movs	r3, #1
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00b      	beq.n	80033bc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	001a      	movs	r2, r3
 80033aa:	2301      	movs	r3, #1
 80033ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033ae:	d005      	beq.n	80033bc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 fe3c 	bl	8004034 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	001a      	movs	r2, r3
 80033c2:	2301      	movs	r3, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	d054      	beq.n	8003472 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	001a      	movs	r2, r3
 80033ce:	2301      	movs	r3, #1
 80033d0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033d2:	d04e      	beq.n	8003472 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d12d      	bne.n	800343a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2241      	movs	r2, #65	; 0x41
 80033e2:	5c9b      	ldrb	r3, [r3, r2]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b28      	cmp	r3, #40	; 0x28
 80033e8:	d10b      	bne.n	8003402 <I2C_Slave_ISR_IT+0x96>
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	049b      	lsls	r3, r3, #18
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d106      	bne.n	8003402 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0011      	movs	r1, r2
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 ff3e 	bl	800427c <I2C_ITListenCplt>
 8003400:	e036      	b.n	8003470 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2241      	movs	r2, #65	; 0x41
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b29      	cmp	r3, #41	; 0x29
 800340c:	d110      	bne.n	8003430 <I2C_Slave_ISR_IT+0xc4>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4a5f      	ldr	r2, [pc, #380]	; (8003590 <I2C_Slave_ISR_IT+0x224>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00c      	beq.n	8003430 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2210      	movs	r2, #16
 800341c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	0018      	movs	r0, r3
 8003422:	f001 f8b0 	bl	8004586 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fccb 	bl	8003dc4 <I2C_ITSlaveSeqCplt>
 800342e:	e01f      	b.n	8003470 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003438:	e09d      	b.n	8003576 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2210      	movs	r2, #16
 8003440:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	2204      	movs	r2, #4
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <I2C_Slave_ISR_IT+0xf4>
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	045b      	lsls	r3, r3, #17
 800345a:	429a      	cmp	r2, r3
 800345c:	d000      	beq.n	8003460 <I2C_Slave_ISR_IT+0xf4>
 800345e:	e08a      	b.n	8003576 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f000 ff61 	bl	8004330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800346e:	e082      	b.n	8003576 <I2C_Slave_ISR_IT+0x20a>
 8003470:	e081      	b.n	8003576 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	001a      	movs	r2, r3
 8003478:	2301      	movs	r3, #1
 800347a:	4013      	ands	r3, r2
 800347c:	d031      	beq.n	80034e2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	001a      	movs	r2, r3
 8003484:	2301      	movs	r3, #1
 8003486:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003488:	d02b      	beq.n	80034e2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d018      	beq.n	80034c6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d154      	bne.n	800357a <I2C_Slave_ISR_IT+0x20e>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4a2f      	ldr	r2, [pc, #188]	; (8003590 <I2C_Slave_ISR_IT+0x224>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d050      	beq.n	800357a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fc72 	bl	8003dc4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034e0:	e04b      	b.n	800357a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	08db      	lsrs	r3, r3, #3
 80034e6:	001a      	movs	r2, r3
 80034e8:	2301      	movs	r3, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	d00c      	beq.n	8003508 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	08db      	lsrs	r3, r3, #3
 80034f2:	001a      	movs	r2, r3
 80034f4:	2301      	movs	r3, #1
 80034f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034f8:	d006      	beq.n	8003508 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f000 fb79 	bl	8003bf8 <I2C_ITAddrCplt>
 8003506:	e039      	b.n	800357c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	001a      	movs	r2, r3
 800350e:	2301      	movs	r3, #1
 8003510:	4013      	ands	r3, r2
 8003512:	d033      	beq.n	800357c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	001a      	movs	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800351e:	d02d      	beq.n	800357c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d018      	beq.n	800355c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28
 800355a:	e00f      	b.n	800357c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	045b      	lsls	r3, r3, #17
 8003562:	429a      	cmp	r2, r3
 8003564:	d002      	beq.n	800356c <I2C_Slave_ISR_IT+0x200>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 fc28 	bl	8003dc4 <I2C_ITSlaveSeqCplt>
 8003574:	e002      	b.n	800357c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	e000      	b.n	800357c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800357a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b006      	add	sp, #24
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	ffff0000 	.word	0xffff0000

08003594 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2240      	movs	r2, #64	; 0x40
 80035a4:	5c9b      	ldrb	r3, [r3, r2]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <I2C_Master_ISR_DMA+0x1a>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e0f7      	b.n	800379e <I2C_Master_ISR_DMA+0x20a>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2240      	movs	r2, #64	; 0x40
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	001a      	movs	r2, r3
 80035bc:	2301      	movs	r3, #1
 80035be:	4013      	ands	r3, r2
 80035c0:	d019      	beq.n	80035f6 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	001a      	movs	r2, r3
 80035c8:	2301      	movs	r3, #1
 80035ca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035cc:	d013      	beq.n	80035f6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	2204      	movs	r2, #4
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2120      	movs	r1, #32
 80035e6:	0018      	movs	r0, r3
 80035e8:	f001 f848 	bl	800467c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 ffc9 	bl	8004586 <I2C_Flush_TXDR>
 80035f4:	e0ce      	b.n	8003794 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	09db      	lsrs	r3, r3, #7
 80035fa:	001a      	movs	r2, r3
 80035fc:	2301      	movs	r3, #1
 80035fe:	4013      	ands	r3, r2
 8003600:	d100      	bne.n	8003604 <I2C_Master_ISR_DMA+0x70>
 8003602:	e07e      	b.n	8003702 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	001a      	movs	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800360e:	d100      	bne.n	8003612 <I2C_Master_ISR_DMA+0x7e>
 8003610:	e077      	b.n	8003702 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2140      	movs	r1, #64	; 0x40
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d055      	beq.n	80036d8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	b29a      	uxth	r2, r3
 8003634:	2312      	movs	r3, #18
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	0592      	lsls	r2, r2, #22
 800363a:	0d92      	lsrs	r2, r2, #22
 800363c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2bff      	cmp	r3, #255	; 0xff
 8003646:	d906      	bls.n	8003656 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	22ff      	movs	r2, #255	; 0xff
 800364c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	045b      	lsls	r3, r3, #17
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e010      	b.n	8003678 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	4a50      	ldr	r2, [pc, #320]	; (80037a8 <I2C_Master_ISR_DMA+0x214>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e002      	b.n	8003678 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	049b      	lsls	r3, r3, #18
 8003676:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	b2da      	uxtb	r2, r3
 800367e:	697c      	ldr	r4, [r7, #20]
 8003680:	2312      	movs	r3, #18
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	8819      	ldrh	r1, [r3, #0]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	2300      	movs	r3, #0
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	0023      	movs	r3, r4
 800368e:	f000 ffbb 	bl	8004608 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2241      	movs	r2, #65	; 0x41
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b22      	cmp	r3, #34	; 0x22
 80036ae:	d109      	bne.n	80036c4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	0209      	lsls	r1, r1, #8
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80036c2:	e067      	b.n	8003794 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	01c9      	lsls	r1, r1, #7
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80036d6:	e05d      	b.n	8003794 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	049b      	lsls	r3, r3, #18
 80036e2:	401a      	ands	r2, r3
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	049b      	lsls	r3, r3, #18
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d004      	beq.n	80036f6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fb26 	bl	8003d40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80036f4:	e04e      	b.n	8003794 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 fe18 	bl	8004330 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003700:	e048      	b.n	8003794 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	001a      	movs	r2, r3
 8003708:	2301      	movs	r3, #1
 800370a:	4013      	ands	r3, r2
 800370c:	d02e      	beq.n	800376c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	001a      	movs	r2, r3
 8003714:	2301      	movs	r3, #1
 8003716:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003718:	d028      	beq.n	800376c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11d      	bne.n	8003760 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	049b      	lsls	r3, r3, #18
 800372e:	401a      	ands	r2, r3
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	049b      	lsls	r3, r3, #18
 8003734:	429a      	cmp	r2, r3
 8003736:	d02c      	beq.n	8003792 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <I2C_Master_ISR_DMA+0x214>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d109      	bne.n	8003756 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	01c9      	lsls	r1, r1, #7
 8003750:	430a      	orrs	r2, r1
 8003752:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003754:	e01d      	b.n	8003792 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 faf1 	bl	8003d40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800375e:	e018      	b.n	8003792 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	0018      	movs	r0, r3
 8003766:	f000 fde3 	bl	8004330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800376a:	e012      	b.n	8003792 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	001a      	movs	r2, r3
 8003772:	2301      	movs	r3, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d00d      	beq.n	8003794 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	001a      	movs	r2, r3
 800377e:	2301      	movs	r3, #1
 8003780:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003782:	d007      	beq.n	8003794 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fb80 	bl	8003e90 <I2C_ITMasterCplt>
 8003790:	e000      	b.n	8003794 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8003792:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2240      	movs	r2, #64	; 0x40
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b007      	add	sp, #28
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	ffff0000 	.word	0xffff0000

080037ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80037ac:	b590      	push	{r4, r7, lr}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80037b8:	4b92      	ldr	r3, [pc, #584]	; (8003a04 <I2C_Mem_ISR_DMA+0x258>)
 80037ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	5c9b      	ldrb	r3, [r3, r2]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <I2C_Mem_ISR_DMA+0x1e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e118      	b.n	80039fc <I2C_Mem_ISR_DMA+0x250>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	001a      	movs	r2, r3
 80037d8:	2301      	movs	r3, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	d019      	beq.n	8003812 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	001a      	movs	r2, r3
 80037e4:	2301      	movs	r3, #1
 80037e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80037e8:	d013      	beq.n	8003812 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2210      	movs	r2, #16
 80037f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	2204      	movs	r2, #4
 80037f8:	431a      	orrs	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2120      	movs	r1, #32
 8003802:	0018      	movs	r0, r3
 8003804:	f000 ff3a 	bl	800467c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	0018      	movs	r0, r3
 800380c:	f000 febb 	bl	8004586 <I2C_Flush_TXDR>
 8003810:	e0ef      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	001a      	movs	r2, r3
 8003818:	2301      	movs	r3, #1
 800381a:	4013      	ands	r3, r2
 800381c:	d00f      	beq.n	800383e <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	001a      	movs	r2, r3
 8003824:	2301      	movs	r3, #1
 8003826:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003828:	d009      	beq.n	800383e <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003832:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	4252      	negs	r2, r2
 800383a:	651a      	str	r2, [r3, #80]	; 0x50
 800383c:	e0d9      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	09db      	lsrs	r3, r3, #7
 8003842:	001a      	movs	r2, r3
 8003844:	2301      	movs	r3, #1
 8003846:	4013      	ands	r3, r2
 8003848:	d060      	beq.n	800390c <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	001a      	movs	r2, r3
 8003850:	2301      	movs	r3, #1
 8003852:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003854:	d05a      	beq.n	800390c <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2110      	movs	r1, #16
 800385a:	0018      	movs	r0, r3
 800385c:	f000 ff0e 	bl	800467c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d04a      	beq.n	8003900 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	2bff      	cmp	r3, #255	; 0xff
 8003872:	d910      	bls.n	8003896 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	22ff      	movs	r2, #255	; 0xff
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	b299      	uxth	r1, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	b2da      	uxtb	r2, r3
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	045b      	lsls	r3, r3, #17
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	2400      	movs	r4, #0
 800388e:	9400      	str	r4, [sp, #0]
 8003890:	f000 feba 	bl	8004608 <I2C_TransferConfig>
 8003894:	e011      	b.n	80038ba <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a4:	b299      	uxth	r1, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	049b      	lsls	r3, r3, #18
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	2400      	movs	r4, #0
 80038b4:	9400      	str	r4, [sp, #0]
 80038b6:	f000 fea7 	bl	8004608 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2241      	movs	r2, #65	; 0x41
 80038d0:	5c9b      	ldrb	r3, [r3, r2]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b22      	cmp	r3, #34	; 0x22
 80038d6:	d109      	bne.n	80038ec <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0209      	lsls	r1, r1, #8
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80038ea:	e082      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	01c9      	lsls	r1, r1, #7
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80038fe:	e078      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2140      	movs	r1, #64	; 0x40
 8003904:	0018      	movs	r0, r3
 8003906:	f000 fd13 	bl	8004330 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800390a:	e072      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	001a      	movs	r2, r3
 8003912:	2301      	movs	r3, #1
 8003914:	4013      	ands	r3, r2
 8003916:	d05a      	beq.n	80039ce <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	001a      	movs	r2, r3
 800391e:	2301      	movs	r3, #1
 8003920:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003922:	d054      	beq.n	80039ce <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2241      	movs	r2, #65	; 0x41
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b22      	cmp	r3, #34	; 0x22
 800392e:	d101      	bne.n	8003934 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <I2C_Mem_ISR_DMA+0x25c>)
 8003932:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2bff      	cmp	r3, #255	; 0xff
 800393c:	d911      	bls.n	8003962 <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	b299      	uxth	r1, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	045c      	lsls	r4, r3, #17
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	0023      	movs	r3, r4
 800395c:	f000 fe54 	bl	8004608 <I2C_TransferConfig>
 8003960:	e012      	b.n	8003988 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	b299      	uxth	r1, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	049c      	lsls	r4, r3, #18
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	0023      	movs	r3, r4
 8003984:	f000 fe40 	bl	8004608 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2241      	movs	r2, #65	; 0x41
 800399e:	5c9b      	ldrb	r3, [r3, r2]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	d109      	bne.n	80039ba <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2180      	movs	r1, #128	; 0x80
 80039b2:	0209      	lsls	r1, r1, #8
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039b8:	e01b      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	01c9      	lsls	r1, r1, #7
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039cc:	e011      	b.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	001a      	movs	r2, r3
 80039d4:	2301      	movs	r3, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	001a      	movs	r2, r3
 80039e0:	2301      	movs	r3, #1
 80039e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80039e4:	d005      	beq.n	80039f2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	0011      	movs	r1, r2
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 fa4f 	bl	8003e90 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2240      	movs	r2, #64	; 0x40
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b007      	add	sp, #28
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	80002000 	.word	0x80002000
 8003a08:	80002400 	.word	0x80002400

08003a0c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	5c9b      	ldrb	r3, [r3, r2]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <I2C_Slave_ISR_DMA+0x24>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e0dd      	b.n	8003bec <I2C_Slave_ISR_DMA+0x1e0>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00b      	beq.n	8003a5c <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	001a      	movs	r2, r3
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a4e:	d005      	beq.n	8003a5c <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	0011      	movs	r1, r2
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 faec 	bl	8004034 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	001a      	movs	r2, r3
 8003a62:	2301      	movs	r3, #1
 8003a64:	4013      	ands	r3, r2
 8003a66:	d100      	bne.n	8003a6a <I2C_Slave_ISR_DMA+0x5e>
 8003a68:	e0a9      	b.n	8003bbe <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	001a      	movs	r2, r3
 8003a70:	2301      	movs	r3, #1
 8003a72:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a74:	d100      	bne.n	8003a78 <I2C_Slave_ISR_DMA+0x6c>
 8003a76:	e0a2      	b.n	8003bbe <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0b9b      	lsrs	r3, r3, #14
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4013      	ands	r3, r2
 8003a82:	d106      	bne.n	8003a92 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0bdb      	lsrs	r3, r3, #15
 8003a88:	001a      	movs	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a8e:	d100      	bne.n	8003a92 <I2C_Slave_ISR_DMA+0x86>
 8003a90:	e08e      	b.n	8003bb0 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0bdb      	lsrs	r3, r3, #15
 8003a9e:	001a      	movs	r2, r3
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d007      	beq.n	8003ab6 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0b9b      	lsrs	r3, r3, #14
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d007      	beq.n	8003ada <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d12d      	bne.n	8003b3c <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2241      	movs	r2, #65	; 0x41
 8003ae4:	5c9b      	ldrb	r3, [r3, r2]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b28      	cmp	r3, #40	; 0x28
 8003aea:	d10b      	bne.n	8003b04 <I2C_Slave_ISR_DMA+0xf8>
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	049b      	lsls	r3, r3, #18
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d106      	bne.n	8003b04 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 fbbd 	bl	800427c <I2C_ITListenCplt>
 8003b02:	e054      	b.n	8003bae <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2241      	movs	r2, #65	; 0x41
 8003b08:	5c9b      	ldrb	r3, [r3, r2]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b29      	cmp	r3, #41	; 0x29
 8003b0e:	d110      	bne.n	8003b32 <I2C_Slave_ISR_DMA+0x126>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <I2C_Slave_ISR_DMA+0x1e8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00c      	beq.n	8003b32 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 fd2f 	bl	8004586 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f94a 	bl	8003dc4 <I2C_ITSlaveSeqCplt>
 8003b30:	e03d      	b.n	8003bae <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2210      	movs	r2, #16
 8003b38:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003b3a:	e03e      	b.n	8003bba <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2210      	movs	r2, #16
 8003b42:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	2204      	movs	r2, #4
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003b50:	2317      	movs	r3, #23
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	2141      	movs	r1, #65	; 0x41
 8003b58:	5c52      	ldrb	r2, [r2, r1]
 8003b5a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <I2C_Slave_ISR_DMA+0x160>
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	045b      	lsls	r3, r3, #17
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d126      	bne.n	8003bba <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b6c:	2217      	movs	r2, #23
 8003b6e:	18bb      	adds	r3, r7, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b21      	cmp	r3, #33	; 0x21
 8003b74:	d003      	beq.n	8003b7e <I2C_Slave_ISR_DMA+0x172>
 8003b76:	18bb      	adds	r3, r7, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b29      	cmp	r3, #41	; 0x29
 8003b7c:	d103      	bne.n	8003b86 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2221      	movs	r2, #33	; 0x21
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
 8003b84:	e00b      	b.n	8003b9e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b86:	2217      	movs	r2, #23
 8003b88:	18bb      	adds	r3, r7, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b22      	cmp	r3, #34	; 0x22
 8003b8e:	d003      	beq.n	8003b98 <I2C_Slave_ISR_DMA+0x18c>
 8003b90:	18bb      	adds	r3, r7, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b2a      	cmp	r3, #42	; 0x2a
 8003b96:	d102      	bne.n	8003b9e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0011      	movs	r1, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 fbc2 	bl	8004330 <I2C_ITError>
      if (treatdmanack == 1U)
 8003bac:	e005      	b.n	8003bba <I2C_Slave_ISR_DMA+0x1ae>
 8003bae:	e004      	b.n	8003bba <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bb8:	e013      	b.n	8003be2 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8003bba:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bbc:	e011      	b.n	8003be2 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	001a      	movs	r2, r3
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	08db      	lsrs	r3, r3, #3
 8003bce:	001a      	movs	r2, r3
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bd4:	d005      	beq.n	8003be2 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0011      	movs	r1, r2
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 f80b 	bl	8003bf8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	2100      	movs	r1, #0
 8003be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b008      	add	sp, #32
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	ffff0000 	.word	0xffff0000

08003bf8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bf8:	b5b0      	push	{r4, r5, r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2241      	movs	r2, #65	; 0x41
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	2328      	movs	r3, #40	; 0x28
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b28      	cmp	r3, #40	; 0x28
 8003c12:	d000      	beq.n	8003c16 <I2C_ITAddrCplt+0x1e>
 8003c14:	e088      	b.n	8003d28 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	250f      	movs	r5, #15
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	2101      	movs	r1, #1
 8003c26:	400a      	ands	r2, r1
 8003c28:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	200c      	movs	r0, #12
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	21fe      	movs	r1, #254	; 0xfe
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	240a      	movs	r4, #10
 8003c48:	193b      	adds	r3, r7, r4
 8003c4a:	0592      	lsls	r2, r2, #22
 8003c4c:	0d92      	lsrs	r2, r2, #22
 8003c4e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	2308      	movs	r3, #8
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	21fe      	movs	r1, #254	; 0xfe
 8003c5e:	400a      	ands	r2, r1
 8003c60:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d148      	bne.n	8003cfc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003c6a:	0021      	movs	r1, r4
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	09db      	lsrs	r3, r3, #7
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	183b      	adds	r3, r7, r0
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	4053      	eors	r3, r2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	2306      	movs	r3, #6
 8003c80:	4013      	ands	r3, r2
 8003c82:	d120      	bne.n	8003cc6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003c84:	183b      	adds	r3, r7, r0
 8003c86:	187a      	adds	r2, r7, r1
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d14c      	bne.n	8003d38 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003cb4:	183b      	adds	r3, r7, r0
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	197b      	adds	r3, r7, r5
 8003cba:	7819      	ldrb	r1, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7ff f9da 	bl	8003078 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003cc4:	e038      	b.n	8003d38 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003cc6:	240c      	movs	r4, #12
 8003cc8:	193b      	adds	r3, r7, r4
 8003cca:	2208      	movs	r2, #8
 8003ccc:	18ba      	adds	r2, r7, r2
 8003cce:	8812      	ldrh	r2, [r2, #0]
 8003cd0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 fd5c 	bl	8004798 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ce8:	193b      	adds	r3, r7, r4
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	230f      	movs	r3, #15
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	7819      	ldrb	r1, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff f9bf 	bl	8003078 <HAL_I2C_AddrCallback>
}
 8003cfa:	e01d      	b.n	8003d38 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 fd47 	bl	8004798 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003d12:	230c      	movs	r3, #12
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	230f      	movs	r3, #15
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	7819      	ldrb	r1, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7ff f9a9 	bl	8003078 <HAL_I2C_AddrCallback>
}
 8003d26:	e007      	b.n	8003d38 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b004      	add	sp, #16
 8003d3e:	bdb0      	pop	{r4, r5, r7, pc}

08003d40 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2242      	movs	r2, #66	; 0x42
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2241      	movs	r2, #65	; 0x41
 8003d54:	5c9b      	ldrb	r3, [r3, r2]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b21      	cmp	r3, #33	; 0x21
 8003d5a:	d117      	bne.n	8003d8c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2241      	movs	r2, #65	; 0x41
 8003d60:	2120      	movs	r1, #32
 8003d62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2211      	movs	r2, #17
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2101      	movs	r1, #1
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 fd0f 	bl	8004798 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2240      	movs	r2, #64	; 0x40
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff f957 	bl	8003038 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d8a:	e016      	b.n	8003dba <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2241      	movs	r2, #65	; 0x41
 8003d90:	2120      	movs	r1, #32
 8003d92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2212      	movs	r2, #18
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2102      	movs	r1, #2
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fcf7 	bl	8004798 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2240      	movs	r2, #64	; 0x40
 8003dae:	2100      	movs	r1, #0
 8003db0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7ff f947 	bl	8003048 <HAL_I2C_MasterRxCpltCallback>
}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2242      	movs	r2, #66	; 0x42
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0b9b      	lsrs	r3, r3, #14
 8003de0:	001a      	movs	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d008      	beq.n	8003dfa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4925      	ldr	r1, [pc, #148]	; (8003e88 <I2C_ITSlaveSeqCplt+0xc4>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e00d      	b.n	8003e16 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0bdb      	lsrs	r3, r3, #15
 8003dfe:	001a      	movs	r2, r3
 8003e00:	2301      	movs	r3, #1
 8003e02:	4013      	ands	r3, r2
 8003e04:	d007      	beq.n	8003e16 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	491e      	ldr	r1, [pc, #120]	; (8003e8c <I2C_ITSlaveSeqCplt+0xc8>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2241      	movs	r2, #65	; 0x41
 8003e1a:	5c9b      	ldrb	r3, [r3, r2]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b29      	cmp	r3, #41	; 0x29
 8003e20:	d114      	bne.n	8003e4c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2241      	movs	r2, #65	; 0x41
 8003e26:	2128      	movs	r1, #40	; 0x28
 8003e28:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2221      	movs	r2, #33	; 0x21
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2101      	movs	r1, #1
 8003e34:	0018      	movs	r0, r3
 8003e36:	f000 fcaf 	bl	8004798 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2240      	movs	r2, #64	; 0x40
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff f907 	bl	8003058 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e4a:	e019      	b.n	8003e80 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2241      	movs	r2, #65	; 0x41
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b2a      	cmp	r3, #42	; 0x2a
 8003e56:	d113      	bne.n	8003e80 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2241      	movs	r2, #65	; 0x41
 8003e5c:	2128      	movs	r1, #40	; 0x28
 8003e5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2222      	movs	r2, #34	; 0x22
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2102      	movs	r1, #2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f000 fc94 	bl	8004798 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	2100      	movs	r1, #0
 8003e76:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7ff f8f4 	bl	8003068 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b004      	add	sp, #16
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	ffffbfff 	.word	0xffffbfff
 8003e8c:	ffff7fff 	.word	0xffff7fff

08003e90 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2241      	movs	r2, #65	; 0x41
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b21      	cmp	r3, #33	; 0x21
 8003eb0:	d108      	bne.n	8003ec4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 fc6e 	bl	8004798 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2211      	movs	r2, #17
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ec2:	e00d      	b.n	8003ee0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2241      	movs	r2, #65	; 0x41
 8003ec8:	5c9b      	ldrb	r3, [r3, r2]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b22      	cmp	r3, #34	; 0x22
 8003ece:	d107      	bne.n	8003ee0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 fc5f 	bl	8004798 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2212      	movs	r2, #18
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4950      	ldr	r1, [pc, #320]	; (800402c <I2C_ITMasterCplt+0x19c>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <I2C_ITMasterCplt+0x1a0>)
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	001a      	movs	r2, r3
 8003f02:	2301      	movs	r3, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	d009      	beq.n	8003f1c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	2204      	movs	r2, #4
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2241      	movs	r2, #65	; 0x41
 8003f20:	5c9b      	ldrb	r3, [r3, r2]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b60      	cmp	r3, #96	; 0x60
 8003f26:	d10b      	bne.n	8003f40 <I2C_ITMasterCplt+0xb0>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4013      	ands	r3, r2
 8003f32:	d005      	beq.n	8003f40 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 fb1f 	bl	8004586 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2241      	movs	r2, #65	; 0x41
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b60      	cmp	r3, #96	; 0x60
 8003f58:	d002      	beq.n	8003f60 <I2C_ITMasterCplt+0xd0>
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 f9e1 	bl	8004330 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f6e:	e058      	b.n	8004022 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2241      	movs	r2, #65	; 0x41
 8003f74:	5c9b      	ldrb	r3, [r3, r2]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b21      	cmp	r3, #33	; 0x21
 8003f7a:	d126      	bne.n	8003fca <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2241      	movs	r2, #65	; 0x41
 8003f80:	2120      	movs	r1, #32
 8003f82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2242      	movs	r2, #66	; 0x42
 8003f8e:	5c9b      	ldrb	r3, [r3, r2]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b40      	cmp	r3, #64	; 0x40
 8003f94:	d10c      	bne.n	8003fb0 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2242      	movs	r2, #66	; 0x42
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2240      	movs	r2, #64	; 0x40
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff f87d 	bl	80030a8 <HAL_I2C_MemTxCpltCallback>
}
 8003fae:	e038      	b.n	8004022 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2242      	movs	r2, #66	; 0x42
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff f838 	bl	8003038 <HAL_I2C_MasterTxCpltCallback>
}
 8003fc8:	e02b      	b.n	8004022 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2241      	movs	r2, #65	; 0x41
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b22      	cmp	r3, #34	; 0x22
 8003fd4:	d125      	bne.n	8004022 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2241      	movs	r2, #65	; 0x41
 8003fda:	2120      	movs	r1, #32
 8003fdc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2242      	movs	r2, #66	; 0x42
 8003fe8:	5c9b      	ldrb	r3, [r3, r2]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d10c      	bne.n	800400a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2242      	movs	r2, #66	; 0x42
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2240      	movs	r2, #64	; 0x40
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff f858 	bl	80030b8 <HAL_I2C_MemRxCpltCallback>
}
 8004008:	e00b      	b.n	8004022 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2242      	movs	r2, #66	; 0x42
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff f813 	bl	8003048 <HAL_I2C_MasterRxCpltCallback>
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b006      	add	sp, #24
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	fe00e800 	.word	0xfe00e800
 8004030:	ffff0000 	.word	0xffff0000

08004034 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800404a:	200f      	movs	r0, #15
 800404c:	183b      	adds	r3, r7, r0
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	2141      	movs	r1, #65	; 0x41
 8004052:	5c52      	ldrb	r2, [r2, r1]
 8004054:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2220      	movs	r2, #32
 800405c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800405e:	183b      	adds	r3, r7, r0
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b21      	cmp	r3, #33	; 0x21
 8004064:	d003      	beq.n	800406e <I2C_ITSlaveCplt+0x3a>
 8004066:	183b      	adds	r3, r7, r0
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b29      	cmp	r3, #41	; 0x29
 800406c:	d109      	bne.n	8004082 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800406e:	4a7d      	ldr	r2, [pc, #500]	; (8004264 <I2C_ITSlaveCplt+0x230>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0011      	movs	r1, r2
 8004074:	0018      	movs	r0, r3
 8004076:	f000 fb8f 	bl	8004798 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2221      	movs	r2, #33	; 0x21
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
 8004080:	e011      	b.n	80040a6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004082:	220f      	movs	r2, #15
 8004084:	18bb      	adds	r3, r7, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b22      	cmp	r3, #34	; 0x22
 800408a:	d003      	beq.n	8004094 <I2C_ITSlaveCplt+0x60>
 800408c:	18bb      	adds	r3, r7, r2
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b2a      	cmp	r3, #42	; 0x2a
 8004092:	d108      	bne.n	80040a6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004094:	4a74      	ldr	r2, [pc, #464]	; (8004268 <I2C_ITSlaveCplt+0x234>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0011      	movs	r1, r2
 800409a:	0018      	movs	r0, r3
 800409c:	f000 fb7c 	bl	8004798 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2222      	movs	r2, #34	; 0x22
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	0209      	lsls	r1, r1, #8
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	496a      	ldr	r1, [pc, #424]	; (800426c <I2C_ITSlaveCplt+0x238>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 fa5b 	bl	8004586 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	0b9b      	lsrs	r3, r3, #14
 80040d4:	001a      	movs	r2, r3
 80040d6:	2301      	movs	r3, #1
 80040d8:	4013      	ands	r3, r2
 80040da:	d013      	beq.n	8004104 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4962      	ldr	r1, [pc, #392]	; (8004270 <I2C_ITSlaveCplt+0x23c>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004102:	e018      	b.n	8004136 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	0bdb      	lsrs	r3, r3, #15
 8004108:	001a      	movs	r2, r3
 800410a:	2301      	movs	r3, #1
 800410c:	4013      	ands	r3, r2
 800410e:	d012      	beq.n	8004136 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4956      	ldr	r1, [pc, #344]	; (8004274 <I2C_ITSlaveCplt+0x240>)
 800411c:	400a      	ands	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d006      	beq.n	8004136 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	001a      	movs	r2, r3
 800413c:	2301      	movs	r3, #1
 800413e:	4013      	ands	r3, r2
 8004140:	d020      	beq.n	8004184 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2204      	movs	r2, #4
 8004146:	4393      	bics	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	2204      	movs	r2, #4
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2242      	movs	r2, #66	; 0x42
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 f8b9 	bl	8004330 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2241      	movs	r2, #65	; 0x41
 80041c2:	5c9b      	ldrb	r3, [r3, r2]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b28      	cmp	r3, #40	; 0x28
 80041c8:	d147      	bne.n	800425a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	0011      	movs	r1, r2
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 f853 	bl	800427c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041d6:	e040      	b.n	800425a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <I2C_ITSlaveCplt+0x244>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d016      	beq.n	8004210 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff fded 	bl	8003dc4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a22      	ldr	r2, [pc, #136]	; (8004278 <I2C_ITSlaveCplt+0x244>)
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2241      	movs	r2, #65	; 0x41
 80041f4:	2120      	movs	r1, #32
 80041f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2240      	movs	r2, #64	; 0x40
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f7fe ff45 	bl	8003098 <HAL_I2C_ListenCpltCallback>
}
 800420e:	e024      	b.n	800425a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2241      	movs	r2, #65	; 0x41
 8004214:	5c9b      	ldrb	r3, [r3, r2]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b22      	cmp	r3, #34	; 0x22
 800421a:	d10f      	bne.n	800423c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2241      	movs	r2, #65	; 0x41
 8004220:	2120      	movs	r1, #32
 8004222:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0018      	movs	r0, r3
 8004236:	f7fe ff17 	bl	8003068 <HAL_I2C_SlaveRxCpltCallback>
}
 800423a:	e00e      	b.n	800425a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2241      	movs	r2, #65	; 0x41
 8004240:	2120      	movs	r1, #32
 8004242:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2240      	movs	r2, #64	; 0x40
 800424e:	2100      	movs	r1, #0
 8004250:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	0018      	movs	r0, r3
 8004256:	f7fe feff 	bl	8003058 <HAL_I2C_SlaveTxCpltCallback>
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b006      	add	sp, #24
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	00008001 	.word	0x00008001
 8004268:	00008002 	.word	0x00008002
 800426c:	fe00e800 	.word	0xfe00e800
 8004270:	ffffbfff 	.word	0xffffbfff
 8004274:	ffff7fff 	.word	0xffff7fff
 8004278:	ffff0000 	.word	0xffff0000

0800427c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <I2C_ITListenCplt+0xac>)
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2241      	movs	r2, #65	; 0x41
 8004296:	2120      	movs	r1, #32
 8004298:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2242      	movs	r2, #66	; 0x42
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	001a      	movs	r2, r3
 80042ae:	2301      	movs	r3, #1
 80042b0:	4013      	ands	r3, r2
 80042b2:	d022      	beq.n	80042fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	2204      	movs	r2, #4
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042fa:	4a0c      	ldr	r2, [pc, #48]	; (800432c <I2C_ITListenCplt+0xb0>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	0011      	movs	r1, r2
 8004300:	0018      	movs	r0, r3
 8004302:	f000 fa49 	bl	8004798 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2210      	movs	r2, #16
 800430c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2240      	movs	r2, #64	; 0x40
 8004312:	2100      	movs	r1, #0
 8004314:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	0018      	movs	r0, r3
 800431a:	f7fe febd 	bl	8003098 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b002      	add	sp, #8
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	ffff0000 	.word	0xffff0000
 800432c:	00008003 	.word	0x00008003

08004330 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800433a:	200f      	movs	r0, #15
 800433c:	183b      	adds	r3, r7, r0
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	2141      	movs	r1, #65	; 0x41
 8004342:	5c52      	ldrb	r2, [r2, r1]
 8004344:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2242      	movs	r2, #66	; 0x42
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a72      	ldr	r2, [pc, #456]	; (800451c <I2C_ITError+0x1ec>)
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004366:	183b      	adds	r3, r7, r0
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b28      	cmp	r3, #40	; 0x28
 800436c:	d007      	beq.n	800437e <I2C_ITError+0x4e>
 800436e:	183b      	adds	r3, r7, r0
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b29      	cmp	r3, #41	; 0x29
 8004374:	d003      	beq.n	800437e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004376:	183b      	adds	r3, r7, r0
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b2a      	cmp	r3, #42	; 0x2a
 800437c:	d10c      	bne.n	8004398 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2103      	movs	r1, #3
 8004382:	0018      	movs	r0, r3
 8004384:	f000 fa08 	bl	8004798 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2241      	movs	r2, #65	; 0x41
 800438c:	2128      	movs	r1, #40	; 0x28
 800438e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a63      	ldr	r2, [pc, #396]	; (8004520 <I2C_ITError+0x1f0>)
 8004394:	635a      	str	r2, [r3, #52]	; 0x34
 8004396:	e032      	b.n	80043fe <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004398:	4a62      	ldr	r2, [pc, #392]	; (8004524 <I2C_ITError+0x1f4>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	0011      	movs	r1, r2
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f9fa 	bl	8004798 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	0018      	movs	r0, r3
 80043a8:	f000 f8ed 	bl	8004586 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2241      	movs	r2, #65	; 0x41
 80043b0:	5c9b      	ldrb	r3, [r3, r2]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d01f      	beq.n	80043f8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2241      	movs	r2, #65	; 0x41
 80043bc:	2120      	movs	r1, #32
 80043be:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2220      	movs	r2, #32
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d114      	bne.n	80043f8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2210      	movs	r2, #16
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d109      	bne.n	80043f0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2210      	movs	r2, #16
 80043e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	2204      	movs	r2, #4
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2220      	movs	r2, #32
 80043f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d03b      	beq.n	8004484 <I2C_ITError+0x154>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b11      	cmp	r3, #17
 8004410:	d002      	beq.n	8004418 <I2C_ITError+0xe8>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b21      	cmp	r3, #33	; 0x21
 8004416:	d135      	bne.n	8004484 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	01db      	lsls	r3, r3, #7
 8004422:	401a      	ands	r2, r3
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	01db      	lsls	r3, r3, #7
 8004428:	429a      	cmp	r2, r3
 800442a:	d107      	bne.n	800443c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	493c      	ldr	r1, [pc, #240]	; (8004528 <I2C_ITError+0x1f8>)
 8004438:	400a      	ands	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	0018      	movs	r0, r3
 8004442:	f7fe faee 	bl	8002a22 <HAL_DMA_GetState>
 8004446:	0003      	movs	r3, r0
 8004448:	2b01      	cmp	r3, #1
 800444a:	d016      	beq.n	800447a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4a36      	ldr	r2, [pc, #216]	; (800452c <I2C_ITError+0x1fc>)
 8004452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2240      	movs	r2, #64	; 0x40
 8004458:	2100      	movs	r1, #0
 800445a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	0018      	movs	r0, r3
 8004462:	f7fe fa99 	bl	8002998 <HAL_DMA_Abort_IT>
 8004466:	1e03      	subs	r3, r0, #0
 8004468:	d051      	beq.n	800450e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	0018      	movs	r0, r3
 8004476:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004478:	e049      	b.n	800450e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 f859 	bl	8004534 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004482:	e044      	b.n	800450e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d03b      	beq.n	8004504 <I2C_ITError+0x1d4>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b12      	cmp	r3, #18
 8004490:	d002      	beq.n	8004498 <I2C_ITError+0x168>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b22      	cmp	r3, #34	; 0x22
 8004496:	d135      	bne.n	8004504 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	401a      	ands	r2, r3
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	491e      	ldr	r1, [pc, #120]	; (8004530 <I2C_ITError+0x200>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fe faae 	bl	8002a22 <HAL_DMA_GetState>
 80044c6:	0003      	movs	r3, r0
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d016      	beq.n	80044fa <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	4a16      	ldr	r2, [pc, #88]	; (800452c <I2C_ITError+0x1fc>)
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	2100      	movs	r1, #0
 80044da:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7fe fa59 	bl	8002998 <HAL_DMA_Abort_IT>
 80044e6:	1e03      	subs	r3, r0, #0
 80044e8:	d013      	beq.n	8004512 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	0018      	movs	r0, r3
 80044f6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044f8:	e00b      	b.n	8004512 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 f819 	bl	8004534 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004502:	e006      	b.n	8004512 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 f814 	bl	8004534 <I2C_TreatErrorCallback>
  }
}
 800450c:	e002      	b.n	8004514 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	e000      	b.n	8004514 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004512:	46c0      	nop			; (mov r8, r8)
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b004      	add	sp, #16
 800451a:	bd80      	pop	{r7, pc}
 800451c:	ffff0000 	.word	0xffff0000
 8004520:	0800336d 	.word	0x0800336d
 8004524:	00008003 	.word	0x00008003
 8004528:	ffffbfff 	.word	0xffffbfff
 800452c:	080045cb 	.word	0x080045cb
 8004530:	ffff7fff 	.word	0xffff7fff

08004534 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2241      	movs	r2, #65	; 0x41
 8004540:	5c9b      	ldrb	r3, [r3, r2]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b60      	cmp	r3, #96	; 0x60
 8004546:	d10f      	bne.n	8004568 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2241      	movs	r2, #65	; 0x41
 800454c:	2120      	movs	r1, #32
 800454e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2240      	movs	r2, #64	; 0x40
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fe fdb9 	bl	80030d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004566:	e00a      	b.n	800457e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2240      	movs	r2, #64	; 0x40
 8004572:	2100      	movs	r1, #0
 8004574:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fe fda5 	bl	80030c8 <HAL_I2C_ErrorCallback>
}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	b002      	add	sp, #8
 8004584:	bd80      	pop	{r7, pc}

08004586 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2202      	movs	r2, #2
 8004596:	4013      	ands	r3, r2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d103      	bne.n	80045a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2201      	movs	r2, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d007      	beq.n	80045c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
  }
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b002      	add	sp, #8
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	2200      	movs	r2, #0
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	2200      	movs	r2, #0
 80045f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7ff ff9a 	bl	8004534 <I2C_TreatErrorCallback>
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	0008      	movs	r0, r1
 8004612:	0011      	movs	r1, r2
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	240a      	movs	r4, #10
 8004618:	193b      	adds	r3, r7, r4
 800461a:	1c02      	adds	r2, r0, #0
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	2009      	movs	r0, #9
 8004620:	183b      	adds	r3, r7, r0
 8004622:	1c0a      	adds	r2, r1, #0
 8004624:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004626:	193b      	adds	r3, r7, r4
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	059b      	lsls	r3, r3, #22
 800462c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800462e:	183b      	adds	r3, r7, r0
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	0419      	lsls	r1, r3, #16
 8004634:	23ff      	movs	r3, #255	; 0xff
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800463a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	4313      	orrs	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004652:	0d51      	lsrs	r1, r2, #21
 8004654:	2280      	movs	r2, #128	; 0x80
 8004656:	00d2      	lsls	r2, r2, #3
 8004658:	400a      	ands	r2, r1
 800465a:	4907      	ldr	r1, [pc, #28]	; (8004678 <I2C_TransferConfig+0x70>)
 800465c:	430a      	orrs	r2, r1
 800465e:	43d2      	mvns	r2, r2
 8004660:	401a      	ands	r2, r3
 8004662:	0011      	movs	r1, r2
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b007      	add	sp, #28
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	03ff63ff 	.word	0x03ff63ff

0800467c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	000a      	movs	r2, r1
 8004686:	1cbb      	adds	r3, r7, #2
 8004688:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004692:	4b3e      	ldr	r3, [pc, #248]	; (800478c <I2C_Enable_IRQ+0x110>)
 8004694:	429a      	cmp	r2, r3
 8004696:	d035      	beq.n	8004704 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800469c:	4b3c      	ldr	r3, [pc, #240]	; (8004790 <I2C_Enable_IRQ+0x114>)
 800469e:	429a      	cmp	r2, r3
 80046a0:	d030      	beq.n	8004704 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80046a6:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <I2C_Enable_IRQ+0x118>)
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d02b      	beq.n	8004704 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046ac:	1cbb      	adds	r3, r7, #2
 80046ae:	2200      	movs	r2, #0
 80046b0:	5e9b      	ldrsh	r3, [r3, r2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da03      	bge.n	80046be <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	22b8      	movs	r2, #184	; 0xb8
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80046be:	1cbb      	adds	r3, r7, #2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	4013      	ands	r3, r2
 80046c6:	d003      	beq.n	80046d0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	22f2      	movs	r2, #242	; 0xf2
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80046d0:	1cbb      	adds	r3, r7, #2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	2202      	movs	r2, #2
 80046d6:	4013      	ands	r3, r2
 80046d8:	d003      	beq.n	80046e2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	22f4      	movs	r2, #244	; 0xf4
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80046e2:	1cbb      	adds	r3, r7, #2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d103      	bne.n	80046f2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2290      	movs	r2, #144	; 0x90
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80046f2:	1cbb      	adds	r3, r7, #2
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d13c      	bne.n	8004774 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004702:	e037      	b.n	8004774 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004704:	1cbb      	adds	r3, r7, #2
 8004706:	2200      	movs	r2, #0
 8004708:	5e9b      	ldrsh	r3, [r3, r2]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da03      	bge.n	8004716 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	22b8      	movs	r2, #184	; 0xb8
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004716:	1cbb      	adds	r3, r7, #2
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	2201      	movs	r2, #1
 800471c:	4013      	ands	r3, r2
 800471e:	d003      	beq.n	8004728 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	22f2      	movs	r2, #242	; 0xf2
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004728:	1cbb      	adds	r3, r7, #2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d003      	beq.n	800473a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	22f4      	movs	r2, #244	; 0xf4
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800473a:	1cbb      	adds	r3, r7, #2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	2b10      	cmp	r3, #16
 8004740:	d103      	bne.n	800474a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2290      	movs	r2, #144	; 0x90
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800474a:	1cbb      	adds	r3, r7, #2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	2b20      	cmp	r3, #32
 8004750:	d103      	bne.n	800475a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2260      	movs	r2, #96	; 0x60
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <I2C_Enable_IRQ+0x118>)
 8004760:	429a      	cmp	r2, r3
 8004762:	d007      	beq.n	8004774 <I2C_Enable_IRQ+0xf8>
 8004764:	1cbb      	adds	r3, r7, #2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d103      	bne.n	8004774 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	b004      	add	sp, #16
 800478a:	bd80      	pop	{r7, pc}
 800478c:	08003595 	.word	0x08003595
 8004790:	08003a0d 	.word	0x08003a0d
 8004794:	080037ad 	.word	0x080037ad

08004798 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	000a      	movs	r2, r1
 80047a2:	1cbb      	adds	r3, r7, #2
 80047a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047aa:	1cbb      	adds	r3, r7, #2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	4013      	ands	r3, r2
 80047b2:	d010      	beq.n	80047d6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2242      	movs	r2, #66	; 0x42
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2241      	movs	r2, #65	; 0x41
 80047c0:	5c9b      	ldrb	r3, [r3, r2]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	001a      	movs	r2, r3
 80047c6:	2328      	movs	r3, #40	; 0x28
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b28      	cmp	r3, #40	; 0x28
 80047cc:	d003      	beq.n	80047d6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	22b0      	movs	r2, #176	; 0xb0
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047d6:	1cbb      	adds	r3, r7, #2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	2202      	movs	r2, #2
 80047dc:	4013      	ands	r3, r2
 80047de:	d010      	beq.n	8004802 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2244      	movs	r2, #68	; 0x44
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2241      	movs	r2, #65	; 0x41
 80047ec:	5c9b      	ldrb	r3, [r3, r2]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	001a      	movs	r2, r3
 80047f2:	2328      	movs	r3, #40	; 0x28
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b28      	cmp	r3, #40	; 0x28
 80047f8:	d003      	beq.n	8004802 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22b0      	movs	r2, #176	; 0xb0
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004802:	1cbb      	adds	r3, r7, #2
 8004804:	2200      	movs	r2, #0
 8004806:	5e9b      	ldrsh	r3, [r3, r2]
 8004808:	2b00      	cmp	r3, #0
 800480a:	da03      	bge.n	8004814 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	22b8      	movs	r2, #184	; 0xb8
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004814:	1cbb      	adds	r3, r7, #2
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d103      	bne.n	8004824 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2290      	movs	r2, #144	; 0x90
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004824:	1cbb      	adds	r3, r7, #2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	2b20      	cmp	r3, #32
 800482a:	d103      	bne.n	8004834 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004834:	1cbb      	adds	r3, r7, #2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d103      	bne.n	8004844 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	43d9      	mvns	r1, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	400a      	ands	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2241      	movs	r2, #65	; 0x41
 800486e:	5c9b      	ldrb	r3, [r3, r2]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b20      	cmp	r3, #32
 8004874:	d138      	bne.n	80048e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2240      	movs	r2, #64	; 0x40
 800487a:	5c9b      	ldrb	r3, [r3, r2]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004880:	2302      	movs	r3, #2
 8004882:	e032      	b.n	80048ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	2101      	movs	r1, #1
 800488a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2241      	movs	r2, #65	; 0x41
 8004890:	2124      	movs	r1, #36	; 0x24
 8004892:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2101      	movs	r1, #1
 80048a0:	438a      	bics	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4911      	ldr	r1, [pc, #68]	; (80048f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048b0:	400a      	ands	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2101      	movs	r1, #1
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2241      	movs	r2, #65	; 0x41
 80048d8:	2120      	movs	r1, #32
 80048da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2240      	movs	r2, #64	; 0x40
 80048e0:	2100      	movs	r1, #0
 80048e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	ffffefff 	.word	0xffffefff

080048f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2241      	movs	r2, #65	; 0x41
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b20      	cmp	r3, #32
 800490c:	d139      	bne.n	8004982 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	5c9b      	ldrb	r3, [r3, r2]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004918:	2302      	movs	r3, #2
 800491a:	e033      	b.n	8004984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2240      	movs	r2, #64	; 0x40
 8004920:	2101      	movs	r1, #1
 8004922:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2241      	movs	r2, #65	; 0x41
 8004928:	2124      	movs	r1, #36	; 0x24
 800492a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2101      	movs	r1, #1
 8004938:	438a      	bics	r2, r1
 800493a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4a11      	ldr	r2, [pc, #68]	; (800498c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	430a      	orrs	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2241      	movs	r2, #65	; 0x41
 8004972:	2120      	movs	r1, #32
 8004974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2240      	movs	r2, #64	; 0x40
 800497a:	2100      	movs	r1, #0
 800497c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b004      	add	sp, #16
 800498a:	bd80      	pop	{r7, pc}
 800498c:	fffff0ff 	.word	0xfffff0ff

08004990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e301      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	4013      	ands	r3, r2
 80049aa:	d100      	bne.n	80049ae <HAL_RCC_OscConfig+0x1e>
 80049ac:	e08d      	b.n	8004aca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80049ae:	4bc3      	ldr	r3, [pc, #780]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	220c      	movs	r2, #12
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00e      	beq.n	80049d8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049ba:	4bc0      	ldr	r3, [pc, #768]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	220c      	movs	r2, #12
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x64>
 80049c6:	4bbd      	ldr	r3, [pc, #756]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	401a      	ands	r2, r3
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	025b      	lsls	r3, r3, #9
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d10d      	bne.n	80049f4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	4bb8      	ldr	r3, [pc, #736]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	4013      	ands	r3, r2
 80049e2:	d100      	bne.n	80049e6 <HAL_RCC_OscConfig+0x56>
 80049e4:	e070      	b.n	8004ac8 <HAL_RCC_OscConfig+0x138>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d000      	beq.n	80049f0 <HAL_RCC_OscConfig+0x60>
 80049ee:	e06b      	b.n	8004ac8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e2d8      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x7c>
 80049fc:	4baf      	ldr	r3, [pc, #700]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4bae      	ldr	r3, [pc, #696]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	0249      	lsls	r1, r1, #9
 8004a06:	430a      	orrs	r2, r1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e02f      	b.n	8004a6c <HAL_RCC_OscConfig+0xdc>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x9e>
 8004a14:	4ba9      	ldr	r3, [pc, #676]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4ba8      	ldr	r3, [pc, #672]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a1a:	49a9      	ldr	r1, [pc, #676]	; (8004cc0 <HAL_RCC_OscConfig+0x330>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	4ba6      	ldr	r3, [pc, #664]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4ba5      	ldr	r3, [pc, #660]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a26:	49a7      	ldr	r1, [pc, #668]	; (8004cc4 <HAL_RCC_OscConfig+0x334>)
 8004a28:	400a      	ands	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e01e      	b.n	8004a6c <HAL_RCC_OscConfig+0xdc>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	d10e      	bne.n	8004a54 <HAL_RCC_OscConfig+0xc4>
 8004a36:	4ba1      	ldr	r3, [pc, #644]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4ba0      	ldr	r3, [pc, #640]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	02c9      	lsls	r1, r1, #11
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	4b9d      	ldr	r3, [pc, #628]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b9c      	ldr	r3, [pc, #624]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	0249      	lsls	r1, r1, #9
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e00b      	b.n	8004a6c <HAL_RCC_OscConfig+0xdc>
 8004a54:	4b99      	ldr	r3, [pc, #612]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b98      	ldr	r3, [pc, #608]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a5a:	4999      	ldr	r1, [pc, #612]	; (8004cc0 <HAL_RCC_OscConfig+0x330>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	4b96      	ldr	r3, [pc, #600]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b95      	ldr	r3, [pc, #596]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a66:	4997      	ldr	r1, [pc, #604]	; (8004cc4 <HAL_RCC_OscConfig+0x334>)
 8004a68:	400a      	ands	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d014      	beq.n	8004a9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd fe84 	bl	8002780 <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7e:	f7fd fe7f 	bl	8002780 <HAL_GetTick>
 8004a82:	0002      	movs	r2, r0
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b64      	cmp	r3, #100	; 0x64
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e28a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a90:	4b8a      	ldr	r3, [pc, #552]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0xee>
 8004a9c:	e015      	b.n	8004aca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fd fe6f 	bl	8002780 <HAL_GetTick>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fd fe6a 	bl	8002780 <HAL_GetTick>
 8004aac:	0002      	movs	r2, r0
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e275      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	4b80      	ldr	r3, [pc, #512]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	029b      	lsls	r3, r3, #10
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x118>
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x146>
 8004ad4:	e069      	b.n	8004baa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ad6:	4b79      	ldr	r3, [pc, #484]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	220c      	movs	r2, #12
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ae0:	4b76      	ldr	r3, [pc, #472]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	220c      	movs	r2, #12
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d11c      	bne.n	8004b26 <HAL_RCC_OscConfig+0x196>
 8004aec:	4b73      	ldr	r3, [pc, #460]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	025b      	lsls	r3, r3, #9
 8004af4:	4013      	ands	r3, r2
 8004af6:	d116      	bne.n	8004b26 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af8:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2202      	movs	r2, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	d005      	beq.n	8004b0e <HAL_RCC_OscConfig+0x17e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e24b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0e:	4b6b      	ldr	r3, [pc, #428]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	22f8      	movs	r2, #248	; 0xf8
 8004b14:	4393      	bics	r3, r2
 8004b16:	0019      	movs	r1, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	00da      	lsls	r2, r3, #3
 8004b1e:	4b67      	ldr	r3, [pc, #412]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b24:	e041      	b.n	8004baa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d024      	beq.n	8004b78 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b2e:	4b63      	ldr	r3, [pc, #396]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b62      	ldr	r3, [pc, #392]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b34:	2101      	movs	r1, #1
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fe21 	bl	8002780 <HAL_GetTick>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fd fe1c 	bl	8002780 <HAL_GetTick>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e227      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b56:	4b59      	ldr	r3, [pc, #356]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d0f1      	beq.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b56      	ldr	r3, [pc, #344]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	22f8      	movs	r2, #248	; 0xf8
 8004b66:	4393      	bics	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00da      	lsls	r2, r3, #3
 8004b70:	4b52      	ldr	r3, [pc, #328]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e018      	b.n	8004baa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b78:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b4f      	ldr	r3, [pc, #316]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	2101      	movs	r1, #1
 8004b80:	438a      	bics	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fd fdfc 	bl	8002780 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fd fdf7 	bl	8002780 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e202      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba0:	4b46      	ldr	r3, [pc, #280]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d1f1      	bne.n	8004b8e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2208      	movs	r2, #8
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d036      	beq.n	8004c22 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d019      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bbc:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bc0:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc8:	f7fd fdda 	bl	8002780 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fdd5 	bl	8002780 <HAL_GetTick>
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e1e0      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be4:	4b35      	ldr	r3, [pc, #212]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2202      	movs	r2, #2
 8004bea:	4013      	ands	r3, r2
 8004bec:	d0f1      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x242>
 8004bee:	e018      	b.n	8004c22 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf0:	4b32      	ldr	r3, [pc, #200]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf4:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfc:	f7fd fdc0 	bl	8002780 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c06:	f7fd fdbb 	bl	8002780 <HAL_GetTick>
 8004c0a:	0002      	movs	r2, r0
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1c6      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d1f1      	bne.n	8004c06 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2204      	movs	r2, #4
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d100      	bne.n	8004c2e <HAL_RCC_OscConfig+0x29e>
 8004c2c:	e0b4      	b.n	8004d98 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	201f      	movs	r0, #31
 8004c30:	183b      	adds	r3, r7, r0
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	055b      	lsls	r3, r3, #21
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d110      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	0549      	lsls	r1, r1, #21
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	61da      	str	r2, [r3, #28]
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	055b      	lsls	r3, r3, #21
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c64:	4b18      	ldr	r3, [pc, #96]	; (8004cc8 <HAL_RCC_OscConfig+0x338>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2380      	movs	r3, #128	; 0x80
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d11a      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <HAL_RCC_OscConfig+0x338>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <HAL_RCC_OscConfig+0x338>)
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	0049      	lsls	r1, r1, #1
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7e:	f7fd fd7f 	bl	8002780 <HAL_GetTick>
 8004c82:	0003      	movs	r3, r0
 8004c84:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fd fd7a 	bl	8002780 <HAL_GetTick>
 8004c8c:	0002      	movs	r2, r0
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e185      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_OscConfig+0x338>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d10e      	bne.n	8004ccc <HAL_RCC_OscConfig+0x33c>
 8004cae:	4b03      	ldr	r3, [pc, #12]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004cb0:	6a1a      	ldr	r2, [r3, #32]
 8004cb2:	4b02      	ldr	r3, [pc, #8]	; (8004cbc <HAL_RCC_OscConfig+0x32c>)
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	621a      	str	r2, [r3, #32]
 8004cba:	e035      	b.n	8004d28 <HAL_RCC_OscConfig+0x398>
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	fffeffff 	.word	0xfffeffff
 8004cc4:	fffbffff 	.word	0xfffbffff
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10c      	bne.n	8004cee <HAL_RCC_OscConfig+0x35e>
 8004cd4:	4bb6      	ldr	r3, [pc, #728]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004cd6:	6a1a      	ldr	r2, [r3, #32]
 8004cd8:	4bb5      	ldr	r3, [pc, #724]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004cda:	2101      	movs	r1, #1
 8004cdc:	438a      	bics	r2, r1
 8004cde:	621a      	str	r2, [r3, #32]
 8004ce0:	4bb3      	ldr	r3, [pc, #716]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ce2:	6a1a      	ldr	r2, [r3, #32]
 8004ce4:	4bb2      	ldr	r3, [pc, #712]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	438a      	bics	r2, r1
 8004cea:	621a      	str	r2, [r3, #32]
 8004cec:	e01c      	b.n	8004d28 <HAL_RCC_OscConfig+0x398>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b05      	cmp	r3, #5
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x380>
 8004cf6:	4bae      	ldr	r3, [pc, #696]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	4bad      	ldr	r3, [pc, #692]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004cfc:	2104      	movs	r1, #4
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	621a      	str	r2, [r3, #32]
 8004d02:	4bab      	ldr	r3, [pc, #684]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d04:	6a1a      	ldr	r2, [r3, #32]
 8004d06:	4baa      	ldr	r3, [pc, #680]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d08:	2101      	movs	r1, #1
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	621a      	str	r2, [r3, #32]
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0x398>
 8004d10:	4ba7      	ldr	r3, [pc, #668]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	4ba6      	ldr	r3, [pc, #664]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d16:	2101      	movs	r1, #1
 8004d18:	438a      	bics	r2, r1
 8004d1a:	621a      	str	r2, [r3, #32]
 8004d1c:	4ba4      	ldr	r3, [pc, #656]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	4ba3      	ldr	r3, [pc, #652]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d22:	2104      	movs	r1, #4
 8004d24:	438a      	bics	r2, r1
 8004d26:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d014      	beq.n	8004d5a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d30:	f7fd fd26 	bl	8002780 <HAL_GetTick>
 8004d34:	0003      	movs	r3, r0
 8004d36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d38:	e009      	b.n	8004d4e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fd fd21 	bl	8002780 <HAL_GetTick>
 8004d3e:	0002      	movs	r2, r0
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	4a9b      	ldr	r2, [pc, #620]	; (8004fb4 <HAL_RCC_OscConfig+0x624>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e12b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4e:	4b98      	ldr	r3, [pc, #608]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	2202      	movs	r2, #2
 8004d54:	4013      	ands	r3, r2
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x3aa>
 8004d58:	e013      	b.n	8004d82 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d5a:	f7fd fd11 	bl	8002780 <HAL_GetTick>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	e009      	b.n	8004d78 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fd fd0c 	bl	8002780 <HAL_GetTick>
 8004d68:	0002      	movs	r2, r0
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	4a91      	ldr	r2, [pc, #580]	; (8004fb4 <HAL_RCC_OscConfig+0x624>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e116      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d78:	4b8d      	ldr	r3, [pc, #564]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d82:	231f      	movs	r3, #31
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d8c:	4b88      	ldr	r3, [pc, #544]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	4b87      	ldr	r3, [pc, #540]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004d92:	4989      	ldr	r1, [pc, #548]	; (8004fb8 <HAL_RCC_OscConfig+0x628>)
 8004d94:	400a      	ands	r2, r1
 8004d96:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d12a      	bne.n	8004e00 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004daa:	4b81      	ldr	r3, [pc, #516]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dae:	4b80      	ldr	r3, [pc, #512]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004db0:	2104      	movs	r1, #4
 8004db2:	430a      	orrs	r2, r1
 8004db4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004db6:	4b7e      	ldr	r3, [pc, #504]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dba:	4b7d      	ldr	r3, [pc, #500]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fcdd 	bl	8002780 <HAL_GetTick>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004dcc:	f7fd fcd8 	bl	8002780 <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0e3      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004dde:	4b74      	ldr	r3, [pc, #464]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	2202      	movs	r2, #2
 8004de4:	4013      	ands	r3, r2
 8004de6:	d0f1      	beq.n	8004dcc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004de8:	4b71      	ldr	r3, [pc, #452]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dec:	22f8      	movs	r2, #248	; 0xf8
 8004dee:	4393      	bics	r3, r2
 8004df0:	0019      	movs	r1, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	00da      	lsls	r2, r3, #3
 8004df8:	4b6d      	ldr	r3, [pc, #436]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dfe:	e034      	b.n	8004e6a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	3305      	adds	r3, #5
 8004e06:	d111      	bne.n	8004e2c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e08:	4b69      	ldr	r3, [pc, #420]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e0c:	4b68      	ldr	r3, [pc, #416]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e0e:	2104      	movs	r1, #4
 8004e10:	438a      	bics	r2, r1
 8004e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e14:	4b66      	ldr	r3, [pc, #408]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	22f8      	movs	r2, #248	; 0xf8
 8004e1a:	4393      	bics	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	00da      	lsls	r2, r3, #3
 8004e24:	4b62      	ldr	r3, [pc, #392]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e26:	430a      	orrs	r2, r1
 8004e28:	635a      	str	r2, [r3, #52]	; 0x34
 8004e2a:	e01e      	b.n	8004e6a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e30:	4b5f      	ldr	r3, [pc, #380]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e32:	2104      	movs	r1, #4
 8004e34:	430a      	orrs	r2, r1
 8004e36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004e38:	4b5d      	ldr	r3, [pc, #372]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3c:	4b5c      	ldr	r3, [pc, #368]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e3e:	2101      	movs	r1, #1
 8004e40:	438a      	bics	r2, r1
 8004e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e44:	f7fd fc9c 	bl	8002780 <HAL_GetTick>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e4e:	f7fd fc97 	bl	8002780 <HAL_GetTick>
 8004e52:	0002      	movs	r2, r0
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e0a2      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004e60:	4b53      	ldr	r3, [pc, #332]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	2202      	movs	r2, #2
 8004e66:	4013      	ands	r3, r2
 8004e68:	d1f1      	bne.n	8004e4e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d100      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4e4>
 8004e72:	e097      	b.n	8004fa4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e74:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	220c      	movs	r2, #12
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d100      	bne.n	8004e82 <HAL_RCC_OscConfig+0x4f2>
 8004e80:	e06b      	b.n	8004f5a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d14c      	bne.n	8004f24 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b48      	ldr	r3, [pc, #288]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004e90:	494a      	ldr	r1, [pc, #296]	; (8004fbc <HAL_RCC_OscConfig+0x62c>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7fd fc73 	bl	8002780 <HAL_GetTick>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd fc6e 	bl	8002780 <HAL_GetTick>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e079      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb2:	4b3f      	ldr	r3, [pc, #252]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	049b      	lsls	r3, r3, #18
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebe:	4b3c      	ldr	r3, [pc, #240]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	220f      	movs	r2, #15
 8004ec4:	4393      	bics	r3, r2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ed2:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <HAL_RCC_OscConfig+0x630>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	0019      	movs	r1, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	4b32      	ldr	r3, [pc, #200]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	0449      	lsls	r1, r1, #17
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fd fc41 	bl	8002780 <HAL_GetTick>
 8004efe:	0003      	movs	r3, r0
 8004f00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fd fc3c 	bl	8002780 <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e047      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f16:	4b26      	ldr	r3, [pc, #152]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	049b      	lsls	r3, r3, #18
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x574>
 8004f22:	e03f      	b.n	8004fa4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b21      	ldr	r3, [pc, #132]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004f2a:	4924      	ldr	r1, [pc, #144]	; (8004fbc <HAL_RCC_OscConfig+0x62c>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7fd fc26 	bl	8002780 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fd fc21 	bl	8002780 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e02c      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	049b      	lsls	r3, r3, #18
 8004f54:	4013      	ands	r3, r2
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x5aa>
 8004f58:	e024      	b.n	8004fa4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e01f      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004f6c:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <HAL_RCC_OscConfig+0x620>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	025b      	lsls	r3, r3, #9
 8004f78:	401a      	ands	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d10e      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	220f      	movs	r2, #15
 8004f86:	401a      	ands	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	23f0      	movs	r3, #240	; 0xf0
 8004f94:	039b      	lsls	r3, r3, #14
 8004f96:	401a      	ands	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b008      	add	sp, #32
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	00001388 	.word	0x00001388
 8004fb8:	efffffff 	.word	0xefffffff
 8004fbc:	feffffff 	.word	0xfeffffff
 8004fc0:	ffc2ffff 	.word	0xffc2ffff

08004fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0b3      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b5b      	ldr	r3, [pc, #364]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	4013      	ands	r3, r2
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d911      	bls.n	800500a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b58      	ldr	r3, [pc, #352]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	4393      	bics	r3, r2
 8004fee:	0019      	movs	r1, r3
 8004ff0:	4b55      	ldr	r3, [pc, #340]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff8:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e09a      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2202      	movs	r2, #2
 8005010:	4013      	ands	r3, r2
 8005012:	d015      	beq.n	8005040 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2204      	movs	r2, #4
 800501a:	4013      	ands	r3, r2
 800501c:	d006      	beq.n	800502c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800501e:	4b4b      	ldr	r3, [pc, #300]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	4b4a      	ldr	r3, [pc, #296]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 8005024:	21e0      	movs	r1, #224	; 0xe0
 8005026:	00c9      	lsls	r1, r1, #3
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b47      	ldr	r3, [pc, #284]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	22f0      	movs	r2, #240	; 0xf0
 8005032:	4393      	bics	r3, r2
 8005034:	0019      	movs	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	4b44      	ldr	r3, [pc, #272]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2201      	movs	r2, #1
 8005046:	4013      	ands	r3, r2
 8005048:	d040      	beq.n	80050cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b3e      	ldr	r3, [pc, #248]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	029b      	lsls	r3, r3, #10
 800505a:	4013      	ands	r3, r2
 800505c:	d114      	bne.n	8005088 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e06e      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	049b      	lsls	r3, r3, #18
 8005072:	4013      	ands	r3, r2
 8005074:	d108      	bne.n	8005088 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e062      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b34      	ldr	r3, [pc, #208]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2202      	movs	r2, #2
 8005080:	4013      	ands	r3, r2
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e05b      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005088:	4b30      	ldr	r3, [pc, #192]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2203      	movs	r2, #3
 800508e:	4393      	bics	r3, r2
 8005090:	0019      	movs	r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fd fb70 	bl	8002780 <HAL_GetTick>
 80050a0:	0003      	movs	r3, r0
 80050a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a4:	e009      	b.n	80050ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a6:	f7fd fb6b 	bl	8002780 <HAL_GetTick>
 80050aa:	0002      	movs	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	4a27      	ldr	r2, [pc, #156]	; (8005150 <HAL_RCC_ClockConfig+0x18c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e042      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	220c      	movs	r2, #12
 80050c0:	401a      	ands	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1ec      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2201      	movs	r2, #1
 80050d2:	4013      	ands	r3, r2
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d211      	bcs.n	80050fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	4393      	bics	r3, r2
 80050e2:	0019      	movs	r1, r3
 80050e4:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_RCC_ClockConfig+0x184>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	4013      	ands	r3, r2
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e020      	b.n	8005140 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2204      	movs	r2, #4
 8005104:	4013      	ands	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4a11      	ldr	r2, [pc, #68]	; (8005154 <HAL_RCC_ClockConfig+0x190>)
 800510e:	4013      	ands	r3, r2
 8005110:	0019      	movs	r1, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800511c:	f000 f820 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8005120:	0001      	movs	r1, r0
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <HAL_RCC_ClockConfig+0x188>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	220f      	movs	r2, #15
 800512a:	4013      	ands	r3, r2
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <HAL_RCC_ClockConfig+0x194>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	000a      	movs	r2, r1
 8005132:	40da      	lsrs	r2, r3
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_ClockConfig+0x198>)
 8005136:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005138:	2003      	movs	r0, #3
 800513a:	f7fd fadb 	bl	80026f4 <HAL_InitTick>
  
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40022000 	.word	0x40022000
 800514c:	40021000 	.word	0x40021000
 8005150:	00001388 	.word	0x00001388
 8005154:	fffff8ff 	.word	0xfffff8ff
 8005158:	080064c8 	.word	0x080064c8
 800515c:	20000008 	.word	0x20000008

08005160 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	220c      	movs	r2, #12
 8005184:	4013      	ands	r3, r2
 8005186:	2b04      	cmp	r3, #4
 8005188:	d002      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x30>
 800518a:	2b08      	cmp	r3, #8
 800518c:	d003      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0x36>
 800518e:	e02c      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005192:	613b      	str	r3, [r7, #16]
      break;
 8005194:	e02c      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	0c9b      	lsrs	r3, r3, #18
 800519a:	220f      	movs	r2, #15
 800519c:	4013      	ands	r3, r2
 800519e:	4a19      	ldr	r2, [pc, #100]	; (8005204 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051a0:	5cd3      	ldrb	r3, [r2, r3]
 80051a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80051a4:	4b15      	ldr	r3, [pc, #84]	; (80051fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	220f      	movs	r2, #15
 80051aa:	4013      	ands	r3, r2
 80051ac:	4a16      	ldr	r2, [pc, #88]	; (8005208 <HAL_RCC_GetSysClockFreq+0xa8>)
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	025b      	lsls	r3, r3, #9
 80051b8:	4013      	ands	r3, r2
 80051ba:	d009      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4810      	ldr	r0, [pc, #64]	; (8005200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051c0:	f7fa ffa2 	bl	8000108 <__udivsi3>
 80051c4:	0003      	movs	r3, r0
 80051c6:	001a      	movs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4353      	muls	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e009      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	000a      	movs	r2, r1
 80051d4:	0152      	lsls	r2, r2, #5
 80051d6:	1a52      	subs	r2, r2, r1
 80051d8:	0193      	lsls	r3, r2, #6
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	185b      	adds	r3, r3, r1
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	613b      	str	r3, [r7, #16]
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCC_GetSysClockFreq+0xa0>)
 80051ec:	613b      	str	r3, [r7, #16]
      break;
 80051ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80051f0:	693b      	ldr	r3, [r7, #16]
}
 80051f2:	0018      	movs	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b006      	add	sp, #24
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	40021000 	.word	0x40021000
 8005200:	007a1200 	.word	0x007a1200
 8005204:	080064d8 	.word	0x080064d8
 8005208:	080064e8 	.word	0x080064e8

0800520c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	025b      	lsls	r3, r3, #9
 8005224:	4013      	ands	r3, r2
 8005226:	d100      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005228:	e08e      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2017      	movs	r0, #23
 800522c:	183b      	adds	r3, r7, r0
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005232:	4b57      	ldr	r3, [pc, #348]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	055b      	lsls	r3, r3, #21
 800523a:	4013      	ands	r3, r2
 800523c:	d110      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	4b54      	ldr	r3, [pc, #336]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	4b53      	ldr	r3, [pc, #332]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0549      	lsls	r1, r1, #21
 8005248:	430a      	orrs	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
 800524c:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	055b      	lsls	r3, r3, #21
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525a:	183b      	adds	r3, r7, r0
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	4b4c      	ldr	r3, [pc, #304]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4013      	ands	r3, r2
 800526a:	d11a      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526c:	4b49      	ldr	r3, [pc, #292]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4b48      	ldr	r3, [pc, #288]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	0049      	lsls	r1, r1, #1
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527a:	f7fd fa81 	bl	8002780 <HAL_GetTick>
 800527e:	0003      	movs	r3, r0
 8005280:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005284:	f7fd fa7c 	bl	8002780 <HAL_GetTick>
 8005288:	0002      	movs	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e077      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b3f      	ldr	r3, [pc, #252]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4013      	ands	r3, r2
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052a2:	4b3b      	ldr	r3, [pc, #236]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052a4:	6a1a      	ldr	r2, [r3, #32]
 80052a6:	23c0      	movs	r3, #192	; 0xc0
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4013      	ands	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d034      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	23c0      	movs	r3, #192	; 0xc0
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d02c      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4a33      	ldr	r2, [pc, #204]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ce:	4b30      	ldr	r3, [pc, #192]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052d0:	6a1a      	ldr	r2, [r3, #32]
 80052d2:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052d4:	2180      	movs	r1, #128	; 0x80
 80052d6:	0249      	lsls	r1, r1, #9
 80052d8:	430a      	orrs	r2, r1
 80052da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052dc:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052e2:	492e      	ldr	r1, [pc, #184]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80052e4:	400a      	ands	r2, r1
 80052e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052e8:	4b29      	ldr	r3, [pc, #164]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	d013      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f6:	f7fd fa43 	bl	8002780 <HAL_GetTick>
 80052fa:	0003      	movs	r3, r0
 80052fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	e009      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fd fa3e 	bl	8002780 <HAL_GetTick>
 8005304:	0002      	movs	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e038      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005314:	4b1e      	ldr	r3, [pc, #120]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	d0f0      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005324:	4013      	ands	r3, r2
 8005326:	0019      	movs	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800532e:	430a      	orrs	r2, r1
 8005330:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005332:	2317      	movs	r3, #23
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533c:	4b14      	ldr	r3, [pc, #80]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005342:	4918      	ldr	r1, [pc, #96]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005344:	400a      	ands	r2, r1
 8005346:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	4013      	ands	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	2203      	movs	r2, #3
 8005358:	4393      	bics	r3, r2
 800535a:	0019      	movs	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005362:	430a      	orrs	r2, r1
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2220      	movs	r2, #32
 800536c:	4013      	ands	r3, r2
 800536e:	d009      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	2210      	movs	r2, #16
 8005376:	4393      	bics	r3, r2
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005380:	430a      	orrs	r2, r1
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b006      	add	sp, #24
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	40021000 	.word	0x40021000
 8005394:	40007000 	.word	0x40007000
 8005398:	fffffcff 	.word	0xfffffcff
 800539c:	fffeffff 	.word	0xfffeffff
 80053a0:	00001388 	.word	0x00001388
 80053a4:	efffffff 	.word	0xefffffff

080053a8 <__libc_init_array>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	2600      	movs	r6, #0
 80053ac:	4d0c      	ldr	r5, [pc, #48]	; (80053e0 <__libc_init_array+0x38>)
 80053ae:	4c0d      	ldr	r4, [pc, #52]	; (80053e4 <__libc_init_array+0x3c>)
 80053b0:	1b64      	subs	r4, r4, r5
 80053b2:	10a4      	asrs	r4, r4, #2
 80053b4:	42a6      	cmp	r6, r4
 80053b6:	d109      	bne.n	80053cc <__libc_init_array+0x24>
 80053b8:	2600      	movs	r6, #0
 80053ba:	f001 f837 	bl	800642c <_init>
 80053be:	4d0a      	ldr	r5, [pc, #40]	; (80053e8 <__libc_init_array+0x40>)
 80053c0:	4c0a      	ldr	r4, [pc, #40]	; (80053ec <__libc_init_array+0x44>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	42a6      	cmp	r6, r4
 80053c8:	d105      	bne.n	80053d6 <__libc_init_array+0x2e>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	00b3      	lsls	r3, r6, #2
 80053ce:	58eb      	ldr	r3, [r5, r3]
 80053d0:	4798      	blx	r3
 80053d2:	3601      	adds	r6, #1
 80053d4:	e7ee      	b.n	80053b4 <__libc_init_array+0xc>
 80053d6:	00b3      	lsls	r3, r6, #2
 80053d8:	58eb      	ldr	r3, [r5, r3]
 80053da:	4798      	blx	r3
 80053dc:	3601      	adds	r6, #1
 80053de:	e7f2      	b.n	80053c6 <__libc_init_array+0x1e>
 80053e0:	080066d0 	.word	0x080066d0
 80053e4:	080066d0 	.word	0x080066d0
 80053e8:	080066d0 	.word	0x080066d0
 80053ec:	080066d4 	.word	0x080066d4

080053f0 <memset>:
 80053f0:	0003      	movs	r3, r0
 80053f2:	1882      	adds	r2, r0, r2
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d100      	bne.n	80053fa <memset+0xa>
 80053f8:	4770      	bx	lr
 80053fa:	7019      	strb	r1, [r3, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	e7f9      	b.n	80053f4 <memset+0x4>

08005400 <sin>:
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	4a20      	ldr	r2, [pc, #128]	; (8005484 <sin+0x84>)
 8005404:	004b      	lsls	r3, r1, #1
 8005406:	b087      	sub	sp, #28
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	4293      	cmp	r3, r2
 800540c:	dc06      	bgt.n	800541c <sin+0x1c>
 800540e:	2300      	movs	r3, #0
 8005410:	2200      	movs	r2, #0
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	f000 fe5b 	bl	80060d0 <__kernel_sin>
 800541a:	e006      	b.n	800542a <sin+0x2a>
 800541c:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <sin+0x88>)
 800541e:	4293      	cmp	r3, r2
 8005420:	dd05      	ble.n	800542e <sin+0x2e>
 8005422:	0002      	movs	r2, r0
 8005424:	000b      	movs	r3, r1
 8005426:	f7fc fa1d 	bl	8001864 <__aeabi_dsub>
 800542a:	b007      	add	sp, #28
 800542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542e:	aa02      	add	r2, sp, #8
 8005430:	f000 f82c 	bl	800548c <__ieee754_rem_pio2>
 8005434:	9c04      	ldr	r4, [sp, #16]
 8005436:	9d05      	ldr	r5, [sp, #20]
 8005438:	2303      	movs	r3, #3
 800543a:	4003      	ands	r3, r0
 800543c:	2b01      	cmp	r3, #1
 800543e:	d00a      	beq.n	8005456 <sin+0x56>
 8005440:	9802      	ldr	r0, [sp, #8]
 8005442:	9903      	ldr	r1, [sp, #12]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d00d      	beq.n	8005464 <sin+0x64>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d115      	bne.n	8005478 <sin+0x78>
 800544c:	3301      	adds	r3, #1
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	0022      	movs	r2, r4
 8005452:	002b      	movs	r3, r5
 8005454:	e7df      	b.n	8005416 <sin+0x16>
 8005456:	0022      	movs	r2, r4
 8005458:	9802      	ldr	r0, [sp, #8]
 800545a:	9903      	ldr	r1, [sp, #12]
 800545c:	002b      	movs	r3, r5
 800545e:	f000 fa01 	bl	8005864 <__kernel_cos>
 8005462:	e7e2      	b.n	800542a <sin+0x2a>
 8005464:	2301      	movs	r3, #1
 8005466:	0022      	movs	r2, r4
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	002b      	movs	r3, r5
 800546c:	f000 fe30 	bl	80060d0 <__kernel_sin>
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	061b      	lsls	r3, r3, #24
 8005474:	18c9      	adds	r1, r1, r3
 8005476:	e7d8      	b.n	800542a <sin+0x2a>
 8005478:	0022      	movs	r2, r4
 800547a:	002b      	movs	r3, r5
 800547c:	f000 f9f2 	bl	8005864 <__kernel_cos>
 8005480:	e7f6      	b.n	8005470 <sin+0x70>
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	3fe921fb 	.word	0x3fe921fb
 8005488:	7fefffff 	.word	0x7fefffff

0800548c <__ieee754_rem_pio2>:
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	004b      	lsls	r3, r1, #1
 8005490:	b091      	sub	sp, #68	; 0x44
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	9302      	str	r3, [sp, #8]
 8005496:	0017      	movs	r7, r2
 8005498:	4bb6      	ldr	r3, [pc, #728]	; (8005774 <__ieee754_rem_pio2+0x2e8>)
 800549a:	9a02      	ldr	r2, [sp, #8]
 800549c:	0004      	movs	r4, r0
 800549e:	000d      	movs	r5, r1
 80054a0:	9109      	str	r1, [sp, #36]	; 0x24
 80054a2:	429a      	cmp	r2, r3
 80054a4:	dc09      	bgt.n	80054ba <__ieee754_rem_pio2+0x2e>
 80054a6:	0002      	movs	r2, r0
 80054a8:	000b      	movs	r3, r1
 80054aa:	603a      	str	r2, [r7, #0]
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	2300      	movs	r3, #0
 80054b2:	60ba      	str	r2, [r7, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	2600      	movs	r6, #0
 80054b8:	e025      	b.n	8005506 <__ieee754_rem_pio2+0x7a>
 80054ba:	4baf      	ldr	r3, [pc, #700]	; (8005778 <__ieee754_rem_pio2+0x2ec>)
 80054bc:	9a02      	ldr	r2, [sp, #8]
 80054be:	429a      	cmp	r2, r3
 80054c0:	dd00      	ble.n	80054c4 <__ieee754_rem_pio2+0x38>
 80054c2:	e06e      	b.n	80055a2 <__ieee754_rem_pio2+0x116>
 80054c4:	4ead      	ldr	r6, [pc, #692]	; (800577c <__ieee754_rem_pio2+0x2f0>)
 80054c6:	4aae      	ldr	r2, [pc, #696]	; (8005780 <__ieee754_rem_pio2+0x2f4>)
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	dd35      	ble.n	8005538 <__ieee754_rem_pio2+0xac>
 80054cc:	0020      	movs	r0, r4
 80054ce:	0029      	movs	r1, r5
 80054d0:	4baa      	ldr	r3, [pc, #680]	; (800577c <__ieee754_rem_pio2+0x2f0>)
 80054d2:	f7fc f9c7 	bl	8001864 <__aeabi_dsub>
 80054d6:	9b02      	ldr	r3, [sp, #8]
 80054d8:	0004      	movs	r4, r0
 80054da:	000d      	movs	r5, r1
 80054dc:	42b3      	cmp	r3, r6
 80054de:	d015      	beq.n	800550c <__ieee754_rem_pio2+0x80>
 80054e0:	4aa8      	ldr	r2, [pc, #672]	; (8005784 <__ieee754_rem_pio2+0x2f8>)
 80054e2:	4ba9      	ldr	r3, [pc, #676]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 80054e4:	f7fc f9be 	bl	8001864 <__aeabi_dsub>
 80054e8:	0002      	movs	r2, r0
 80054ea:	000b      	movs	r3, r1
 80054ec:	0020      	movs	r0, r4
 80054ee:	603a      	str	r2, [r7, #0]
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	0029      	movs	r1, r5
 80054f4:	f7fc f9b6 	bl	8001864 <__aeabi_dsub>
 80054f8:	4aa2      	ldr	r2, [pc, #648]	; (8005784 <__ieee754_rem_pio2+0x2f8>)
 80054fa:	4ba3      	ldr	r3, [pc, #652]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 80054fc:	f7fc f9b2 	bl	8001864 <__aeabi_dsub>
 8005500:	2601      	movs	r6, #1
 8005502:	60b8      	str	r0, [r7, #8]
 8005504:	60f9      	str	r1, [r7, #12]
 8005506:	0030      	movs	r0, r6
 8005508:	b011      	add	sp, #68	; 0x44
 800550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800550c:	22d3      	movs	r2, #211	; 0xd3
 800550e:	4b9e      	ldr	r3, [pc, #632]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 8005510:	0552      	lsls	r2, r2, #21
 8005512:	f7fc f9a7 	bl	8001864 <__aeabi_dsub>
 8005516:	4a9d      	ldr	r2, [pc, #628]	; (800578c <__ieee754_rem_pio2+0x300>)
 8005518:	4b9d      	ldr	r3, [pc, #628]	; (8005790 <__ieee754_rem_pio2+0x304>)
 800551a:	0004      	movs	r4, r0
 800551c:	000d      	movs	r5, r1
 800551e:	f7fc f9a1 	bl	8001864 <__aeabi_dsub>
 8005522:	0002      	movs	r2, r0
 8005524:	000b      	movs	r3, r1
 8005526:	0020      	movs	r0, r4
 8005528:	603a      	str	r2, [r7, #0]
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	0029      	movs	r1, r5
 800552e:	f7fc f999 	bl	8001864 <__aeabi_dsub>
 8005532:	4a96      	ldr	r2, [pc, #600]	; (800578c <__ieee754_rem_pio2+0x300>)
 8005534:	4b96      	ldr	r3, [pc, #600]	; (8005790 <__ieee754_rem_pio2+0x304>)
 8005536:	e7e1      	b.n	80054fc <__ieee754_rem_pio2+0x70>
 8005538:	0020      	movs	r0, r4
 800553a:	0029      	movs	r1, r5
 800553c:	4b8f      	ldr	r3, [pc, #572]	; (800577c <__ieee754_rem_pio2+0x2f0>)
 800553e:	f7fa ffb5 	bl	80004ac <__aeabi_dadd>
 8005542:	9b02      	ldr	r3, [sp, #8]
 8005544:	0004      	movs	r4, r0
 8005546:	000d      	movs	r5, r1
 8005548:	42b3      	cmp	r3, r6
 800554a:	d014      	beq.n	8005576 <__ieee754_rem_pio2+0xea>
 800554c:	4a8d      	ldr	r2, [pc, #564]	; (8005784 <__ieee754_rem_pio2+0x2f8>)
 800554e:	4b8e      	ldr	r3, [pc, #568]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 8005550:	f7fa ffac 	bl	80004ac <__aeabi_dadd>
 8005554:	0002      	movs	r2, r0
 8005556:	000b      	movs	r3, r1
 8005558:	0020      	movs	r0, r4
 800555a:	603a      	str	r2, [r7, #0]
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	0029      	movs	r1, r5
 8005560:	f7fc f980 	bl	8001864 <__aeabi_dsub>
 8005564:	4a87      	ldr	r2, [pc, #540]	; (8005784 <__ieee754_rem_pio2+0x2f8>)
 8005566:	4b88      	ldr	r3, [pc, #544]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 8005568:	f7fa ffa0 	bl	80004ac <__aeabi_dadd>
 800556c:	2601      	movs	r6, #1
 800556e:	60b8      	str	r0, [r7, #8]
 8005570:	60f9      	str	r1, [r7, #12]
 8005572:	4276      	negs	r6, r6
 8005574:	e7c7      	b.n	8005506 <__ieee754_rem_pio2+0x7a>
 8005576:	22d3      	movs	r2, #211	; 0xd3
 8005578:	4b83      	ldr	r3, [pc, #524]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 800557a:	0552      	lsls	r2, r2, #21
 800557c:	f7fa ff96 	bl	80004ac <__aeabi_dadd>
 8005580:	4a82      	ldr	r2, [pc, #520]	; (800578c <__ieee754_rem_pio2+0x300>)
 8005582:	4b83      	ldr	r3, [pc, #524]	; (8005790 <__ieee754_rem_pio2+0x304>)
 8005584:	0004      	movs	r4, r0
 8005586:	000d      	movs	r5, r1
 8005588:	f7fa ff90 	bl	80004ac <__aeabi_dadd>
 800558c:	0002      	movs	r2, r0
 800558e:	000b      	movs	r3, r1
 8005590:	0020      	movs	r0, r4
 8005592:	603a      	str	r2, [r7, #0]
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	0029      	movs	r1, r5
 8005598:	f7fc f964 	bl	8001864 <__aeabi_dsub>
 800559c:	4a7b      	ldr	r2, [pc, #492]	; (800578c <__ieee754_rem_pio2+0x300>)
 800559e:	4b7c      	ldr	r3, [pc, #496]	; (8005790 <__ieee754_rem_pio2+0x304>)
 80055a0:	e7e2      	b.n	8005568 <__ieee754_rem_pio2+0xdc>
 80055a2:	4b7c      	ldr	r3, [pc, #496]	; (8005794 <__ieee754_rem_pio2+0x308>)
 80055a4:	9a02      	ldr	r2, [sp, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	dd00      	ble.n	80055ac <__ieee754_rem_pio2+0x120>
 80055aa:	e0d3      	b.n	8005754 <__ieee754_rem_pio2+0x2c8>
 80055ac:	0020      	movs	r0, r4
 80055ae:	0029      	movs	r1, r5
 80055b0:	f000 fe3a 	bl	8006228 <fabs>
 80055b4:	4a78      	ldr	r2, [pc, #480]	; (8005798 <__ieee754_rem_pio2+0x30c>)
 80055b6:	4b79      	ldr	r3, [pc, #484]	; (800579c <__ieee754_rem_pio2+0x310>)
 80055b8:	0004      	movs	r4, r0
 80055ba:	000d      	movs	r5, r1
 80055bc:	f7fb fee6 	bl	800138c <__aeabi_dmul>
 80055c0:	2200      	movs	r2, #0
 80055c2:	4b77      	ldr	r3, [pc, #476]	; (80057a0 <__ieee754_rem_pio2+0x314>)
 80055c4:	f7fa ff72 	bl	80004ac <__aeabi_dadd>
 80055c8:	f7fc fcde 	bl	8001f88 <__aeabi_d2iz>
 80055cc:	0006      	movs	r6, r0
 80055ce:	f7fc fd11 	bl	8001ff4 <__aeabi_i2d>
 80055d2:	4a6b      	ldr	r2, [pc, #428]	; (8005780 <__ieee754_rem_pio2+0x2f4>)
 80055d4:	4b69      	ldr	r3, [pc, #420]	; (800577c <__ieee754_rem_pio2+0x2f0>)
 80055d6:	9006      	str	r0, [sp, #24]
 80055d8:	9107      	str	r1, [sp, #28]
 80055da:	f7fb fed7 	bl	800138c <__aeabi_dmul>
 80055de:	0002      	movs	r2, r0
 80055e0:	000b      	movs	r3, r1
 80055e2:	0020      	movs	r0, r4
 80055e4:	0029      	movs	r1, r5
 80055e6:	f7fc f93d 	bl	8001864 <__aeabi_dsub>
 80055ea:	4a66      	ldr	r2, [pc, #408]	; (8005784 <__ieee754_rem_pio2+0x2f8>)
 80055ec:	9004      	str	r0, [sp, #16]
 80055ee:	9105      	str	r1, [sp, #20]
 80055f0:	9806      	ldr	r0, [sp, #24]
 80055f2:	9907      	ldr	r1, [sp, #28]
 80055f4:	4b64      	ldr	r3, [pc, #400]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 80055f6:	f7fb fec9 	bl	800138c <__aeabi_dmul>
 80055fa:	0004      	movs	r4, r0
 80055fc:	000d      	movs	r5, r1
 80055fe:	2e1f      	cmp	r6, #31
 8005600:	dc0f      	bgt.n	8005622 <__ieee754_rem_pio2+0x196>
 8005602:	4a68      	ldr	r2, [pc, #416]	; (80057a4 <__ieee754_rem_pio2+0x318>)
 8005604:	1e73      	subs	r3, r6, #1
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	589b      	ldr	r3, [r3, r2]
 800560a:	9a02      	ldr	r2, [sp, #8]
 800560c:	4293      	cmp	r3, r2
 800560e:	d008      	beq.n	8005622 <__ieee754_rem_pio2+0x196>
 8005610:	9804      	ldr	r0, [sp, #16]
 8005612:	9905      	ldr	r1, [sp, #20]
 8005614:	0022      	movs	r2, r4
 8005616:	002b      	movs	r3, r5
 8005618:	f7fc f924 	bl	8001864 <__aeabi_dsub>
 800561c:	6038      	str	r0, [r7, #0]
 800561e:	6079      	str	r1, [r7, #4]
 8005620:	e012      	b.n	8005648 <__ieee754_rem_pio2+0x1bc>
 8005622:	0022      	movs	r2, r4
 8005624:	9804      	ldr	r0, [sp, #16]
 8005626:	9905      	ldr	r1, [sp, #20]
 8005628:	002b      	movs	r3, r5
 800562a:	f7fc f91b 	bl	8001864 <__aeabi_dsub>
 800562e:	9b02      	ldr	r3, [sp, #8]
 8005630:	151b      	asrs	r3, r3, #20
 8005632:	9308      	str	r3, [sp, #32]
 8005634:	9a08      	ldr	r2, [sp, #32]
 8005636:	004b      	lsls	r3, r1, #1
 8005638:	0d5b      	lsrs	r3, r3, #21
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b10      	cmp	r3, #16
 800563e:	dc21      	bgt.n	8005684 <__ieee754_rem_pio2+0x1f8>
 8005640:	0002      	movs	r2, r0
 8005642:	000b      	movs	r3, r1
 8005644:	603a      	str	r2, [r7, #0]
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	9804      	ldr	r0, [sp, #16]
 800564a:	9905      	ldr	r1, [sp, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	9302      	str	r3, [sp, #8]
 8005652:	9b02      	ldr	r3, [sp, #8]
 8005654:	f7fc f906 	bl	8001864 <__aeabi_dsub>
 8005658:	0022      	movs	r2, r4
 800565a:	002b      	movs	r3, r5
 800565c:	f7fc f902 	bl	8001864 <__aeabi_dsub>
 8005660:	000b      	movs	r3, r1
 8005662:	0002      	movs	r2, r0
 8005664:	60ba      	str	r2, [r7, #8]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	db00      	blt.n	8005670 <__ieee754_rem_pio2+0x1e4>
 800566e:	e74a      	b.n	8005506 <__ieee754_rem_pio2+0x7a>
 8005670:	2280      	movs	r2, #128	; 0x80
 8005672:	0612      	lsls	r2, r2, #24
 8005674:	4694      	mov	ip, r2
 8005676:	9b02      	ldr	r3, [sp, #8]
 8005678:	1889      	adds	r1, r1, r2
 800567a:	4463      	add	r3, ip
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	60b8      	str	r0, [r7, #8]
 8005680:	60f9      	str	r1, [r7, #12]
 8005682:	e776      	b.n	8005572 <__ieee754_rem_pio2+0xe6>
 8005684:	22d3      	movs	r2, #211	; 0xd3
 8005686:	9806      	ldr	r0, [sp, #24]
 8005688:	9907      	ldr	r1, [sp, #28]
 800568a:	4b3f      	ldr	r3, [pc, #252]	; (8005788 <__ieee754_rem_pio2+0x2fc>)
 800568c:	0552      	lsls	r2, r2, #21
 800568e:	f7fb fe7d 	bl	800138c <__aeabi_dmul>
 8005692:	0004      	movs	r4, r0
 8005694:	000d      	movs	r5, r1
 8005696:	0002      	movs	r2, r0
 8005698:	000b      	movs	r3, r1
 800569a:	9804      	ldr	r0, [sp, #16]
 800569c:	9905      	ldr	r1, [sp, #20]
 800569e:	f7fc f8e1 	bl	8001864 <__aeabi_dsub>
 80056a2:	0002      	movs	r2, r0
 80056a4:	000b      	movs	r3, r1
 80056a6:	9002      	str	r0, [sp, #8]
 80056a8:	9103      	str	r1, [sp, #12]
 80056aa:	9804      	ldr	r0, [sp, #16]
 80056ac:	9905      	ldr	r1, [sp, #20]
 80056ae:	f7fc f8d9 	bl	8001864 <__aeabi_dsub>
 80056b2:	0022      	movs	r2, r4
 80056b4:	002b      	movs	r3, r5
 80056b6:	f7fc f8d5 	bl	8001864 <__aeabi_dsub>
 80056ba:	0004      	movs	r4, r0
 80056bc:	000d      	movs	r5, r1
 80056be:	9806      	ldr	r0, [sp, #24]
 80056c0:	9907      	ldr	r1, [sp, #28]
 80056c2:	4a32      	ldr	r2, [pc, #200]	; (800578c <__ieee754_rem_pio2+0x300>)
 80056c4:	4b32      	ldr	r3, [pc, #200]	; (8005790 <__ieee754_rem_pio2+0x304>)
 80056c6:	f7fb fe61 	bl	800138c <__aeabi_dmul>
 80056ca:	0022      	movs	r2, r4
 80056cc:	002b      	movs	r3, r5
 80056ce:	f7fc f8c9 	bl	8001864 <__aeabi_dsub>
 80056d2:	0002      	movs	r2, r0
 80056d4:	000b      	movs	r3, r1
 80056d6:	0004      	movs	r4, r0
 80056d8:	000d      	movs	r5, r1
 80056da:	9802      	ldr	r0, [sp, #8]
 80056dc:	9903      	ldr	r1, [sp, #12]
 80056de:	f7fc f8c1 	bl	8001864 <__aeabi_dsub>
 80056e2:	9a08      	ldr	r2, [sp, #32]
 80056e4:	004b      	lsls	r3, r1, #1
 80056e6:	0d5b      	lsrs	r3, r3, #21
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b31      	cmp	r3, #49	; 0x31
 80056ec:	dc08      	bgt.n	8005700 <__ieee754_rem_pio2+0x274>
 80056ee:	0002      	movs	r2, r0
 80056f0:	000b      	movs	r3, r1
 80056f2:	603a      	str	r2, [r7, #0]
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	9a02      	ldr	r2, [sp, #8]
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	9204      	str	r2, [sp, #16]
 80056fc:	9305      	str	r3, [sp, #20]
 80056fe:	e7a3      	b.n	8005648 <__ieee754_rem_pio2+0x1bc>
 8005700:	22b8      	movs	r2, #184	; 0xb8
 8005702:	9806      	ldr	r0, [sp, #24]
 8005704:	9907      	ldr	r1, [sp, #28]
 8005706:	4b22      	ldr	r3, [pc, #136]	; (8005790 <__ieee754_rem_pio2+0x304>)
 8005708:	0592      	lsls	r2, r2, #22
 800570a:	f7fb fe3f 	bl	800138c <__aeabi_dmul>
 800570e:	0004      	movs	r4, r0
 8005710:	000d      	movs	r5, r1
 8005712:	0002      	movs	r2, r0
 8005714:	000b      	movs	r3, r1
 8005716:	9802      	ldr	r0, [sp, #8]
 8005718:	9903      	ldr	r1, [sp, #12]
 800571a:	f7fc f8a3 	bl	8001864 <__aeabi_dsub>
 800571e:	0002      	movs	r2, r0
 8005720:	000b      	movs	r3, r1
 8005722:	9004      	str	r0, [sp, #16]
 8005724:	9105      	str	r1, [sp, #20]
 8005726:	9802      	ldr	r0, [sp, #8]
 8005728:	9903      	ldr	r1, [sp, #12]
 800572a:	f7fc f89b 	bl	8001864 <__aeabi_dsub>
 800572e:	0022      	movs	r2, r4
 8005730:	002b      	movs	r3, r5
 8005732:	f7fc f897 	bl	8001864 <__aeabi_dsub>
 8005736:	0004      	movs	r4, r0
 8005738:	000d      	movs	r5, r1
 800573a:	9806      	ldr	r0, [sp, #24]
 800573c:	9907      	ldr	r1, [sp, #28]
 800573e:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <__ieee754_rem_pio2+0x31c>)
 8005740:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <__ieee754_rem_pio2+0x320>)
 8005742:	f7fb fe23 	bl	800138c <__aeabi_dmul>
 8005746:	0022      	movs	r2, r4
 8005748:	002b      	movs	r3, r5
 800574a:	f7fc f88b 	bl	8001864 <__aeabi_dsub>
 800574e:	0004      	movs	r4, r0
 8005750:	000d      	movs	r5, r1
 8005752:	e75d      	b.n	8005610 <__ieee754_rem_pio2+0x184>
 8005754:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <__ieee754_rem_pio2+0x324>)
 8005756:	9a02      	ldr	r2, [sp, #8]
 8005758:	429a      	cmp	r2, r3
 800575a:	dd2b      	ble.n	80057b4 <__ieee754_rem_pio2+0x328>
 800575c:	0022      	movs	r2, r4
 800575e:	002b      	movs	r3, r5
 8005760:	0020      	movs	r0, r4
 8005762:	0029      	movs	r1, r5
 8005764:	f7fc f87e 	bl	8001864 <__aeabi_dsub>
 8005768:	60b8      	str	r0, [r7, #8]
 800576a:	60f9      	str	r1, [r7, #12]
 800576c:	6038      	str	r0, [r7, #0]
 800576e:	6079      	str	r1, [r7, #4]
 8005770:	e6a1      	b.n	80054b6 <__ieee754_rem_pio2+0x2a>
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	3fe921fb 	.word	0x3fe921fb
 8005778:	4002d97b 	.word	0x4002d97b
 800577c:	3ff921fb 	.word	0x3ff921fb
 8005780:	54400000 	.word	0x54400000
 8005784:	1a626331 	.word	0x1a626331
 8005788:	3dd0b461 	.word	0x3dd0b461
 800578c:	2e037073 	.word	0x2e037073
 8005790:	3ba3198a 	.word	0x3ba3198a
 8005794:	413921fb 	.word	0x413921fb
 8005798:	6dc9c883 	.word	0x6dc9c883
 800579c:	3fe45f30 	.word	0x3fe45f30
 80057a0:	3fe00000 	.word	0x3fe00000
 80057a4:	080064f8 	.word	0x080064f8
 80057a8:	252049c1 	.word	0x252049c1
 80057ac:	397b839a 	.word	0x397b839a
 80057b0:	7fefffff 	.word	0x7fefffff
 80057b4:	9a02      	ldr	r2, [sp, #8]
 80057b6:	0020      	movs	r0, r4
 80057b8:	1516      	asrs	r6, r2, #20
 80057ba:	4a27      	ldr	r2, [pc, #156]	; (8005858 <__ieee754_rem_pio2+0x3cc>)
 80057bc:	18b6      	adds	r6, r6, r2
 80057be:	9a02      	ldr	r2, [sp, #8]
 80057c0:	0533      	lsls	r3, r6, #20
 80057c2:	1ad5      	subs	r5, r2, r3
 80057c4:	0029      	movs	r1, r5
 80057c6:	f7fc fbdf 	bl	8001f88 <__aeabi_d2iz>
 80057ca:	f7fc fc13 	bl	8001ff4 <__aeabi_i2d>
 80057ce:	0002      	movs	r2, r0
 80057d0:	000b      	movs	r3, r1
 80057d2:	0020      	movs	r0, r4
 80057d4:	0029      	movs	r1, r5
 80057d6:	920a      	str	r2, [sp, #40]	; 0x28
 80057d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80057da:	f7fc f843 	bl	8001864 <__aeabi_dsub>
 80057de:	2200      	movs	r2, #0
 80057e0:	4b1e      	ldr	r3, [pc, #120]	; (800585c <__ieee754_rem_pio2+0x3d0>)
 80057e2:	f7fb fdd3 	bl	800138c <__aeabi_dmul>
 80057e6:	000d      	movs	r5, r1
 80057e8:	0004      	movs	r4, r0
 80057ea:	f7fc fbcd 	bl	8001f88 <__aeabi_d2iz>
 80057ee:	f7fc fc01 	bl	8001ff4 <__aeabi_i2d>
 80057f2:	0002      	movs	r2, r0
 80057f4:	000b      	movs	r3, r1
 80057f6:	0020      	movs	r0, r4
 80057f8:	0029      	movs	r1, r5
 80057fa:	920c      	str	r2, [sp, #48]	; 0x30
 80057fc:	930d      	str	r3, [sp, #52]	; 0x34
 80057fe:	f7fc f831 	bl	8001864 <__aeabi_dsub>
 8005802:	2200      	movs	r2, #0
 8005804:	4b15      	ldr	r3, [pc, #84]	; (800585c <__ieee754_rem_pio2+0x3d0>)
 8005806:	f7fb fdc1 	bl	800138c <__aeabi_dmul>
 800580a:	2503      	movs	r5, #3
 800580c:	900e      	str	r0, [sp, #56]	; 0x38
 800580e:	910f      	str	r1, [sp, #60]	; 0x3c
 8005810:	ac0a      	add	r4, sp, #40	; 0x28
 8005812:	2200      	movs	r2, #0
 8005814:	6920      	ldr	r0, [r4, #16]
 8005816:	6961      	ldr	r1, [r4, #20]
 8005818:	2300      	movs	r3, #0
 800581a:	9502      	str	r5, [sp, #8]
 800581c:	3c08      	subs	r4, #8
 800581e:	3d01      	subs	r5, #1
 8005820:	f7fa fdf8 	bl	8000414 <__aeabi_dcmpeq>
 8005824:	2800      	cmp	r0, #0
 8005826:	d1f4      	bne.n	8005812 <__ieee754_rem_pio2+0x386>
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <__ieee754_rem_pio2+0x3d4>)
 800582a:	0032      	movs	r2, r6
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	2302      	movs	r3, #2
 8005830:	0039      	movs	r1, r7
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	a80a      	add	r0, sp, #40	; 0x28
 8005836:	9b02      	ldr	r3, [sp, #8]
 8005838:	f000 f8d4 	bl	80059e4 <__kernel_rem_pio2>
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	0006      	movs	r6, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	db00      	blt.n	8005846 <__ieee754_rem_pio2+0x3ba>
 8005844:	e65f      	b.n	8005506 <__ieee754_rem_pio2+0x7a>
 8005846:	2280      	movs	r2, #128	; 0x80
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0612      	lsls	r2, r2, #24
 800584c:	189b      	adds	r3, r3, r2
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	189b      	adds	r3, r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e68c      	b.n	8005572 <__ieee754_rem_pio2+0xe6>
 8005858:	fffffbea 	.word	0xfffffbea
 800585c:	41700000 	.word	0x41700000
 8005860:	08006578 	.word	0x08006578

08005864 <__kernel_cos>:
 8005864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005866:	b087      	sub	sp, #28
 8005868:	9204      	str	r2, [sp, #16]
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	004b      	lsls	r3, r1, #1
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	23f9      	movs	r3, #249	; 0xf9
 8005874:	9a00      	ldr	r2, [sp, #0]
 8005876:	0007      	movs	r7, r0
 8005878:	000e      	movs	r6, r1
 800587a:	059b      	lsls	r3, r3, #22
 800587c:	429a      	cmp	r2, r3
 800587e:	da04      	bge.n	800588a <__kernel_cos+0x26>
 8005880:	f7fc fb82 	bl	8001f88 <__aeabi_d2iz>
 8005884:	2800      	cmp	r0, #0
 8005886:	d100      	bne.n	800588a <__kernel_cos+0x26>
 8005888:	e084      	b.n	8005994 <__kernel_cos+0x130>
 800588a:	003a      	movs	r2, r7
 800588c:	0033      	movs	r3, r6
 800588e:	0038      	movs	r0, r7
 8005890:	0031      	movs	r1, r6
 8005892:	f7fb fd7b 	bl	800138c <__aeabi_dmul>
 8005896:	2200      	movs	r2, #0
 8005898:	4b40      	ldr	r3, [pc, #256]	; (800599c <__kernel_cos+0x138>)
 800589a:	0004      	movs	r4, r0
 800589c:	000d      	movs	r5, r1
 800589e:	f7fb fd75 	bl	800138c <__aeabi_dmul>
 80058a2:	4a3f      	ldr	r2, [pc, #252]	; (80059a0 <__kernel_cos+0x13c>)
 80058a4:	9002      	str	r0, [sp, #8]
 80058a6:	9103      	str	r1, [sp, #12]
 80058a8:	4b3e      	ldr	r3, [pc, #248]	; (80059a4 <__kernel_cos+0x140>)
 80058aa:	0020      	movs	r0, r4
 80058ac:	0029      	movs	r1, r5
 80058ae:	f7fb fd6d 	bl	800138c <__aeabi_dmul>
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <__kernel_cos+0x144>)
 80058b4:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <__kernel_cos+0x148>)
 80058b6:	f7fa fdf9 	bl	80004ac <__aeabi_dadd>
 80058ba:	0022      	movs	r2, r4
 80058bc:	002b      	movs	r3, r5
 80058be:	f7fb fd65 	bl	800138c <__aeabi_dmul>
 80058c2:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <__kernel_cos+0x14c>)
 80058c4:	4b3b      	ldr	r3, [pc, #236]	; (80059b4 <__kernel_cos+0x150>)
 80058c6:	f7fb ffcd 	bl	8001864 <__aeabi_dsub>
 80058ca:	0022      	movs	r2, r4
 80058cc:	002b      	movs	r3, r5
 80058ce:	f7fb fd5d 	bl	800138c <__aeabi_dmul>
 80058d2:	4a39      	ldr	r2, [pc, #228]	; (80059b8 <__kernel_cos+0x154>)
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <__kernel_cos+0x158>)
 80058d6:	f7fa fde9 	bl	80004ac <__aeabi_dadd>
 80058da:	0022      	movs	r2, r4
 80058dc:	002b      	movs	r3, r5
 80058de:	f7fb fd55 	bl	800138c <__aeabi_dmul>
 80058e2:	4a37      	ldr	r2, [pc, #220]	; (80059c0 <__kernel_cos+0x15c>)
 80058e4:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <__kernel_cos+0x160>)
 80058e6:	f7fb ffbd 	bl	8001864 <__aeabi_dsub>
 80058ea:	0022      	movs	r2, r4
 80058ec:	002b      	movs	r3, r5
 80058ee:	f7fb fd4d 	bl	800138c <__aeabi_dmul>
 80058f2:	4a35      	ldr	r2, [pc, #212]	; (80059c8 <__kernel_cos+0x164>)
 80058f4:	4b35      	ldr	r3, [pc, #212]	; (80059cc <__kernel_cos+0x168>)
 80058f6:	f7fa fdd9 	bl	80004ac <__aeabi_dadd>
 80058fa:	0022      	movs	r2, r4
 80058fc:	002b      	movs	r3, r5
 80058fe:	f7fb fd45 	bl	800138c <__aeabi_dmul>
 8005902:	0022      	movs	r2, r4
 8005904:	002b      	movs	r3, r5
 8005906:	f7fb fd41 	bl	800138c <__aeabi_dmul>
 800590a:	9a04      	ldr	r2, [sp, #16]
 800590c:	9b05      	ldr	r3, [sp, #20]
 800590e:	0004      	movs	r4, r0
 8005910:	000d      	movs	r5, r1
 8005912:	0038      	movs	r0, r7
 8005914:	0031      	movs	r1, r6
 8005916:	f7fb fd39 	bl	800138c <__aeabi_dmul>
 800591a:	0002      	movs	r2, r0
 800591c:	000b      	movs	r3, r1
 800591e:	0020      	movs	r0, r4
 8005920:	0029      	movs	r1, r5
 8005922:	f7fb ff9f 	bl	8001864 <__aeabi_dsub>
 8005926:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <__kernel_cos+0x16c>)
 8005928:	9a00      	ldr	r2, [sp, #0]
 800592a:	0004      	movs	r4, r0
 800592c:	000d      	movs	r5, r1
 800592e:	429a      	cmp	r2, r3
 8005930:	dc0d      	bgt.n	800594e <__kernel_cos+0xea>
 8005932:	0002      	movs	r2, r0
 8005934:	000b      	movs	r3, r1
 8005936:	9802      	ldr	r0, [sp, #8]
 8005938:	9903      	ldr	r1, [sp, #12]
 800593a:	f7fb ff93 	bl	8001864 <__aeabi_dsub>
 800593e:	0002      	movs	r2, r0
 8005940:	2000      	movs	r0, #0
 8005942:	000b      	movs	r3, r1
 8005944:	4923      	ldr	r1, [pc, #140]	; (80059d4 <__kernel_cos+0x170>)
 8005946:	f7fb ff8d 	bl	8001864 <__aeabi_dsub>
 800594a:	b007      	add	sp, #28
 800594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594e:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <__kernel_cos+0x174>)
 8005950:	9a00      	ldr	r2, [sp, #0]
 8005952:	2600      	movs	r6, #0
 8005954:	429a      	cmp	r2, r3
 8005956:	dc1b      	bgt.n	8005990 <__kernel_cos+0x12c>
 8005958:	0013      	movs	r3, r2
 800595a:	4a20      	ldr	r2, [pc, #128]	; (80059dc <__kernel_cos+0x178>)
 800595c:	4694      	mov	ip, r2
 800595e:	4463      	add	r3, ip
 8005960:	001f      	movs	r7, r3
 8005962:	0032      	movs	r2, r6
 8005964:	003b      	movs	r3, r7
 8005966:	2000      	movs	r0, #0
 8005968:	491a      	ldr	r1, [pc, #104]	; (80059d4 <__kernel_cos+0x170>)
 800596a:	f7fb ff7b 	bl	8001864 <__aeabi_dsub>
 800596e:	0032      	movs	r2, r6
 8005970:	003b      	movs	r3, r7
 8005972:	9000      	str	r0, [sp, #0]
 8005974:	9101      	str	r1, [sp, #4]
 8005976:	9802      	ldr	r0, [sp, #8]
 8005978:	9903      	ldr	r1, [sp, #12]
 800597a:	f7fb ff73 	bl	8001864 <__aeabi_dsub>
 800597e:	0022      	movs	r2, r4
 8005980:	002b      	movs	r3, r5
 8005982:	f7fb ff6f 	bl	8001864 <__aeabi_dsub>
 8005986:	0002      	movs	r2, r0
 8005988:	000b      	movs	r3, r1
 800598a:	9800      	ldr	r0, [sp, #0]
 800598c:	9901      	ldr	r1, [sp, #4]
 800598e:	e7da      	b.n	8005946 <__kernel_cos+0xe2>
 8005990:	4f13      	ldr	r7, [pc, #76]	; (80059e0 <__kernel_cos+0x17c>)
 8005992:	e7e6      	b.n	8005962 <__kernel_cos+0xfe>
 8005994:	2000      	movs	r0, #0
 8005996:	490f      	ldr	r1, [pc, #60]	; (80059d4 <__kernel_cos+0x170>)
 8005998:	e7d7      	b.n	800594a <__kernel_cos+0xe6>
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	3fe00000 	.word	0x3fe00000
 80059a0:	be8838d4 	.word	0xbe8838d4
 80059a4:	bda8fae9 	.word	0xbda8fae9
 80059a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80059ac:	3e21ee9e 	.word	0x3e21ee9e
 80059b0:	809c52ad 	.word	0x809c52ad
 80059b4:	3e927e4f 	.word	0x3e927e4f
 80059b8:	19cb1590 	.word	0x19cb1590
 80059bc:	3efa01a0 	.word	0x3efa01a0
 80059c0:	16c15177 	.word	0x16c15177
 80059c4:	3f56c16c 	.word	0x3f56c16c
 80059c8:	5555554c 	.word	0x5555554c
 80059cc:	3fa55555 	.word	0x3fa55555
 80059d0:	3fd33332 	.word	0x3fd33332
 80059d4:	3ff00000 	.word	0x3ff00000
 80059d8:	3fe90000 	.word	0x3fe90000
 80059dc:	ffe00000 	.word	0xffe00000
 80059e0:	3fd20000 	.word	0x3fd20000

080059e4 <__kernel_rem_pio2>:
 80059e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e6:	4cd0      	ldr	r4, [pc, #832]	; (8005d28 <__kernel_rem_pio2+0x344>)
 80059e8:	44a5      	add	sp, r4
 80059ea:	930d      	str	r3, [sp, #52]	; 0x34
 80059ec:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80059ee:	0014      	movs	r4, r2
 80059f0:	009a      	lsls	r2, r3, #2
 80059f2:	4bce      	ldr	r3, [pc, #824]	; (8005d2c <__kernel_rem_pio2+0x348>)
 80059f4:	900e      	str	r0, [sp, #56]	; 0x38
 80059f6:	58d3      	ldr	r3, [r2, r3]
 80059f8:	9107      	str	r1, [sp, #28]
 80059fa:	9308      	str	r3, [sp, #32]
 80059fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059fe:	3b01      	subs	r3, #1
 8005a00:	930c      	str	r3, [sp, #48]	; 0x30
 8005a02:	2300      	movs	r3, #0
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	0023      	movs	r3, r4
 8005a08:	3314      	adds	r3, #20
 8005a0a:	db04      	blt.n	8005a16 <__kernel_rem_pio2+0x32>
 8005a0c:	2118      	movs	r1, #24
 8005a0e:	1ee0      	subs	r0, r4, #3
 8005a10:	f7fa fc04 	bl	800021c <__divsi3>
 8005a14:	9000      	str	r0, [sp, #0]
 8005a16:	2218      	movs	r2, #24
 8005a18:	9b00      	ldr	r3, [sp, #0]
 8005a1a:	4252      	negs	r2, r2
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	435a      	muls	r2, r3
 8005a20:	1913      	adds	r3, r2, r4
 8005a22:	9302      	str	r3, [sp, #8]
 8005a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	ae26      	add	r6, sp, #152	; 0x98
 8005a2a:	1a9d      	subs	r5, r3, r2
 8005a2c:	002c      	movs	r4, r5
 8005a2e:	9b08      	ldr	r3, [sp, #32]
 8005a30:	189f      	adds	r7, r3, r2
 8005a32:	1b63      	subs	r3, r4, r5
 8005a34:	429f      	cmp	r7, r3
 8005a36:	da17      	bge.n	8005a68 <__kernel_rem_pio2+0x84>
 8005a38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	ab76      	add	r3, sp, #472	; 0x1d8
 8005a40:	930a      	str	r3, [sp, #40]	; 0x28
 8005a42:	2301      	movs	r3, #1
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a48:	ab28      	add	r3, sp, #160	; 0xa0
 8005a4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a50:	189b      	adds	r3, r3, r2
 8005a52:	9a08      	ldr	r2, [sp, #32]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	db31      	blt.n	8005abc <__kernel_rem_pio2+0xd8>
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	2400      	movs	r4, #0
 8005a5c:	00de      	lsls	r6, r3, #3
 8005a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a60:	2500      	movs	r5, #0
 8005a62:	2700      	movs	r7, #0
 8005a64:	199e      	adds	r6, r3, r6
 8005a66:	e01e      	b.n	8005aa6 <__kernel_rem_pio2+0xc2>
 8005a68:	2c00      	cmp	r4, #0
 8005a6a:	db07      	blt.n	8005a7c <__kernel_rem_pio2+0x98>
 8005a6c:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8005a6e:	00a3      	lsls	r3, r4, #2
 8005a70:	58d0      	ldr	r0, [r2, r3]
 8005a72:	f7fc fabf 	bl	8001ff4 <__aeabi_i2d>
 8005a76:	c603      	stmia	r6!, {r0, r1}
 8005a78:	3401      	adds	r4, #1
 8005a7a:	e7da      	b.n	8005a32 <__kernel_rem_pio2+0x4e>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	e7f9      	b.n	8005a76 <__kernel_rem_pio2+0x92>
 8005a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a84:	00f9      	lsls	r1, r7, #3
 8005a86:	1859      	adds	r1, r3, r1
 8005a88:	6808      	ldr	r0, [r1, #0]
 8005a8a:	6849      	ldr	r1, [r1, #4]
 8005a8c:	6832      	ldr	r2, [r6, #0]
 8005a8e:	6873      	ldr	r3, [r6, #4]
 8005a90:	f7fb fc7c 	bl	800138c <__aeabi_dmul>
 8005a94:	0002      	movs	r2, r0
 8005a96:	000b      	movs	r3, r1
 8005a98:	0020      	movs	r0, r4
 8005a9a:	0029      	movs	r1, r5
 8005a9c:	f7fa fd06 	bl	80004ac <__aeabi_dadd>
 8005aa0:	0004      	movs	r4, r0
 8005aa2:	000d      	movs	r5, r1
 8005aa4:	3701      	adds	r7, #1
 8005aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aa8:	3e08      	subs	r6, #8
 8005aaa:	429f      	cmp	r7, r3
 8005aac:	dde9      	ble.n	8005a82 <__kernel_rem_pio2+0x9e>
 8005aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab0:	c330      	stmia	r3!, {r4, r5}
 8005ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	e7c7      	b.n	8005a4c <__kernel_rem_pio2+0x68>
 8005abc:	9b08      	ldr	r3, [sp, #32]
 8005abe:	aa12      	add	r2, sp, #72	; 0x48
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	9310      	str	r3, [sp, #64]	; 0x40
 8005ac6:	9b00      	ldr	r3, [sp, #0]
 8005ac8:	0098      	lsls	r0, r3, #2
 8005aca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005acc:	181b      	adds	r3, r3, r0
 8005ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	9b04      	ldr	r3, [sp, #16]
 8005ad6:	aa76      	add	r2, sp, #472	; 0x1d8
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	18d3      	adds	r3, r2, r3
 8005adc:	681c      	ldr	r4, [r3, #0]
 8005ade:	685d      	ldr	r5, [r3, #4]
 8005ae0:	ab12      	add	r3, sp, #72	; 0x48
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ae6:	9b04      	ldr	r3, [sp, #16]
 8005ae8:	9211      	str	r2, [sp, #68]	; 0x44
 8005aea:	930a      	str	r3, [sp, #40]	; 0x28
 8005aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dc74      	bgt.n	8005bdc <__kernel_rem_pio2+0x1f8>
 8005af2:	0020      	movs	r0, r4
 8005af4:	0029      	movs	r1, r5
 8005af6:	9a02      	ldr	r2, [sp, #8]
 8005af8:	f000 fc24 	bl	8006344 <scalbn>
 8005afc:	23ff      	movs	r3, #255	; 0xff
 8005afe:	2200      	movs	r2, #0
 8005b00:	059b      	lsls	r3, r3, #22
 8005b02:	0004      	movs	r4, r0
 8005b04:	000d      	movs	r5, r1
 8005b06:	f7fb fc41 	bl	800138c <__aeabi_dmul>
 8005b0a:	f000 fb91 	bl	8006230 <floor>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	4b87      	ldr	r3, [pc, #540]	; (8005d30 <__kernel_rem_pio2+0x34c>)
 8005b12:	f7fb fc3b 	bl	800138c <__aeabi_dmul>
 8005b16:	0002      	movs	r2, r0
 8005b18:	000b      	movs	r3, r1
 8005b1a:	0020      	movs	r0, r4
 8005b1c:	0029      	movs	r1, r5
 8005b1e:	f7fb fea1 	bl	8001864 <__aeabi_dsub>
 8005b22:	000d      	movs	r5, r1
 8005b24:	0004      	movs	r4, r0
 8005b26:	f7fc fa2f 	bl	8001f88 <__aeabi_d2iz>
 8005b2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b2c:	f7fc fa62 	bl	8001ff4 <__aeabi_i2d>
 8005b30:	000b      	movs	r3, r1
 8005b32:	0002      	movs	r2, r0
 8005b34:	0029      	movs	r1, r5
 8005b36:	0020      	movs	r0, r4
 8005b38:	f7fb fe94 	bl	8001864 <__aeabi_dsub>
 8005b3c:	9b02      	ldr	r3, [sp, #8]
 8005b3e:	0006      	movs	r6, r0
 8005b40:	000f      	movs	r7, r1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	dd74      	ble.n	8005c30 <__kernel_rem_pio2+0x24c>
 8005b46:	2118      	movs	r1, #24
 8005b48:	9b04      	ldr	r3, [sp, #16]
 8005b4a:	aa12      	add	r2, sp, #72	; 0x48
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	589a      	ldr	r2, [r3, r2]
 8005b52:	9802      	ldr	r0, [sp, #8]
 8005b54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b56:	1a09      	subs	r1, r1, r0
 8005b58:	0010      	movs	r0, r2
 8005b5a:	4108      	asrs	r0, r1
 8005b5c:	1824      	adds	r4, r4, r0
 8005b5e:	4088      	lsls	r0, r1
 8005b60:	a912      	add	r1, sp, #72	; 0x48
 8005b62:	1a12      	subs	r2, r2, r0
 8005b64:	505a      	str	r2, [r3, r1]
 8005b66:	2317      	movs	r3, #23
 8005b68:	9902      	ldr	r1, [sp, #8]
 8005b6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8005b6c:	1a5b      	subs	r3, r3, r1
 8005b6e:	411a      	asrs	r2, r3
 8005b70:	920a      	str	r2, [sp, #40]	; 0x28
 8005b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dd6d      	ble.n	8005c54 <__kernel_rem_pio2+0x270>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b7c:	2080      	movs	r0, #128	; 0x80
 8005b7e:	3301      	adds	r3, #1
 8005b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b82:	4b6c      	ldr	r3, [pc, #432]	; (8005d34 <__kernel_rem_pio2+0x350>)
 8005b84:	0014      	movs	r4, r2
 8005b86:	469c      	mov	ip, r3
 8005b88:	2501      	movs	r5, #1
 8005b8a:	0440      	lsls	r0, r0, #17
 8005b8c:	9b04      	ldr	r3, [sp, #16]
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	dd00      	ble.n	8005b94 <__kernel_rem_pio2+0x1b0>
 8005b92:	e098      	b.n	8005cc6 <__kernel_rem_pio2+0x2e2>
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd05      	ble.n	8005ba6 <__kernel_rem_pio2+0x1c2>
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d100      	bne.n	8005ba0 <__kernel_rem_pio2+0x1bc>
 8005b9e:	e0a8      	b.n	8005cf2 <__kernel_rem_pio2+0x30e>
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d100      	bne.n	8005ba6 <__kernel_rem_pio2+0x1c2>
 8005ba4:	e0b0      	b.n	8005d08 <__kernel_rem_pio2+0x324>
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d153      	bne.n	8005c54 <__kernel_rem_pio2+0x270>
 8005bac:	0032      	movs	r2, r6
 8005bae:	003b      	movs	r3, r7
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	4961      	ldr	r1, [pc, #388]	; (8005d38 <__kernel_rem_pio2+0x354>)
 8005bb4:	f7fb fe56 	bl	8001864 <__aeabi_dsub>
 8005bb8:	0006      	movs	r6, r0
 8005bba:	000f      	movs	r7, r1
 8005bbc:	2c00      	cmp	r4, #0
 8005bbe:	d049      	beq.n	8005c54 <__kernel_rem_pio2+0x270>
 8005bc0:	9a02      	ldr	r2, [sp, #8]
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	495c      	ldr	r1, [pc, #368]	; (8005d38 <__kernel_rem_pio2+0x354>)
 8005bc6:	f000 fbbd 	bl	8006344 <scalbn>
 8005bca:	0002      	movs	r2, r0
 8005bcc:	000b      	movs	r3, r1
 8005bce:	0030      	movs	r0, r6
 8005bd0:	0039      	movs	r1, r7
 8005bd2:	f7fb fe47 	bl	8001864 <__aeabi_dsub>
 8005bd6:	0006      	movs	r6, r0
 8005bd8:	000f      	movs	r7, r1
 8005bda:	e03b      	b.n	8005c54 <__kernel_rem_pio2+0x270>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	4b57      	ldr	r3, [pc, #348]	; (8005d3c <__kernel_rem_pio2+0x358>)
 8005be0:	0020      	movs	r0, r4
 8005be2:	0029      	movs	r1, r5
 8005be4:	f7fb fbd2 	bl	800138c <__aeabi_dmul>
 8005be8:	f7fc f9ce 	bl	8001f88 <__aeabi_d2iz>
 8005bec:	f7fc fa02 	bl	8001ff4 <__aeabi_i2d>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4b53      	ldr	r3, [pc, #332]	; (8005d40 <__kernel_rem_pio2+0x35c>)
 8005bf4:	0006      	movs	r6, r0
 8005bf6:	000f      	movs	r7, r1
 8005bf8:	f7fb fbc8 	bl	800138c <__aeabi_dmul>
 8005bfc:	0002      	movs	r2, r0
 8005bfe:	000b      	movs	r3, r1
 8005c00:	0020      	movs	r0, r4
 8005c02:	0029      	movs	r1, r5
 8005c04:	f7fb fe2e 	bl	8001864 <__aeabi_dsub>
 8005c08:	f7fc f9be 	bl	8001f88 <__aeabi_d2iz>
 8005c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c10:	c301      	stmia	r3!, {r0}
 8005c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c16:	0030      	movs	r0, r6
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	0039      	movs	r1, r7
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f7fa fc41 	bl	80004ac <__aeabi_dadd>
 8005c2a:	0004      	movs	r4, r0
 8005c2c:	000d      	movs	r5, r1
 8005c2e:	e75d      	b.n	8005aec <__kernel_rem_pio2+0x108>
 8005c30:	9b02      	ldr	r3, [sp, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <__kernel_rem_pio2+0x262>
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	aa12      	add	r2, sp, #72	; 0x48
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	5898      	ldr	r0, [r3, r2]
 8005c40:	15c3      	asrs	r3, r0, #23
 8005c42:	930a      	str	r3, [sp, #40]	; 0x28
 8005c44:	e795      	b.n	8005b72 <__kernel_rem_pio2+0x18e>
 8005c46:	2200      	movs	r2, #0
 8005c48:	4b3e      	ldr	r3, [pc, #248]	; (8005d44 <__kernel_rem_pio2+0x360>)
 8005c4a:	f7fa fc07 	bl	800045c <__aeabi_dcmpge>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d136      	bne.n	8005cc0 <__kernel_rem_pio2+0x2dc>
 8005c52:	900a      	str	r0, [sp, #40]	; 0x28
 8005c54:	2200      	movs	r2, #0
 8005c56:	2300      	movs	r3, #0
 8005c58:	0030      	movs	r0, r6
 8005c5a:	0039      	movs	r1, r7
 8005c5c:	f7fa fbda 	bl	8000414 <__aeabi_dcmpeq>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d100      	bne.n	8005c66 <__kernel_rem_pio2+0x282>
 8005c64:	e0b9      	b.n	8005dda <__kernel_rem_pio2+0x3f6>
 8005c66:	2200      	movs	r2, #0
 8005c68:	9b04      	ldr	r3, [sp, #16]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	9908      	ldr	r1, [sp, #32]
 8005c70:	428b      	cmp	r3, r1
 8005c72:	da52      	bge.n	8005d1a <__kernel_rem_pio2+0x336>
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	d100      	bne.n	8005c7a <__kernel_rem_pio2+0x296>
 8005c78:	e095      	b.n	8005da6 <__kernel_rem_pio2+0x3c2>
 8005c7a:	9b02      	ldr	r3, [sp, #8]
 8005c7c:	aa12      	add	r2, sp, #72	; 0x48
 8005c7e:	3b18      	subs	r3, #24
 8005c80:	9302      	str	r3, [sp, #8]
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	589b      	ldr	r3, [r3, r2]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d100      	bne.n	8005c8e <__kernel_rem_pio2+0x2aa>
 8005c8c:	e0a1      	b.n	8005dd2 <__kernel_rem_pio2+0x3ee>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	9a02      	ldr	r2, [sp, #8]
 8005c92:	4929      	ldr	r1, [pc, #164]	; (8005d38 <__kernel_rem_pio2+0x354>)
 8005c94:	f000 fb56 	bl	8006344 <scalbn>
 8005c98:	0006      	movs	r6, r0
 8005c9a:	000f      	movs	r7, r1
 8005c9c:	9c00      	ldr	r4, [sp, #0]
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	db00      	blt.n	8005ca4 <__kernel_rem_pio2+0x2c0>
 8005ca2:	e0d9      	b.n	8005e58 <__kernel_rem_pio2+0x474>
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	9d00      	ldr	r5, [sp, #0]
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	da00      	bge.n	8005cae <__kernel_rem_pio2+0x2ca>
 8005cac:	e10c      	b.n	8005ec8 <__kernel_rem_pio2+0x4e4>
 8005cae:	ab76      	add	r3, sp, #472	; 0x1d8
 8005cb0:	00ef      	lsls	r7, r5, #3
 8005cb2:	2400      	movs	r4, #0
 8005cb4:	18ff      	adds	r7, r7, r3
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9302      	str	r3, [sp, #8]
 8005cba:	9403      	str	r4, [sp, #12]
 8005cbc:	2400      	movs	r4, #0
 8005cbe:	e0f4      	b.n	8005eaa <__kernel_rem_pio2+0x4c6>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc4:	e758      	b.n	8005b78 <__kernel_rem_pio2+0x194>
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2c00      	cmp	r4, #0
 8005ccc:	d10b      	bne.n	8005ce6 <__kernel_rem_pio2+0x302>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <__kernel_rem_pio2+0x2f6>
 8005cd2:	9c00      	ldr	r4, [sp, #0]
 8005cd4:	1ac3      	subs	r3, r0, r3
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	002b      	movs	r3, r5
 8005cda:	9c00      	ldr	r4, [sp, #0]
 8005cdc:	3201      	adds	r2, #1
 8005cde:	3404      	adds	r4, #4
 8005ce0:	9400      	str	r4, [sp, #0]
 8005ce2:	001c      	movs	r4, r3
 8005ce4:	e752      	b.n	8005b8c <__kernel_rem_pio2+0x1a8>
 8005ce6:	4661      	mov	r1, ip
 8005ce8:	1acb      	subs	r3, r1, r3
 8005cea:	9900      	ldr	r1, [sp, #0]
 8005cec:	600b      	str	r3, [r1, #0]
 8005cee:	0023      	movs	r3, r4
 8005cf0:	e7f3      	b.n	8005cda <__kernel_rem_pio2+0x2f6>
 8005cf2:	9b04      	ldr	r3, [sp, #16]
 8005cf4:	aa12      	add	r2, sp, #72	; 0x48
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	589a      	ldr	r2, [r3, r2]
 8005cfc:	9200      	str	r2, [sp, #0]
 8005cfe:	0252      	lsls	r2, r2, #9
 8005d00:	0a52      	lsrs	r2, r2, #9
 8005d02:	a912      	add	r1, sp, #72	; 0x48
 8005d04:	505a      	str	r2, [r3, r1]
 8005d06:	e74e      	b.n	8005ba6 <__kernel_rem_pio2+0x1c2>
 8005d08:	9b04      	ldr	r3, [sp, #16]
 8005d0a:	aa12      	add	r2, sp, #72	; 0x48
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	589a      	ldr	r2, [r3, r2]
 8005d12:	9200      	str	r2, [sp, #0]
 8005d14:	0292      	lsls	r2, r2, #10
 8005d16:	0a92      	lsrs	r2, r2, #10
 8005d18:	e7f3      	b.n	8005d02 <__kernel_rem_pio2+0x31e>
 8005d1a:	0099      	lsls	r1, r3, #2
 8005d1c:	a812      	add	r0, sp, #72	; 0x48
 8005d1e:	5809      	ldr	r1, [r1, r0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	430a      	orrs	r2, r1
 8005d24:	e7a3      	b.n	8005c6e <__kernel_rem_pio2+0x28a>
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	fffffd84 	.word	0xfffffd84
 8005d2c:	080066c0 	.word	0x080066c0
 8005d30:	40200000 	.word	0x40200000
 8005d34:	00ffffff 	.word	0x00ffffff
 8005d38:	3ff00000 	.word	0x3ff00000
 8005d3c:	3e700000 	.word	0x3e700000
 8005d40:	41700000 	.word	0x41700000
 8005d44:	3fe00000 	.word	0x3fe00000
 8005d48:	3301      	adds	r3, #1
 8005d4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d4c:	009a      	lsls	r2, r3, #2
 8005d4e:	4252      	negs	r2, r2
 8005d50:	588a      	ldr	r2, [r1, r2]
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	d0f8      	beq.n	8005d48 <__kernel_rem_pio2+0x364>
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d5a:	1c57      	adds	r7, r2, #1
 8005d5c:	1854      	adds	r4, r2, r1
 8005d5e:	00e4      	lsls	r4, r4, #3
 8005d60:	aa26      	add	r2, sp, #152	; 0x98
 8005d62:	1914      	adds	r4, r2, r4
 8005d64:	9a04      	ldr	r2, [sp, #16]
 8005d66:	18d3      	adds	r3, r2, r3
 8005d68:	9304      	str	r3, [sp, #16]
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	42bb      	cmp	r3, r7
 8005d6e:	da00      	bge.n	8005d72 <__kernel_rem_pio2+0x38e>
 8005d70:	e6b0      	b.n	8005ad4 <__kernel_rem_pio2+0xf0>
 8005d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d74:	00bb      	lsls	r3, r7, #2
 8005d76:	58d0      	ldr	r0, [r2, r3]
 8005d78:	f7fc f93c 	bl	8001ff4 <__aeabi_i2d>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2300      	movs	r3, #0
 8005d80:	0026      	movs	r6, r4
 8005d82:	2500      	movs	r5, #0
 8005d84:	6020      	str	r0, [r4, #0]
 8005d86:	6061      	str	r1, [r4, #4]
 8005d88:	9200      	str	r2, [sp, #0]
 8005d8a:	9301      	str	r3, [sp, #4]
 8005d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d8e:	429d      	cmp	r5, r3
 8005d90:	dd0b      	ble.n	8005daa <__kernel_rem_pio2+0x3c6>
 8005d92:	00fb      	lsls	r3, r7, #3
 8005d94:	aa76      	add	r2, sp, #472	; 0x1d8
 8005d96:	18d3      	adds	r3, r2, r3
 8005d98:	3701      	adds	r7, #1
 8005d9a:	9900      	ldr	r1, [sp, #0]
 8005d9c:	9a01      	ldr	r2, [sp, #4]
 8005d9e:	3408      	adds	r4, #8
 8005da0:	6019      	str	r1, [r3, #0]
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	e7e1      	b.n	8005d6a <__kernel_rem_pio2+0x386>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e7cf      	b.n	8005d4a <__kernel_rem_pio2+0x366>
 8005daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dac:	00e9      	lsls	r1, r5, #3
 8005dae:	1859      	adds	r1, r3, r1
 8005db0:	6808      	ldr	r0, [r1, #0]
 8005db2:	6849      	ldr	r1, [r1, #4]
 8005db4:	6832      	ldr	r2, [r6, #0]
 8005db6:	6873      	ldr	r3, [r6, #4]
 8005db8:	f7fb fae8 	bl	800138c <__aeabi_dmul>
 8005dbc:	0002      	movs	r2, r0
 8005dbe:	000b      	movs	r3, r1
 8005dc0:	9800      	ldr	r0, [sp, #0]
 8005dc2:	9901      	ldr	r1, [sp, #4]
 8005dc4:	f7fa fb72 	bl	80004ac <__aeabi_dadd>
 8005dc8:	3501      	adds	r5, #1
 8005dca:	9000      	str	r0, [sp, #0]
 8005dcc:	9101      	str	r1, [sp, #4]
 8005dce:	3e08      	subs	r6, #8
 8005dd0:	e7dc      	b.n	8005d8c <__kernel_rem_pio2+0x3a8>
 8005dd2:	9b00      	ldr	r3, [sp, #0]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	e74f      	b.n	8005c7a <__kernel_rem_pio2+0x296>
 8005dda:	9b02      	ldr	r3, [sp, #8]
 8005ddc:	0030      	movs	r0, r6
 8005dde:	425a      	negs	r2, r3
 8005de0:	0039      	movs	r1, r7
 8005de2:	f000 faaf 	bl	8006344 <scalbn>
 8005de6:	2200      	movs	r2, #0
 8005de8:	4bb6      	ldr	r3, [pc, #728]	; (80060c4 <__kernel_rem_pio2+0x6e0>)
 8005dea:	0004      	movs	r4, r0
 8005dec:	000d      	movs	r5, r1
 8005dee:	f7fa fb35 	bl	800045c <__aeabi_dcmpge>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d025      	beq.n	8005e42 <__kernel_rem_pio2+0x45e>
 8005df6:	2200      	movs	r2, #0
 8005df8:	4bb3      	ldr	r3, [pc, #716]	; (80060c8 <__kernel_rem_pio2+0x6e4>)
 8005dfa:	0020      	movs	r0, r4
 8005dfc:	0029      	movs	r1, r5
 8005dfe:	f7fb fac5 	bl	800138c <__aeabi_dmul>
 8005e02:	f7fc f8c1 	bl	8001f88 <__aeabi_d2iz>
 8005e06:	9b04      	ldr	r3, [sp, #16]
 8005e08:	0006      	movs	r6, r0
 8005e0a:	009f      	lsls	r7, r3, #2
 8005e0c:	f7fc f8f2 	bl	8001ff4 <__aeabi_i2d>
 8005e10:	2200      	movs	r2, #0
 8005e12:	4bac      	ldr	r3, [pc, #688]	; (80060c4 <__kernel_rem_pio2+0x6e0>)
 8005e14:	f7fb faba 	bl	800138c <__aeabi_dmul>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	000b      	movs	r3, r1
 8005e1c:	0020      	movs	r0, r4
 8005e1e:	0029      	movs	r1, r5
 8005e20:	f7fb fd20 	bl	8001864 <__aeabi_dsub>
 8005e24:	f7fc f8b0 	bl	8001f88 <__aeabi_d2iz>
 8005e28:	ab12      	add	r3, sp, #72	; 0x48
 8005e2a:	51d8      	str	r0, [r3, r7]
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	aa12      	add	r2, sp, #72	; 0x48
 8005e30:	3301      	adds	r3, #1
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	9b02      	ldr	r3, [sp, #8]
 8005e36:	3318      	adds	r3, #24
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	9b00      	ldr	r3, [sp, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	509e      	str	r6, [r3, r2]
 8005e40:	e725      	b.n	8005c8e <__kernel_rem_pio2+0x2aa>
 8005e42:	9b04      	ldr	r3, [sp, #16]
 8005e44:	0020      	movs	r0, r4
 8005e46:	0029      	movs	r1, r5
 8005e48:	009e      	lsls	r6, r3, #2
 8005e4a:	f7fc f89d 	bl	8001f88 <__aeabi_d2iz>
 8005e4e:	ab12      	add	r3, sp, #72	; 0x48
 8005e50:	5198      	str	r0, [r3, r6]
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	e71a      	b.n	8005c8e <__kernel_rem_pio2+0x2aa>
 8005e58:	00e5      	lsls	r5, r4, #3
 8005e5a:	ab76      	add	r3, sp, #472	; 0x1d8
 8005e5c:	aa12      	add	r2, sp, #72	; 0x48
 8005e5e:	195d      	adds	r5, r3, r5
 8005e60:	00a3      	lsls	r3, r4, #2
 8005e62:	5898      	ldr	r0, [r3, r2]
 8005e64:	f7fc f8c6 	bl	8001ff4 <__aeabi_i2d>
 8005e68:	0032      	movs	r2, r6
 8005e6a:	003b      	movs	r3, r7
 8005e6c:	f7fb fa8e 	bl	800138c <__aeabi_dmul>
 8005e70:	2200      	movs	r2, #0
 8005e72:	6028      	str	r0, [r5, #0]
 8005e74:	6069      	str	r1, [r5, #4]
 8005e76:	4b94      	ldr	r3, [pc, #592]	; (80060c8 <__kernel_rem_pio2+0x6e4>)
 8005e78:	0030      	movs	r0, r6
 8005e7a:	0039      	movs	r1, r7
 8005e7c:	f7fb fa86 	bl	800138c <__aeabi_dmul>
 8005e80:	3c01      	subs	r4, #1
 8005e82:	0006      	movs	r6, r0
 8005e84:	000f      	movs	r7, r1
 8005e86:	e70a      	b.n	8005c9e <__kernel_rem_pio2+0x2ba>
 8005e88:	4b90      	ldr	r3, [pc, #576]	; (80060cc <__kernel_rem_pio2+0x6e8>)
 8005e8a:	00e1      	lsls	r1, r4, #3
 8005e8c:	1859      	adds	r1, r3, r1
 8005e8e:	6808      	ldr	r0, [r1, #0]
 8005e90:	6849      	ldr	r1, [r1, #4]
 8005e92:	cf0c      	ldmia	r7!, {r2, r3}
 8005e94:	f7fb fa7a 	bl	800138c <__aeabi_dmul>
 8005e98:	0002      	movs	r2, r0
 8005e9a:	000b      	movs	r3, r1
 8005e9c:	9802      	ldr	r0, [sp, #8]
 8005e9e:	9903      	ldr	r1, [sp, #12]
 8005ea0:	f7fa fb04 	bl	80004ac <__aeabi_dadd>
 8005ea4:	9002      	str	r0, [sp, #8]
 8005ea6:	9103      	str	r1, [sp, #12]
 8005ea8:	3401      	adds	r4, #1
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	429c      	cmp	r4, r3
 8005eae:	dc01      	bgt.n	8005eb4 <__kernel_rem_pio2+0x4d0>
 8005eb0:	42a6      	cmp	r6, r4
 8005eb2:	dae9      	bge.n	8005e88 <__kernel_rem_pio2+0x4a4>
 8005eb4:	00f3      	lsls	r3, r6, #3
 8005eb6:	aa4e      	add	r2, sp, #312	; 0x138
 8005eb8:	18d3      	adds	r3, r2, r3
 8005eba:	3d01      	subs	r5, #1
 8005ebc:	9902      	ldr	r1, [sp, #8]
 8005ebe:	9a03      	ldr	r2, [sp, #12]
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	6019      	str	r1, [r3, #0]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	e6ef      	b.n	8005ca8 <__kernel_rem_pio2+0x2c4>
 8005ec8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	dc0b      	bgt.n	8005ee6 <__kernel_rem_pio2+0x502>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dd00      	ble.n	8005ed4 <__kernel_rem_pio2+0x4f0>
 8005ed2:	e08a      	b.n	8005fea <__kernel_rem_pio2+0x606>
 8005ed4:	d055      	beq.n	8005f82 <__kernel_rem_pio2+0x59e>
 8005ed6:	2007      	movs	r0, #7
 8005ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eda:	4003      	ands	r3, r0
 8005edc:	0018      	movs	r0, r3
 8005ede:	239f      	movs	r3, #159	; 0x9f
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	449d      	add	sp, r3
 8005ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d1f4      	bne.n	8005ed6 <__kernel_rem_pio2+0x4f2>
 8005eec:	9b00      	ldr	r3, [sp, #0]
 8005eee:	00dc      	lsls	r4, r3, #3
 8005ef0:	ab4e      	add	r3, sp, #312	; 0x138
 8005ef2:	191c      	adds	r4, r3, r4
 8005ef4:	0025      	movs	r5, r4
 8005ef6:	9b00      	ldr	r3, [sp, #0]
 8005ef8:	9302      	str	r3, [sp, #8]
 8005efa:	9b02      	ldr	r3, [sp, #8]
 8005efc:	3d08      	subs	r5, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd00      	ble.n	8005f04 <__kernel_rem_pio2+0x520>
 8005f02:	e083      	b.n	800600c <__kernel_rem_pio2+0x628>
 8005f04:	9d00      	ldr	r5, [sp, #0]
 8005f06:	3c08      	subs	r4, #8
 8005f08:	2d01      	cmp	r5, #1
 8005f0a:	dd00      	ble.n	8005f0e <__kernel_rem_pio2+0x52a>
 8005f0c:	e0a0      	b.n	8006050 <__kernel_rem_pio2+0x66c>
 8005f0e:	2400      	movs	r4, #0
 8005f10:	0021      	movs	r1, r4
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	dd00      	ble.n	8005f1a <__kernel_rem_pio2+0x536>
 8005f18:	e0b8      	b.n	800608c <__kernel_rem_pio2+0x6a8>
 8005f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f1c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8005f1e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8005f20:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8005f22:	9851      	ldr	r0, [sp, #324]	; 0x144
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d000      	beq.n	8005f2a <__kernel_rem_pio2+0x546>
 8005f28:	e0be      	b.n	80060a8 <__kernel_rem_pio2+0x6c4>
 8005f2a:	0033      	movs	r3, r6
 8005f2c:	003a      	movs	r2, r7
 8005f2e:	9e07      	ldr	r6, [sp, #28]
 8005f30:	6032      	str	r2, [r6, #0]
 8005f32:	6073      	str	r3, [r6, #4]
 8005f34:	002a      	movs	r2, r5
 8005f36:	0003      	movs	r3, r0
 8005f38:	60b2      	str	r2, [r6, #8]
 8005f3a:	60f3      	str	r3, [r6, #12]
 8005f3c:	0022      	movs	r2, r4
 8005f3e:	000b      	movs	r3, r1
 8005f40:	6132      	str	r2, [r6, #16]
 8005f42:	6173      	str	r3, [r6, #20]
 8005f44:	e7c7      	b.n	8005ed6 <__kernel_rem_pio2+0x4f2>
 8005f46:	9b00      	ldr	r3, [sp, #0]
 8005f48:	aa4e      	add	r2, sp, #312	; 0x138
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	0028      	movs	r0, r5
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0021      	movs	r1, r4
 8005f56:	f7fa faa9 	bl	80004ac <__aeabi_dadd>
 8005f5a:	0005      	movs	r5, r0
 8005f5c:	000c      	movs	r4, r1
 8005f5e:	9b00      	ldr	r3, [sp, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	9b00      	ldr	r3, [sp, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	daed      	bge.n	8005f46 <__kernel_rem_pio2+0x562>
 8005f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <__kernel_rem_pio2+0x592>
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	18e4      	adds	r4, r4, r3
 8005f76:	002a      	movs	r2, r5
 8005f78:	0023      	movs	r3, r4
 8005f7a:	9907      	ldr	r1, [sp, #28]
 8005f7c:	600a      	str	r2, [r1, #0]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	e7a9      	b.n	8005ed6 <__kernel_rem_pio2+0x4f2>
 8005f82:	9da4      	ldr	r5, [sp, #656]	; 0x290
 8005f84:	002c      	movs	r4, r5
 8005f86:	e7ed      	b.n	8005f64 <__kernel_rem_pio2+0x580>
 8005f88:	00e3      	lsls	r3, r4, #3
 8005f8a:	aa4e      	add	r2, sp, #312	; 0x138
 8005f8c:	18d3      	adds	r3, r2, r3
 8005f8e:	0030      	movs	r0, r6
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	0029      	movs	r1, r5
 8005f96:	f7fa fa89 	bl	80004ac <__aeabi_dadd>
 8005f9a:	0006      	movs	r6, r0
 8005f9c:	000d      	movs	r5, r1
 8005f9e:	3c01      	subs	r4, #1
 8005fa0:	2c00      	cmp	r4, #0
 8005fa2:	daf1      	bge.n	8005f88 <__kernel_rem_pio2+0x5a4>
 8005fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa6:	0029      	movs	r1, r5
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <__kernel_rem_pio2+0x5ce>
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	18e9      	adds	r1, r5, r3
 8005fb2:	0032      	movs	r2, r6
 8005fb4:	000b      	movs	r3, r1
 8005fb6:	9907      	ldr	r1, [sp, #28]
 8005fb8:	2401      	movs	r4, #1
 8005fba:	600a      	str	r2, [r1, #0]
 8005fbc:	604b      	str	r3, [r1, #4]
 8005fbe:	984e      	ldr	r0, [sp, #312]	; 0x138
 8005fc0:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8005fc2:	002b      	movs	r3, r5
 8005fc4:	f7fb fc4e 	bl	8001864 <__aeabi_dsub>
 8005fc8:	0006      	movs	r6, r0
 8005fca:	000d      	movs	r5, r1
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	da0f      	bge.n	8005ff2 <__kernel_rem_pio2+0x60e>
 8005fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <__kernel_rem_pio2+0x5fa>
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	18ed      	adds	r5, r5, r3
 8005fde:	0032      	movs	r2, r6
 8005fe0:	002b      	movs	r3, r5
 8005fe2:	9907      	ldr	r1, [sp, #28]
 8005fe4:	608a      	str	r2, [r1, #8]
 8005fe6:	60cb      	str	r3, [r1, #12]
 8005fe8:	e775      	b.n	8005ed6 <__kernel_rem_pio2+0x4f2>
 8005fea:	2600      	movs	r6, #0
 8005fec:	9c00      	ldr	r4, [sp, #0]
 8005fee:	0035      	movs	r5, r6
 8005ff0:	e7d6      	b.n	8005fa0 <__kernel_rem_pio2+0x5bc>
 8005ff2:	00e3      	lsls	r3, r4, #3
 8005ff4:	aa4e      	add	r2, sp, #312	; 0x138
 8005ff6:	18d3      	adds	r3, r2, r3
 8005ff8:	0030      	movs	r0, r6
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	0029      	movs	r1, r5
 8006000:	f7fa fa54 	bl	80004ac <__aeabi_dadd>
 8006004:	3401      	adds	r4, #1
 8006006:	0006      	movs	r6, r0
 8006008:	000d      	movs	r5, r1
 800600a:	e7df      	b.n	8005fcc <__kernel_rem_pio2+0x5e8>
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	68ae      	ldr	r6, [r5, #8]
 8006010:	68ef      	ldr	r7, [r5, #12]
 8006012:	3b01      	subs	r3, #1
 8006014:	9302      	str	r3, [sp, #8]
 8006016:	682a      	ldr	r2, [r5, #0]
 8006018:	686b      	ldr	r3, [r5, #4]
 800601a:	9204      	str	r2, [sp, #16]
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	9804      	ldr	r0, [sp, #16]
 8006020:	9905      	ldr	r1, [sp, #20]
 8006022:	0032      	movs	r2, r6
 8006024:	003b      	movs	r3, r7
 8006026:	f7fa fa41 	bl	80004ac <__aeabi_dadd>
 800602a:	0002      	movs	r2, r0
 800602c:	000b      	movs	r3, r1
 800602e:	9008      	str	r0, [sp, #32]
 8006030:	9109      	str	r1, [sp, #36]	; 0x24
 8006032:	9804      	ldr	r0, [sp, #16]
 8006034:	9905      	ldr	r1, [sp, #20]
 8006036:	f7fb fc15 	bl	8001864 <__aeabi_dsub>
 800603a:	0032      	movs	r2, r6
 800603c:	003b      	movs	r3, r7
 800603e:	f7fa fa35 	bl	80004ac <__aeabi_dadd>
 8006042:	9a08      	ldr	r2, [sp, #32]
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	60a8      	str	r0, [r5, #8]
 8006048:	60e9      	str	r1, [r5, #12]
 800604a:	602a      	str	r2, [r5, #0]
 800604c:	606b      	str	r3, [r5, #4]
 800604e:	e754      	b.n	8005efa <__kernel_rem_pio2+0x516>
 8006050:	6826      	ldr	r6, [r4, #0]
 8006052:	6867      	ldr	r7, [r4, #4]
 8006054:	68a2      	ldr	r2, [r4, #8]
 8006056:	68e3      	ldr	r3, [r4, #12]
 8006058:	0030      	movs	r0, r6
 800605a:	0039      	movs	r1, r7
 800605c:	9202      	str	r2, [sp, #8]
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	f7fa fa24 	bl	80004ac <__aeabi_dadd>
 8006064:	0002      	movs	r2, r0
 8006066:	000b      	movs	r3, r1
 8006068:	9004      	str	r0, [sp, #16]
 800606a:	9105      	str	r1, [sp, #20]
 800606c:	0030      	movs	r0, r6
 800606e:	0039      	movs	r1, r7
 8006070:	f7fb fbf8 	bl	8001864 <__aeabi_dsub>
 8006074:	9a02      	ldr	r2, [sp, #8]
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	f7fa fa18 	bl	80004ac <__aeabi_dadd>
 800607c:	9a04      	ldr	r2, [sp, #16]
 800607e:	9b05      	ldr	r3, [sp, #20]
 8006080:	60a0      	str	r0, [r4, #8]
 8006082:	60e1      	str	r1, [r4, #12]
 8006084:	6022      	str	r2, [r4, #0]
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	3d01      	subs	r5, #1
 800608a:	e73c      	b.n	8005f06 <__kernel_rem_pio2+0x522>
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	aa4e      	add	r2, sp, #312	; 0x138
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	18d3      	adds	r3, r2, r3
 8006094:	0020      	movs	r0, r4
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f7fa fa07 	bl	80004ac <__aeabi_dadd>
 800609e:	9b00      	ldr	r3, [sp, #0]
 80060a0:	0004      	movs	r4, r0
 80060a2:	3b01      	subs	r3, #1
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	e734      	b.n	8005f12 <__kernel_rem_pio2+0x52e>
 80060a8:	9b07      	ldr	r3, [sp, #28]
 80060aa:	9a07      	ldr	r2, [sp, #28]
 80060ac:	601f      	str	r7, [r3, #0]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	061b      	lsls	r3, r3, #24
 80060b2:	18f6      	adds	r6, r6, r3
 80060b4:	18c0      	adds	r0, r0, r3
 80060b6:	18c9      	adds	r1, r1, r3
 80060b8:	6056      	str	r6, [r2, #4]
 80060ba:	6095      	str	r5, [r2, #8]
 80060bc:	60d0      	str	r0, [r2, #12]
 80060be:	6114      	str	r4, [r2, #16]
 80060c0:	6151      	str	r1, [r2, #20]
 80060c2:	e708      	b.n	8005ed6 <__kernel_rem_pio2+0x4f2>
 80060c4:	41700000 	.word	0x41700000
 80060c8:	3e700000 	.word	0x3e700000
 80060cc:	08006680 	.word	0x08006680

080060d0 <__kernel_sin>:
 80060d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	9202      	str	r2, [sp, #8]
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	22f9      	movs	r2, #249	; 0xf9
 80060da:	004b      	lsls	r3, r1, #1
 80060dc:	0007      	movs	r7, r0
 80060de:	000e      	movs	r6, r1
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	0592      	lsls	r2, r2, #22
 80060e4:	4293      	cmp	r3, r2
 80060e6:	da03      	bge.n	80060f0 <__kernel_sin+0x20>
 80060e8:	f7fb ff4e 	bl	8001f88 <__aeabi_d2iz>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d04c      	beq.n	800618a <__kernel_sin+0xba>
 80060f0:	003a      	movs	r2, r7
 80060f2:	0033      	movs	r3, r6
 80060f4:	0038      	movs	r0, r7
 80060f6:	0031      	movs	r1, r6
 80060f8:	f7fb f948 	bl	800138c <__aeabi_dmul>
 80060fc:	0004      	movs	r4, r0
 80060fe:	000d      	movs	r5, r1
 8006100:	0002      	movs	r2, r0
 8006102:	000b      	movs	r3, r1
 8006104:	0038      	movs	r0, r7
 8006106:	0031      	movs	r1, r6
 8006108:	f7fb f940 	bl	800138c <__aeabi_dmul>
 800610c:	4a39      	ldr	r2, [pc, #228]	; (80061f4 <__kernel_sin+0x124>)
 800610e:	9000      	str	r0, [sp, #0]
 8006110:	9101      	str	r1, [sp, #4]
 8006112:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <__kernel_sin+0x128>)
 8006114:	0020      	movs	r0, r4
 8006116:	0029      	movs	r1, r5
 8006118:	f7fb f938 	bl	800138c <__aeabi_dmul>
 800611c:	4a37      	ldr	r2, [pc, #220]	; (80061fc <__kernel_sin+0x12c>)
 800611e:	4b38      	ldr	r3, [pc, #224]	; (8006200 <__kernel_sin+0x130>)
 8006120:	f7fb fba0 	bl	8001864 <__aeabi_dsub>
 8006124:	0022      	movs	r2, r4
 8006126:	002b      	movs	r3, r5
 8006128:	f7fb f930 	bl	800138c <__aeabi_dmul>
 800612c:	4a35      	ldr	r2, [pc, #212]	; (8006204 <__kernel_sin+0x134>)
 800612e:	4b36      	ldr	r3, [pc, #216]	; (8006208 <__kernel_sin+0x138>)
 8006130:	f7fa f9bc 	bl	80004ac <__aeabi_dadd>
 8006134:	0022      	movs	r2, r4
 8006136:	002b      	movs	r3, r5
 8006138:	f7fb f928 	bl	800138c <__aeabi_dmul>
 800613c:	4a33      	ldr	r2, [pc, #204]	; (800620c <__kernel_sin+0x13c>)
 800613e:	4b34      	ldr	r3, [pc, #208]	; (8006210 <__kernel_sin+0x140>)
 8006140:	f7fb fb90 	bl	8001864 <__aeabi_dsub>
 8006144:	0022      	movs	r2, r4
 8006146:	002b      	movs	r3, r5
 8006148:	f7fb f920 	bl	800138c <__aeabi_dmul>
 800614c:	4b31      	ldr	r3, [pc, #196]	; (8006214 <__kernel_sin+0x144>)
 800614e:	4a32      	ldr	r2, [pc, #200]	; (8006218 <__kernel_sin+0x148>)
 8006150:	f7fa f9ac 	bl	80004ac <__aeabi_dadd>
 8006154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006156:	9004      	str	r0, [sp, #16]
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <__kernel_sin+0xc2>
 800615e:	0002      	movs	r2, r0
 8006160:	000b      	movs	r3, r1
 8006162:	0020      	movs	r0, r4
 8006164:	0029      	movs	r1, r5
 8006166:	f7fb f911 	bl	800138c <__aeabi_dmul>
 800616a:	4a2c      	ldr	r2, [pc, #176]	; (800621c <__kernel_sin+0x14c>)
 800616c:	4b2c      	ldr	r3, [pc, #176]	; (8006220 <__kernel_sin+0x150>)
 800616e:	f7fb fb79 	bl	8001864 <__aeabi_dsub>
 8006172:	9a00      	ldr	r2, [sp, #0]
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	f7fb f909 	bl	800138c <__aeabi_dmul>
 800617a:	0002      	movs	r2, r0
 800617c:	000b      	movs	r3, r1
 800617e:	0038      	movs	r0, r7
 8006180:	0031      	movs	r1, r6
 8006182:	f7fa f993 	bl	80004ac <__aeabi_dadd>
 8006186:	0007      	movs	r7, r0
 8006188:	000e      	movs	r6, r1
 800618a:	0038      	movs	r0, r7
 800618c:	0031      	movs	r1, r6
 800618e:	b009      	add	sp, #36	; 0x24
 8006190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006192:	2200      	movs	r2, #0
 8006194:	9802      	ldr	r0, [sp, #8]
 8006196:	9903      	ldr	r1, [sp, #12]
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <__kernel_sin+0x154>)
 800619a:	f7fb f8f7 	bl	800138c <__aeabi_dmul>
 800619e:	9a04      	ldr	r2, [sp, #16]
 80061a0:	9b05      	ldr	r3, [sp, #20]
 80061a2:	9006      	str	r0, [sp, #24]
 80061a4:	9107      	str	r1, [sp, #28]
 80061a6:	9800      	ldr	r0, [sp, #0]
 80061a8:	9901      	ldr	r1, [sp, #4]
 80061aa:	f7fb f8ef 	bl	800138c <__aeabi_dmul>
 80061ae:	0002      	movs	r2, r0
 80061b0:	000b      	movs	r3, r1
 80061b2:	9806      	ldr	r0, [sp, #24]
 80061b4:	9907      	ldr	r1, [sp, #28]
 80061b6:	f7fb fb55 	bl	8001864 <__aeabi_dsub>
 80061ba:	0022      	movs	r2, r4
 80061bc:	002b      	movs	r3, r5
 80061be:	f7fb f8e5 	bl	800138c <__aeabi_dmul>
 80061c2:	9a02      	ldr	r2, [sp, #8]
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	f7fb fb4d 	bl	8001864 <__aeabi_dsub>
 80061ca:	4a14      	ldr	r2, [pc, #80]	; (800621c <__kernel_sin+0x14c>)
 80061cc:	0004      	movs	r4, r0
 80061ce:	000d      	movs	r5, r1
 80061d0:	9800      	ldr	r0, [sp, #0]
 80061d2:	9901      	ldr	r1, [sp, #4]
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <__kernel_sin+0x150>)
 80061d6:	f7fb f8d9 	bl	800138c <__aeabi_dmul>
 80061da:	0002      	movs	r2, r0
 80061dc:	000b      	movs	r3, r1
 80061de:	0020      	movs	r0, r4
 80061e0:	0029      	movs	r1, r5
 80061e2:	f7fa f963 	bl	80004ac <__aeabi_dadd>
 80061e6:	0002      	movs	r2, r0
 80061e8:	000b      	movs	r3, r1
 80061ea:	0038      	movs	r0, r7
 80061ec:	0031      	movs	r1, r6
 80061ee:	f7fb fb39 	bl	8001864 <__aeabi_dsub>
 80061f2:	e7c8      	b.n	8006186 <__kernel_sin+0xb6>
 80061f4:	5acfd57c 	.word	0x5acfd57c
 80061f8:	3de5d93a 	.word	0x3de5d93a
 80061fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8006200:	3e5ae5e6 	.word	0x3e5ae5e6
 8006204:	57b1fe7d 	.word	0x57b1fe7d
 8006208:	3ec71de3 	.word	0x3ec71de3
 800620c:	19c161d5 	.word	0x19c161d5
 8006210:	3f2a01a0 	.word	0x3f2a01a0
 8006214:	3f811111 	.word	0x3f811111
 8006218:	1110f8a6 	.word	0x1110f8a6
 800621c:	55555549 	.word	0x55555549
 8006220:	3fc55555 	.word	0x3fc55555
 8006224:	3fe00000 	.word	0x3fe00000

08006228 <fabs>:
 8006228:	004b      	lsls	r3, r1, #1
 800622a:	0859      	lsrs	r1, r3, #1
 800622c:	4770      	bx	lr
	...

08006230 <floor>:
 8006230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006232:	004b      	lsls	r3, r1, #1
 8006234:	4a3d      	ldr	r2, [pc, #244]	; (800632c <floor+0xfc>)
 8006236:	0d5b      	lsrs	r3, r3, #21
 8006238:	189f      	adds	r7, r3, r2
 800623a:	4684      	mov	ip, r0
 800623c:	000e      	movs	r6, r1
 800623e:	000d      	movs	r5, r1
 8006240:	0004      	movs	r4, r0
 8006242:	9001      	str	r0, [sp, #4]
 8006244:	2f13      	cmp	r7, #19
 8006246:	dc34      	bgt.n	80062b2 <floor+0x82>
 8006248:	2f00      	cmp	r7, #0
 800624a:	da16      	bge.n	800627a <floor+0x4a>
 800624c:	4a38      	ldr	r2, [pc, #224]	; (8006330 <floor+0x100>)
 800624e:	4b39      	ldr	r3, [pc, #228]	; (8006334 <floor+0x104>)
 8006250:	4660      	mov	r0, ip
 8006252:	0031      	movs	r1, r6
 8006254:	f7fa f92a 	bl	80004ac <__aeabi_dadd>
 8006258:	2200      	movs	r2, #0
 800625a:	2300      	movs	r3, #0
 800625c:	f7fa f8f4 	bl	8000448 <__aeabi_dcmpgt>
 8006260:	2800      	cmp	r0, #0
 8006262:	d007      	beq.n	8006274 <floor+0x44>
 8006264:	2e00      	cmp	r6, #0
 8006266:	da5d      	bge.n	8006324 <floor+0xf4>
 8006268:	0073      	lsls	r3, r6, #1
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	431c      	orrs	r4, r3
 800626e:	d001      	beq.n	8006274 <floor+0x44>
 8006270:	2400      	movs	r4, #0
 8006272:	4d31      	ldr	r5, [pc, #196]	; (8006338 <floor+0x108>)
 8006274:	46a4      	mov	ip, r4
 8006276:	002e      	movs	r6, r5
 8006278:	e029      	b.n	80062ce <floor+0x9e>
 800627a:	4b30      	ldr	r3, [pc, #192]	; (800633c <floor+0x10c>)
 800627c:	413b      	asrs	r3, r7
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	400b      	ands	r3, r1
 8006282:	4303      	orrs	r3, r0
 8006284:	d023      	beq.n	80062ce <floor+0x9e>
 8006286:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <floor+0x100>)
 8006288:	4b2a      	ldr	r3, [pc, #168]	; (8006334 <floor+0x104>)
 800628a:	4660      	mov	r0, ip
 800628c:	0031      	movs	r1, r6
 800628e:	f7fa f90d 	bl	80004ac <__aeabi_dadd>
 8006292:	2200      	movs	r2, #0
 8006294:	2300      	movs	r3, #0
 8006296:	f7fa f8d7 	bl	8000448 <__aeabi_dcmpgt>
 800629a:	2800      	cmp	r0, #0
 800629c:	d0ea      	beq.n	8006274 <floor+0x44>
 800629e:	2e00      	cmp	r6, #0
 80062a0:	da03      	bge.n	80062aa <floor+0x7a>
 80062a2:	2380      	movs	r3, #128	; 0x80
 80062a4:	035b      	lsls	r3, r3, #13
 80062a6:	413b      	asrs	r3, r7
 80062a8:	18f5      	adds	r5, r6, r3
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	2400      	movs	r4, #0
 80062ae:	439d      	bics	r5, r3
 80062b0:	e7e0      	b.n	8006274 <floor+0x44>
 80062b2:	2f33      	cmp	r7, #51	; 0x33
 80062b4:	dd0f      	ble.n	80062d6 <floor+0xa6>
 80062b6:	2380      	movs	r3, #128	; 0x80
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	429f      	cmp	r7, r3
 80062bc:	d107      	bne.n	80062ce <floor+0x9e>
 80062be:	0002      	movs	r2, r0
 80062c0:	000b      	movs	r3, r1
 80062c2:	4660      	mov	r0, ip
 80062c4:	0031      	movs	r1, r6
 80062c6:	f7fa f8f1 	bl	80004ac <__aeabi_dadd>
 80062ca:	4684      	mov	ip, r0
 80062cc:	000e      	movs	r6, r1
 80062ce:	4660      	mov	r0, ip
 80062d0:	0031      	movs	r1, r6
 80062d2:	b003      	add	sp, #12
 80062d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d6:	4a1a      	ldr	r2, [pc, #104]	; (8006340 <floor+0x110>)
 80062d8:	189b      	adds	r3, r3, r2
 80062da:	2201      	movs	r2, #1
 80062dc:	4252      	negs	r2, r2
 80062de:	40da      	lsrs	r2, r3
 80062e0:	9200      	str	r2, [sp, #0]
 80062e2:	4210      	tst	r0, r2
 80062e4:	d0f3      	beq.n	80062ce <floor+0x9e>
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <floor+0x100>)
 80062e8:	4b12      	ldr	r3, [pc, #72]	; (8006334 <floor+0x104>)
 80062ea:	4660      	mov	r0, ip
 80062ec:	0031      	movs	r1, r6
 80062ee:	f7fa f8dd 	bl	80004ac <__aeabi_dadd>
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	f7fa f8a7 	bl	8000448 <__aeabi_dcmpgt>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d0ba      	beq.n	8006274 <floor+0x44>
 80062fe:	2e00      	cmp	r6, #0
 8006300:	da02      	bge.n	8006308 <floor+0xd8>
 8006302:	2f14      	cmp	r7, #20
 8006304:	d103      	bne.n	800630e <floor+0xde>
 8006306:	3501      	adds	r5, #1
 8006308:	9b00      	ldr	r3, [sp, #0]
 800630a:	439c      	bics	r4, r3
 800630c:	e7b2      	b.n	8006274 <floor+0x44>
 800630e:	2334      	movs	r3, #52	; 0x34
 8006310:	1bdf      	subs	r7, r3, r7
 8006312:	3b33      	subs	r3, #51	; 0x33
 8006314:	40bb      	lsls	r3, r7
 8006316:	18e4      	adds	r4, r4, r3
 8006318:	9b01      	ldr	r3, [sp, #4]
 800631a:	429c      	cmp	r4, r3
 800631c:	419b      	sbcs	r3, r3
 800631e:	425b      	negs	r3, r3
 8006320:	18f5      	adds	r5, r6, r3
 8006322:	e7f1      	b.n	8006308 <floor+0xd8>
 8006324:	2400      	movs	r4, #0
 8006326:	0025      	movs	r5, r4
 8006328:	e7a4      	b.n	8006274 <floor+0x44>
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	fffffc01 	.word	0xfffffc01
 8006330:	8800759c 	.word	0x8800759c
 8006334:	7e37e43c 	.word	0x7e37e43c
 8006338:	bff00000 	.word	0xbff00000
 800633c:	000fffff 	.word	0x000fffff
 8006340:	fffffbed 	.word	0xfffffbed

08006344 <scalbn>:
 8006344:	004b      	lsls	r3, r1, #1
 8006346:	b570      	push	{r4, r5, r6, lr}
 8006348:	0d5b      	lsrs	r3, r3, #21
 800634a:	0014      	movs	r4, r2
 800634c:	000a      	movs	r2, r1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <scalbn+0x2a>
 8006352:	004b      	lsls	r3, r1, #1
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	4303      	orrs	r3, r0
 8006358:	d010      	beq.n	800637c <scalbn+0x38>
 800635a:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <scalbn+0xb4>)
 800635c:	2200      	movs	r2, #0
 800635e:	f7fb f815 	bl	800138c <__aeabi_dmul>
 8006362:	4b26      	ldr	r3, [pc, #152]	; (80063fc <scalbn+0xb8>)
 8006364:	429c      	cmp	r4, r3
 8006366:	da0a      	bge.n	800637e <scalbn+0x3a>
 8006368:	4a25      	ldr	r2, [pc, #148]	; (8006400 <scalbn+0xbc>)
 800636a:	4b26      	ldr	r3, [pc, #152]	; (8006404 <scalbn+0xc0>)
 800636c:	e019      	b.n	80063a2 <scalbn+0x5e>
 800636e:	4d26      	ldr	r5, [pc, #152]	; (8006408 <scalbn+0xc4>)
 8006370:	42ab      	cmp	r3, r5
 8006372:	d108      	bne.n	8006386 <scalbn+0x42>
 8006374:	0002      	movs	r2, r0
 8006376:	000b      	movs	r3, r1
 8006378:	f7fa f898 	bl	80004ac <__aeabi_dadd>
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	000a      	movs	r2, r1
 8006380:	004b      	lsls	r3, r1, #1
 8006382:	0d5b      	lsrs	r3, r3, #21
 8006384:	3b36      	subs	r3, #54	; 0x36
 8006386:	4d21      	ldr	r5, [pc, #132]	; (800640c <scalbn+0xc8>)
 8006388:	18e3      	adds	r3, r4, r3
 800638a:	42ab      	cmp	r3, r5
 800638c:	dd0c      	ble.n	80063a8 <scalbn+0x64>
 800638e:	4c20      	ldr	r4, [pc, #128]	; (8006410 <scalbn+0xcc>)
 8006390:	4d20      	ldr	r5, [pc, #128]	; (8006414 <scalbn+0xd0>)
 8006392:	2900      	cmp	r1, #0
 8006394:	da01      	bge.n	800639a <scalbn+0x56>
 8006396:	4c1e      	ldr	r4, [pc, #120]	; (8006410 <scalbn+0xcc>)
 8006398:	4d1f      	ldr	r5, [pc, #124]	; (8006418 <scalbn+0xd4>)
 800639a:	0020      	movs	r0, r4
 800639c:	0029      	movs	r1, r5
 800639e:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <scalbn+0xcc>)
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <scalbn+0xd0>)
 80063a2:	f7fa fff3 	bl	800138c <__aeabi_dmul>
 80063a6:	e7e9      	b.n	800637c <scalbn+0x38>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dd05      	ble.n	80063b8 <scalbn+0x74>
 80063ac:	4c1b      	ldr	r4, [pc, #108]	; (800641c <scalbn+0xd8>)
 80063ae:	051b      	lsls	r3, r3, #20
 80063b0:	4022      	ands	r2, r4
 80063b2:	431a      	orrs	r2, r3
 80063b4:	0011      	movs	r1, r2
 80063b6:	e7e1      	b.n	800637c <scalbn+0x38>
 80063b8:	001d      	movs	r5, r3
 80063ba:	3535      	adds	r5, #53	; 0x35
 80063bc:	da13      	bge.n	80063e6 <scalbn+0xa2>
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <scalbn+0xdc>)
 80063c0:	0fcb      	lsrs	r3, r1, #31
 80063c2:	4294      	cmp	r4, r2
 80063c4:	dd08      	ble.n	80063d8 <scalbn+0x94>
 80063c6:	4812      	ldr	r0, [pc, #72]	; (8006410 <scalbn+0xcc>)
 80063c8:	4912      	ldr	r1, [pc, #72]	; (8006414 <scalbn+0xd0>)
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <scalbn+0x8e>
 80063ce:	4810      	ldr	r0, [pc, #64]	; (8006410 <scalbn+0xcc>)
 80063d0:	4911      	ldr	r1, [pc, #68]	; (8006418 <scalbn+0xd4>)
 80063d2:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <scalbn+0xcc>)
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <scalbn+0xd0>)
 80063d6:	e7e4      	b.n	80063a2 <scalbn+0x5e>
 80063d8:	4809      	ldr	r0, [pc, #36]	; (8006400 <scalbn+0xbc>)
 80063da:	490a      	ldr	r1, [pc, #40]	; (8006404 <scalbn+0xc0>)
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0c3      	beq.n	8006368 <scalbn+0x24>
 80063e0:	4807      	ldr	r0, [pc, #28]	; (8006400 <scalbn+0xbc>)
 80063e2:	4910      	ldr	r1, [pc, #64]	; (8006424 <scalbn+0xe0>)
 80063e4:	e7c0      	b.n	8006368 <scalbn+0x24>
 80063e6:	4c0d      	ldr	r4, [pc, #52]	; (800641c <scalbn+0xd8>)
 80063e8:	3336      	adds	r3, #54	; 0x36
 80063ea:	4022      	ands	r2, r4
 80063ec:	051b      	lsls	r3, r3, #20
 80063ee:	4313      	orrs	r3, r2
 80063f0:	0019      	movs	r1, r3
 80063f2:	2200      	movs	r2, #0
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <scalbn+0xe4>)
 80063f6:	e7d4      	b.n	80063a2 <scalbn+0x5e>
 80063f8:	43500000 	.word	0x43500000
 80063fc:	ffff3cb0 	.word	0xffff3cb0
 8006400:	c2f8f359 	.word	0xc2f8f359
 8006404:	01a56e1f 	.word	0x01a56e1f
 8006408:	000007ff 	.word	0x000007ff
 800640c:	000007fe 	.word	0x000007fe
 8006410:	8800759c 	.word	0x8800759c
 8006414:	7e37e43c 	.word	0x7e37e43c
 8006418:	fe37e43c 	.word	0xfe37e43c
 800641c:	800fffff 	.word	0x800fffff
 8006420:	0000c350 	.word	0x0000c350
 8006424:	81a56e1f 	.word	0x81a56e1f
 8006428:	3c900000 	.word	0x3c900000

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
